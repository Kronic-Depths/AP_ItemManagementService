/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.saaif.item;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.doReturn;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemAttribute.ItemAnswerKey;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemAttribute.ItemFormat;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemAttribute.ItemId;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemAttribute.ItemPageLayout;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemAttribute.ItemResponseType;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemFormat.FORMAT_SA;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemFormat.FORMAT_WER;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemLanguage.LANG_ESN;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemPageLayout.PAGE_LAYOUT_SA;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemPageLayout.PAGE_LAYOUT_WER;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemResponseType.RESPONSE_TYPE_HTML_EDITOR;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemResponseType.RESPONSE_TYPE_PLAIN_TEXT;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemVersion.ITEM_RELEASE_VERSION;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemVersion.ITEM_VERSION;
import static org.opentestsystem.saaif.item.SaaifTestUtil.TEST_ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class SaaifItemFactoryTest {

    private SaaifItemFactory saaifItemFactory;

    private SaaifItemFactory spySaaifItemFactory;

    @Before
    public void setup() {
        saaifItemFactory = new SaaifItemFactory();
        spySaaifItemFactory = Mockito.spy(saaifItemFactory);
    }

    @Test
    public void itShouldCreatNewDefaultContent() {
        final ItemRelease.Item.Content content = saaifItemFactory.newDefaultContent();
        assertThat(content.getLanguage()).isEqualTo(LANG_ENU);
        assertThat(content.getVersion()).isEqualTo(ITEM_RELEASE_VERSION);
        assertThat(content.getStem()).isEqualTo(EMPTY);
    }

    @Test
    public void itShouldCreateNewAssessmentItem() {
        final ItemRelease.Item shortAnswer = saaifItemFactory.newItem(TEST_ITEM_ID, FORMAT_SA, LANG_ENU);
        doReturn(shortAnswer).when(spySaaifItemFactory).newItem(TEST_ITEM_ID, FORMAT_SA, LANG_ENU);

        final ItemRelease assessmentItem = spySaaifItemFactory.newAssessmentItem(TEST_ITEM_ID, FORMAT_SA, LANG_ENU);
        assertThat(assessmentItem.getItem()).isEqualTo(shortAnswer);
        assertThat(assessmentItem.getVersion()).isEqualTo(ITEM_RELEASE_VERSION);
    }

    @Test
    public void itShouldCreateNewItemForWER() {
        final ItemRelease.Item werItem = saaifItemFactory.newWerItem(TEST_ITEM_ID, LANG_ENU);

        doReturn(werItem).when(spySaaifItemFactory).newWerItem(TEST_ITEM_ID, LANG_ENU);

        final ItemRelease.Item item = spySaaifItemFactory.newItem(TEST_ITEM_ID, FORMAT_WER, LANG_ENU);
        assertThat(item).isEqualTo(werItem);
    }

    @Test
    public void itShouldCreateNewItemForSA() {
        final ItemRelease.Item shortAnswerItem = saaifItemFactory.newShortAnswerItem(TEST_ITEM_ID, LANG_ENU);

        doReturn(shortAnswerItem).when(spySaaifItemFactory).newShortAnswerItem(TEST_ITEM_ID, LANG_ENU);

        final ItemRelease.Item item = spySaaifItemFactory.newItem(TEST_ITEM_ID, FORMAT_SA, LANG_ENU);
        assertThat(item).isEqualTo(shortAnswerItem);
    }

    @Test
    public void itShouldCreateNullNewItem() {
        final ItemRelease.Item item = saaifItemFactory.newItem(TEST_ITEM_ID, "not-real", LANG_ENU);
        assertThat(item).isNull();
    }

    @Test
    public void itShouldCreateShortAnswerItem() {
        final ItemRelease.Item item = saaifItemFactory.newShortAnswerItem(TEST_ITEM_ID, LANG_ENU);

        assertNewItem(item, TEST_ITEM_ID, FORMAT_SA, ITEM_VERSION);
        assertThat(item.getContent()).hasSize(1);
        assertThat(item.getAttriblist().getAttrib()).hasSize(5);
        assertNewItemAttributeList(item.getAttriblist().getAttrib(), TEST_ITEM_ID, FORMAT_SA,
            PAGE_LAYOUT_SA, RESPONSE_TYPE_PLAIN_TEXT);

        final ItemRelease.Item shortAnswerItem2 = saaifItemFactory.newShortAnswerItem(TEST_ITEM_ID, LANG_ENU, LANG_ESN);
        assertThat(shortAnswerItem2.getContent()).hasSize(2);
    }

    @Test
    public void itShouldCreateWerItem() {
        final ItemRelease.Item item = saaifItemFactory.newWerItem(TEST_ITEM_ID, LANG_ENU);

        assertNewItem(item, TEST_ITEM_ID, FORMAT_WER, ITEM_VERSION);
        assertThat(item.getContent()).hasSize(1);
        assertThat(item.getAttriblist().getAttrib()).hasSize(5);
        assertNewItemAttributeList(item.getAttriblist().getAttrib(), TEST_ITEM_ID, FORMAT_WER, PAGE_LAYOUT_WER,
            RESPONSE_TYPE_HTML_EDITOR);

        final ItemRelease.Item shortAnswerItem2 = saaifItemFactory.newShortAnswerItem(TEST_ITEM_ID, LANG_ENU, LANG_ESN);
        assertThat(shortAnswerItem2.getContent()).hasSize(2);
    }

    private void assertNewItem(final ItemRelease.Item item,
                               final String itemId,
                               final String itemFormat,
                               final String itemVersion) {
        assertThat(item.getId()).isEqualTo(itemId);
        assertThat(item.getFormat()).isEqualTo(itemFormat);
        assertThat(item.getVersion()).isEqualTo(itemVersion);
    }

    private void assertNewItemAttributeList(final List<ItemRelease.Item.Attriblist.Attrib> attribList,
                                            final String itemId,
                                            final String itemFormat,
                                            final String pageLayout,
                                            final String responseType) {

        final ItemRelease.Item.Attriblist.Attrib itemIdAttr = attribList.stream().filter(attrib -> ItemId.getAttId()
            .equals(attrib.getAttid())).collect(Collectors.toList()
        ).get(0);

        final ItemRelease.Item.Attriblist.Attrib itemAnswerKeyAttr = attribList.stream().filter(attrib -> ItemAnswerKey
            .getAttId().equals(attrib.getAttid())).collect(Collectors
            .toList()).get(0);

        final ItemRelease.Item.Attriblist.Attrib itemFormatAttr = attribList.stream().filter(attrib -> ItemFormat
            .getAttId()
            .equals(attrib.getAttid())).collect(Collectors
            .toList()).get(0);

        final ItemRelease.Item.Attriblist.Attrib itemPageLayoutAttr = attribList.stream().filter(attrib ->
            ItemPageLayout
                .getAttId().equals(attrib.getAttid())).collect(Collectors
            .toList()).get(0);

        final ItemRelease.Item.Attriblist.Attrib itemResponseTypeAttr = attribList.stream().filter(attrib ->
            ItemResponseType
                .getAttId().equals(attrib.getAttid())).collect
            (Collectors.toList()).get(0);

        assertThat(itemIdAttr.getVal()).isEqualTo(itemId);
        assertThat(itemAnswerKeyAttr.getVal()).isEqualTo(itemFormat.toUpperCase());
        assertThat(itemFormatAttr.getVal()).isEqualTo(itemFormat.toUpperCase());
        assertThat(itemPageLayoutAttr.getVal()).isEqualTo(pageLayout);
        assertThat(itemResponseTypeAttr.getVal()).isEqualTo(responseType);
    }

    @Test
    public void itShouldCreateNewContent() {
        final ItemRelease.Item.Content content = saaifItemFactory.newContent(LANG_ENU);
        assertThat(content.getLanguage()).isEqualTo(LANG_ENU);
        assertThat(content.getVersion()).isEqualTo(ITEM_RELEASE_VERSION);
        assertThat(content.getStem()).isEqualTo(EMPTY);
    }

    @Test
    public void itShouldCreateNewItemAttributeList() {
        final List<String> values = Lists.newArrayList("itemId", "SA", "8", "PlainText");

        final ItemRelease.Item.Attriblist attriblist = saaifItemFactory.newItemAttributeList("itemId", "sa", "8",
            "PlainText");
        assertThat(attriblist).isNotNull();

        final List<ItemRelease.Item.Attriblist.Attrib> attribs = attriblist.getAttrib();
        assertThat(attribs).hasSize(5);

        final List<String> attIds = Arrays.stream(SaaifItemConstants.ItemAttribute.values()).map(SaaifItemConstants
            .ItemAttribute::getAttId).collect(Collectors.toList());
        final List<String> attNames = Arrays.stream(SaaifItemConstants.ItemAttribute.values()).map(SaaifItemConstants
            .ItemAttribute::getName).collect(Collectors.toList());

        for (ItemRelease.Item.Attriblist.Attrib attrib : attribs) {
            assertThat(attrib.getAttid()).isIn(attIds);
            assertThat(attrib.getName()).isIn(attNames);
            assertThat(attrib.getVal()).isIn(values);
        }
    }

    @Test
    public void itShouldCreateNewAttributeUsingItemAttribute() {
        final ItemRelease.Item.Attriblist.Attrib attrib = saaifItemFactory.newAttribute(ItemId, "val");
        assertThat(attrib.getAttid()).isEqualTo(ItemId.getAttId());
        assertThat(attrib.getName()).isEqualTo(ItemId.getName());
        assertThat(attrib.getVal()).isEqualTo("val");
    }

    @Test
    public void itShouldCreateNewAttribute() {
        final ItemRelease.Item.Attriblist.Attrib attrib = saaifItemFactory.newAttribute("attId", "name", "val");
        assertThat(attrib.getAttid()).isEqualTo("attId");
        assertThat(attrib.getName()).isEqualTo("name");
        assertThat(attrib.getVal()).isEqualTo("val");
    }
}
