/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.saaif.item;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.doReturn;
import static org.opentestsystem.saaif.item.ItemConstants.ItemAttribute.ItemId;
import static org.opentestsystem.saaif.item.ItemConstants.ItemFormat.FORMAT_SHORT_ANSWER;
import static org.opentestsystem.saaif.item.ItemConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.saaif.item.ItemConstants.ItemLanguage.LANG_ESN;
import static org.opentestsystem.saaif.item.ItemConstants.ItemPageLayout.PAGE_LAYOUT_SHORT_ANSWER;
import static org.opentestsystem.saaif.item.ItemConstants.ItemResponseType.RESPONSE_TYPE_HTML_EDITOR;
import static org.opentestsystem.saaif.item.ItemConstants.ItemVersion.ITEM_RELEASE_VERSION;
import static org.opentestsystem.saaif.item.ItemConstants.ItemVersion.ITEM_VERSION;
import static org.opentestsystem.saaif.item.SaaifTestUtil.TEST_ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class ItemFactoryTest {

    private ItemFactory itemFactory;

    private ItemFactory spyItemFactory;

    @Before
    public void setup() {
        itemFactory = new ItemFactory();
        spyItemFactory = Mockito.spy(itemFactory);
    }

    @Test
    public void itShouldCreateNewAssessmentItem() {
        final ItemRelease.Item shortAnswer = itemFactory.newItem(TEST_ITEM_ID, FORMAT_SHORT_ANSWER, LANG_ENU);
        doReturn(shortAnswer).when(spyItemFactory).newItem(TEST_ITEM_ID, FORMAT_SHORT_ANSWER, LANG_ENU);

        final ItemRelease assessmentItem = spyItemFactory.newAssessmentItem(TEST_ITEM_ID, FORMAT_SHORT_ANSWER, LANG_ENU);
        assertThat(assessmentItem.getItem()).isEqualTo(shortAnswer);
        assertThat(assessmentItem.getVersion()).isEqualTo(ITEM_RELEASE_VERSION);
    }

    @Test
    public void itShouldCreateNewItemForShortAnswer() {
        final ItemRelease.Item shortAnswerItem = itemFactory.newShortAnswerItem(TEST_ITEM_ID, LANG_ENU);

        doReturn(shortAnswerItem).when(spyItemFactory).newShortAnswerItem(TEST_ITEM_ID, LANG_ENU);

        final ItemRelease.Item item = spyItemFactory.newItem(TEST_ITEM_ID, FORMAT_SHORT_ANSWER, LANG_ENU);
        assertThat(item).isEqualTo(shortAnswerItem);
    }

    @Test
    public void itShouldCreateNullNewItem() {
        final ItemRelease.Item item = itemFactory.newItem(TEST_ITEM_ID, "not-real", LANG_ENU);
        assertThat(item).isNull();
    }

    @Test
    public void itShouldCreateShortAnswerItem() {
        final ItemRelease.Item.Content content = itemFactory.newContent(LANG_ENU);

        final ItemRelease.Item.Attriblist attriblist = itemFactory.newItemAttributeList(TEST_ITEM_ID,
            FORMAT_SHORT_ANSWER, PAGE_LAYOUT_SHORT_ANSWER, RESPONSE_TYPE_HTML_EDITOR);

        doReturn(attriblist).when(spyItemFactory).newItemAttributeList(TEST_ITEM_ID,
            FORMAT_SHORT_ANSWER, PAGE_LAYOUT_SHORT_ANSWER, RESPONSE_TYPE_HTML_EDITOR);

        doReturn(content).when(spyItemFactory).newContent(LANG_ENU);

        final ItemRelease.Item shortAnswerItem = spyItemFactory.newShortAnswerItem(TEST_ITEM_ID, LANG_ENU);

        assertThat(shortAnswerItem.getId()).isEqualTo(TEST_ITEM_ID);
        assertThat(shortAnswerItem.getFormat()).isEqualTo(FORMAT_SHORT_ANSWER);
        assertThat(shortAnswerItem.getVersion()).isEqualTo(ITEM_VERSION);
        assertThat(shortAnswerItem.getAttriblist()).isEqualTo(attriblist);
        assertThat(shortAnswerItem.getContent()).hasSize(1);
        assertThat(shortAnswerItem.getContent().get(0)).isEqualTo(content);

        final ItemRelease.Item shortAnswerItem2 = spyItemFactory.newShortAnswerItem(TEST_ITEM_ID, LANG_ENU, LANG_ESN);
        assertThat(shortAnswerItem2.getContent()).hasSize(2);
    }

    @Test
    public void itShouldCreateNewContent() {
        final ItemRelease.Item.Content content = itemFactory.newContent(LANG_ENU);
        assertThat(content.getLanguage()).isEqualTo(LANG_ENU);
        assertThat(content.getVersion()).isEqualTo(ITEM_RELEASE_VERSION);
        assertThat(content.getStem()).isEqualTo(EMPTY);
    }

    @Test
    public void itShouldCreateNewItemAttributeList() {
        final List<String> values = Lists.newArrayList("itemId", "SA", "8", "PlainText");

        final ItemRelease.Item.Attriblist attriblist = itemFactory.newItemAttributeList("itemId", "sa", "8", "PlainText");
        assertThat(attriblist).isNotNull();

        final List<ItemRelease.Item.Attriblist.Attrib> attribs = attriblist.getAttrib();
        assertThat(attribs).hasSize(5);

        final List<String> attIds = Arrays.stream(ItemConstants.ItemAttribute.values()).map(ItemConstants
            .ItemAttribute::getAttId).collect(Collectors.toList());
        final List<String> attNames = Arrays.stream(ItemConstants.ItemAttribute.values()).map(ItemConstants
            .ItemAttribute::getName).collect(Collectors.toList());

        for (ItemRelease.Item.Attriblist.Attrib attrib: attribs) {
            assertThat(attrib.getAttid()).isIn(attIds);
            assertThat(attrib.getName()).isIn(attNames);
            assertThat(attrib.getVal()).isIn(values);
        }
    }

    @Test
    public void itShouldCreateNewAttributeUsingItemAttribute() {
        final ItemRelease.Item.Attriblist.Attrib attrib = itemFactory.newAttribute(ItemId, "val");
        assertThat(attrib.getAttid()).isEqualTo(ItemId.getAttId());
        assertThat(attrib.getName()).isEqualTo(ItemId.getName());
        assertThat(attrib.getVal()).isEqualTo("val");
    }

    @Test
    public void itShouldCreateNewAttribute() {
        final ItemRelease.Item.Attriblist.Attrib attrib = itemFactory.newAttribute("attId", "name", "val");
        assertThat(attrib.getAttid()).isEqualTo("attId");
        assertThat(attrib.getName()).isEqualTo("name");
        assertThat(attrib.getVal()).isEqualTo("val");
    }
}
