/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.saaif.item;

import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import static javax.xml.bind.JAXBContext.newInstance;

/**
 * Utilities for use in itShouldCreateSAItemAndUpdateItWithChanges classes.
 */
@SuppressWarnings("unchecked")
public class SaaifTestUtil {

    public static final String TEST_ITEM_ID = "1234";

    public static final boolean WITH_SCHEMA_VALIDATION = true;

    public static final boolean NO_SCHEMA_VALIDATION = false;

    public static final String SCHEMA_FILE = "SAAIF-Item.xsd";

    private static final SchemaFactory SCHEMA_FACTORY = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

    private static Schema schema;

    public static JAXBContext jaxbContext;

    static {
        System.setProperty("javax.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory");
        try {
            schema = SCHEMA_FACTORY.newSchema(fileToSource(SCHEMA_FILE));
            jaxbContext = newInstance(ItemRelease.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static Schema schema() throws Exception {
        return schema;
    }

    public static JAXBContext jaxbContext() throws Exception {
        return jaxbContext;
    }

    public static <T> T unmarshalFile(Class<T> clazz, String file, Unmarshaller unmarshaller) throws Exception {
        return (T) unmarshaller.unmarshal(fileToSource(file));
    }

    public static <T> T unmarshal(Class<T> clazz, String dataString, Unmarshaller unmarshaller) throws Exception {
        return (T) unmarshaller.unmarshal(new StringReader(dataString));
    }

    public static Unmarshaller jsonUnmarshaller(boolean setSchema) throws Exception {
        final Unmarshaller unmarshaller = unmarshaller();
        unmarshaller.setProperty("eclipselink.media-type", "application/json");
        if (setSchema) {
            unmarshaller.setSchema(schema());
        }
        return unmarshaller;
    }

    public static Marshaller jsonMarshaller(boolean setSchema) throws Exception {
        final Marshaller marshaller = marshaller();
        marshaller.setProperty("eclipselink.media-type", "application/json");
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        if (setSchema) {
            marshaller.setSchema(schema());
        }
        return marshaller;
    }

    // --------------------------------

    public static Unmarshaller xmlUnmarshaller(boolean setSchema) throws Exception {
        final Unmarshaller unmarshaller = unmarshaller();
        if (setSchema) {
            unmarshaller.setSchema(schema());
        }
        return unmarshaller;
    }

    public static Marshaller xmlMarshaller(boolean setSchema) throws Exception {
        final Marshaller marshaller = marshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        if (setSchema) {
            marshaller.setSchema(schema());
        }
        return marshaller;
    }

    //    public static ObjectMapper createJaxbObjectMapper() {
//        final ObjectMapper mapper = new ObjectMapper();
//        final TypeFactory typeFactory = TypeFactory.defaultInstance();
//        final AnnotationIntrospector introspector = new JaxbAnnotationIntrospector(typeFactory);
//        // make deserializer use JAXB annotations (only)
//        mapper.getDeserializationConfig().with(introspector);
//        // make serializer use JAXB annotations (only)
//        mapper.getSerializationConfig().with(introspector);
//        return mapper;
//    }
//
//    public static void writeJsonSchemaToStandardOut(
//        final String fullyQualifiedClassName) {
//        final SchemaFactoryWrapper visitor = new SchemaFactoryWrapper();
//        final ObjectMapper mapper = new ObjectMapper();
//        try {
//            mapper.acceptJsonFormatVisitor(mapper.constructType(Class.forName(fullyQualifiedClassName)), visitor);
//            final com.fasterxml.jackson.module.jsonSchema.JsonSchema jsonSchema = visitor.finalSchema();
//            out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonSchema));
//        } catch (ClassNotFoundException cnfEx) {
//            err.println("Unable to find class " + fullyQualifiedClassName);
//        } catch (JsonMappingException jsonEx) {
//            err.println("Unable to map JSON: " + jsonEx);
//        } catch (JsonProcessingException jsonEx) {
//            err.println("Unable to process JSON: " + jsonEx);
//        }
//    }

    // --------------------------------

    public static Unmarshaller unmarshaller() throws Exception {
        final Unmarshaller unmarshaller = jaxbContext().createUnmarshaller();
        return unmarshaller;
    }

    public static Marshaller marshaller() throws Exception {
        final Marshaller marshaller = jaxbContext().createMarshaller();
        return marshaller;
    }

    /**
     * Converts a file to a string.  The file should be on the classpath as this specifically
     * looks for system resource from the <code>ClassLoader</code>.
     *
     * @param file The name of the file to read from the classpath.
     * @return A string representation of the file.
     * @throws Exception
     */
    public static String fileToString(String file) throws Exception {
        return new String(Files.readAllBytes(Paths.get(ClassLoader.getSystemResource(file).toURI())));
    }

    /**
     * Converts a file to a reader.  The file should be on the classpath as this specifically
     * looks for system resource from the <code>ClassLoader</code>.
     *
     * @param file The name of the file to read from the classpath.
     * @return A reader for the classpath file.
     * @throws Exception
     */
    public static StringReader fileToReader(String file) throws Exception {
        return new StringReader(fileToString(file));
    }

    /**
     * Converts a file to a source.  The file should be on the classpath as this specifically
     * looks for system resource from the <code>ClassLoader</code>.
     *
     * @param file The name of the file to read from the classpath.
     * @return A source for the classpath file.
     * @throws Exception
     */
    public static StreamSource fileToSource(String file) throws Exception {
        return new StreamSource(fileToReader(file));
    }
}
