/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.saaif.item;

import org.junit.Before;
import org.junit.Test;

import javax.xml.bind.Marshaller;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.saaif.item.ItemConstants.ItemFormat.FORMAT_SHORT_ANSWER;
import static org.opentestsystem.saaif.item.ItemConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.saaif.item.ItemConstants.ItemVersion.ITEM_RELEASE_VERSION;
import static org.opentestsystem.saaif.item.ItemConstants.ItemVersion.ITEM_VERSION;
import static org.opentestsystem.saaif.item.ItemTestUtil.TEST_ITEM_ID;
import static org.opentestsystem.saaif.item.ItemTestUtil.WITH_SCHEMA_VALIDATION;
import static org.opentestsystem.saaif.item.ItemTestUtil.xmlMarshaller;

public class ItemReleaseTest {

    private static final ItemFactory FACTORY = new ItemFactory();

    private String itemId;

    @Before
    public void setup() {
        itemId = TEST_ITEM_ID;
    }

    @Test
    public void itShouldCreateAndMarshalMinimumShortAnswerToXml() throws Exception {
        // confirm the factory creates the minimum object as expected
        final ItemRelease shortAnswer = FACTORY.newAssessmentItem(itemId, FORMAT_SHORT_ANSWER, LANG_ENU);

        assertThat(shortAnswer).isNotNull();
        assertThat(shortAnswer.getItem()).isNotNull();
        assertThat(shortAnswer.getItem().getId()).isEqualTo(itemId);
        assertThat(shortAnswer.getItem().getContent()).hasSize(1);
        assertThat(shortAnswer.getItem().getAttriblist()).isNotNull();
        assertThat(shortAnswer.getItem().getAttriblist().getAttrib()).hasSize(5);

        final ItemRelease.Item.Content content = shortAnswer.getItem().getContent().get(0);

        assertThat(content.getStem()).isEmpty();

        // confirm the xml is marshaled as expected
        final Marshaller xmlMarshaller = xmlMarshaller(WITH_SCHEMA_VALIDATION);

        final ByteArrayOutputStream os = new ByteArrayOutputStream();
        final PrintStream stream = new PrintStream(os);
        xmlMarshaller.marshal(shortAnswer, stream);

        String xmlString = new String(os.toByteArray(), StandardCharsets.UTF_8);
        assertThat(xmlString).contains(String.format("<item format=\"%s\" id=\"%s\" version=\"%s\">", FORMAT_SHORT_ANSWER, itemId, ITEM_VERSION));
        assertThat(xmlString).contains(String.format("<content language=\"%s\" version=\"%s\">", LANG_ENU, ITEM_RELEASE_VERSION.toString()));
        assertThat(xmlString).contains("<stem><![CDATA[]]></stem>");
    }
}
