/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.model;

import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.ims.util.IMSTestUtil;

import static java.lang.System.out;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemType.TYPE_WER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;

public class ItemTest {

    private IMSTestUtil testUtil;

    private ObjectMapper mapper;

    @Before
    public void setup() {
        testUtil = new IMSTestUtil();
        mapper = new ObjectMapper();
    }

    @Test
    public void itShouldConfirmSaItemsAreEqual() {
        SaItem item1 = SaItem.SaItemBuilder.aSaItem(ITEM_ID).build();
        SaItem item2 = SaItem.SaItemBuilder.aSaItem(ITEM_ID).build();

        assertThat(item1).isEqualTo(item2);
        assertItem(item1, ITEM_ID, TYPE_SA);
        assertItem(item2, ITEM_ID, TYPE_SA);

        List<String> ex1 = Lists.newArrayList("EX1", "EX2");
        List<String> ex2 = Lists.newArrayList("EX1", "EX2");

        item1 = SaItem.SaItemBuilder.aSaItem(ITEM_ID).prompt("prompt").exemplarResponses(ex1)
            .beingCreatedBy("test").beingEditedBy("other-test").build();

        item2 = SaItem.SaItemBuilder.aSaItem(ITEM_ID).prompt("prompt").exemplarResponses(ex2)
            .beingCreatedBy("test").beingEditedBy("other-test").build();

        assertThat(item1).isEqualTo(item2);
        assertThat(item1.getPrompt()).isEqualTo("prompt");
        assertThat(item1.getExemplarResponses()).hasSize(2);

        assertThat(item2.getPrompt()).isEqualTo("prompt");
        assertThat(item2.getExemplarResponses()).hasSize(2);

        item2.getExemplarResponses().remove(1);

        assertThat(item1).isNotEqualTo(item2);
    }

    @Test
    public void itShouldConfirmWerItemsAreEqual() {
        WerItem item1 = WerItem.WerItemBuilder.aWerItem(ITEM_ID).build();
        WerItem item2 = WerItem.WerItemBuilder.aWerItem(ITEM_ID).build();
        assertThat(item1).isEqualTo(item2);
        assertItem(item1, ITEM_ID, TYPE_WER);
        assertItem(item2, ITEM_ID, TYPE_WER);


        List<String> ex1 = Lists.newArrayList("EX1", "EX2");
        List<String> ex2 = Lists.newArrayList("EX1", "EX2");

        item1 = WerItem.WerItemBuilder.aWerItem(ITEM_ID).prompt("prompt").exemplarResponses(ex1)
            .beingCreatedBy("test").beingEditedBy("other-test").build();

        item2 = WerItem.WerItemBuilder.aWerItem(ITEM_ID).prompt("prompt").exemplarResponses(ex2)
            .beingCreatedBy("test").beingEditedBy("other-test").build();

        assertThat(item1).isEqualTo(item2);
        assertThat(item1.getPrompt()).isEqualTo("prompt");
        assertThat(item1.getExemplarResponses()).hasSize(2);

        assertThat(item2.getPrompt()).isEqualTo("prompt");
        assertThat(item2.getExemplarResponses()).hasSize(2);

        item2.getExemplarResponses().remove(1);

        assertThat(item1).isNotEqualTo(item2);
    }

    @Test
    public void itShouldCreateShortAnswerItem() throws JsonProcessingException {
        final Item expectedItem = testUtil.newSaItem();
        out.println(mapper.writeValueAsString(expectedItem));
    }

    private void assertItem(Item item, String itemId, String itemType) {
        assertThat(item.getId()).isEqualTo(itemId);
        assertThat(item.getType()).isEqualTo(itemType);
    }
}
