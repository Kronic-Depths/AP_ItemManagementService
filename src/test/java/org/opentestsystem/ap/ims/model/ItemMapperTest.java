/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.model;

import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.xml.bind.JAXBElement;

import org.assertj.core.util.Lists;
import org.gitlab4j.api.models.Commit;
import org.junit.Test;
import org.opentestsystem.saaif.item.ItemRelease;
import org.opentestsystem.saaif.item.ObjectFactory;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.model.ItemConstants.EXEMPLAR_PURPOSE;
import static org.opentestsystem.ap.ims.model.ItemConstants.EXEMPLAR_RESPONSE;
import static org.opentestsystem.ap.ims.model.ItemConstants.EXEMPLAR_SCOREPOINT;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemAnswerKey;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemFormat;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemId;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemPageLayout;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemResponseType;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemLanguage.LANG_ESN;

public class ItemMapperTest {

    private final ObjectFactory OBJECT_FACTORY = new ObjectFactory();


    @Test
    public void itShouldMapToEntityItemHistory() {
        final String committerEmail = "test@fake.com";
        final String committerName = "John Doe";
        final Date committedDate = new Date();
        final String message = "this is a commit message";
        final String historyId = "123";
        final String parentHistoryId = "987";

        final Commit mockCommit = mock(Commit.class);

        when(mockCommit.getCommitterName()).thenReturn(committerName);
        when(mockCommit.getCommitterEmail()).thenReturn(committerEmail);
        when(mockCommit.getCommittedDate()).thenReturn(committedDate);
        when(mockCommit.getId()).thenReturn(historyId);
        when(mockCommit.getParentIds()).thenReturn(Lists.newArrayList(parentHistoryId));

        when(mockCommit.getMessage()).thenReturn(message);

        final ItemHistory itemHistory = ItemMapper.mapToEntityItemHistory(mockCommit);

        assertThat(itemHistory.getChangedBy()).isEqualTo(committerName);
        assertThat(itemHistory.getChangedByEmail()).isEqualTo(committerEmail);
        assertThat(itemHistory.getMessage()).isEqualTo(message);
        assertThat(itemHistory.getChangedOn()).isEqualTo(committedDate);
        assertThat(itemHistory.getHistoryId()).isEqualTo(historyId);
        assertThat(itemHistory.getParentHistoryId()).isEqualTo(parentHistoryId);

    }

    @Test
    public void itShouldNewSaaifItemAttributeList() {
        final ItemRelease.Item.Attriblist attriblist = ItemMapper.newSaaifItemAttributeList("id", "format", "page",
            "response");

        assertThat(attriblist.getAttrib()).hasSize(5);

        assertNewItemAttributeList(attriblist.getAttrib(), "id", "format", "page", "response");
    }


    private void assertNewItemAttributeList(final List<ItemRelease.Item.Attriblist.Attrib> attribList,
                                            final String itemId,
                                            final String itemFormat,
                                            final String pageLayout,
                                            final String responseType) {

        final ItemRelease.Item.Attriblist.Attrib itemIdAttr = attribList.stream().filter(attrib -> ItemId.getAttId()
            .equals(attrib.getAttid())).collect(Collectors.toList()
        ).get(0);

        final ItemRelease.Item.Attriblist.Attrib itemAnswerKeyAttr = attribList.stream().filter(attrib -> ItemAnswerKey
            .getAttId().equals(attrib.getAttid())).collect(Collectors
            .toList()).get(0);

        final ItemRelease.Item.Attriblist.Attrib itemFormatAttr = attribList.stream().filter(attrib -> ItemFormat
            .getAttId()
            .equals(attrib.getAttid())).collect(Collectors
            .toList()).get(0);

        final ItemRelease.Item.Attriblist.Attrib itemPageLayoutAttr = attribList.stream().filter(attrib ->
            ItemPageLayout
                .getAttId().equals(attrib.getAttid())).collect(Collectors
            .toList()).get(0);

        final ItemRelease.Item.Attriblist.Attrib itemResponseTypeAttr = attribList.stream().filter(attrib ->
            ItemResponseType
                .getAttId().equals(attrib.getAttid())).collect
            (Collectors.toList()).get(0);

        assertThat(itemIdAttr.getVal()).isEqualTo(itemId);
        assertThat(itemAnswerKeyAttr.getVal()).isEqualTo(itemFormat.toUpperCase());
        assertThat(itemFormatAttr.getVal()).isEqualTo(itemFormat.toUpperCase());
        assertThat(itemPageLayoutAttr.getVal()).isEqualTo(pageLayout);
        assertThat(itemResponseTypeAttr.getVal()).isEqualTo(responseType);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldNewSaaifAttributeUsingEnum() {
        final ItemRelease.Item.Attriblist.Attrib attrib = ItemMapper.newSaaifAttribute(ItemId, "val");
        assertThat(attrib.getAttid()).isEqualTo(ItemId.getAttId());
        assertThat(attrib.getName()).isEqualTo(ItemId.getName());
        assertThat(attrib.getVal()).isEqualTo("val");
        assertThat(attrib.getDesc()).isEqualTo(EMPTY);
    }

    @Test
    public void itShouldNewSaaifAttribute() {
        final ItemRelease.Item.Attriblist.Attrib attrib = ItemMapper.newSaaifAttribute("id", "name", "val");
        assertThat(attrib.getAttid()).isEqualTo("id");
        assertThat(attrib.getName()).isEqualTo("name");
        assertThat(attrib.getVal()).isEqualTo("val");
        assertThat(attrib.getDesc()).isEqualTo(EMPTY);
    }

    @Test
    public void itShouldFindEnglishContent() {
        final ItemRelease.Item.Content englishContent = OBJECT_FACTORY.createItemreleaseItemContent();
        englishContent.setLanguage(LANG_ENU);

        final ItemRelease.Item.Content spanishContent = OBJECT_FACTORY.createItemreleaseItemContent();
        spanishContent.setLanguage(LANG_ESN);

        final ItemRelease.Item item = OBJECT_FACTORY.createItemreleaseItem();

        item.getContent().add(spanishContent);
        item.getContent().add(englishContent);

        final ItemRelease.Item.Content actualContent = ItemMapper.findEnglishContent(item);

        assertThat(actualContent).isEqualTo(englishContent);

    }

    @Test
    public void itShouldfindExemplarResponsesByContent() {
        final ItemRelease.Item.Content content = OBJECT_FACTORY.createItemreleaseItemContent();
        final List<String> expected = Lists.newArrayList("ex1", "ex2");
        ItemMapper.mapToSaaifExemplarResponses(expected, content);

        final List<String> actual = ItemMapper.findExemplarResponses(content);

        assertThat(actual).hasSize(2);
        assertThat(actual).contains("ex1", "ex2");
    }

    @Test
    public void itShouldFindExemplarResponsesByRubricList() {
        final ItemRelease.Item.Content content = OBJECT_FACTORY.createItemreleaseItemContent();
        final List<String> expected = Lists.newArrayList("ex1", "ex2");
        ItemMapper.mapToSaaifExemplarResponses(expected, content);

        final List<String> actual = ItemMapper.findExemplarResponses(content.getRubriclist().getContent());

        assertThat(actual).hasSize(2);
        assertThat(actual).contains("ex1", "ex2");


        final List<String> emptyList = ItemMapper.findExemplarResponses(Collections.emptyList());
        assertThat(emptyList).hasSize(0);
    }

    @Test
    public void itShouldmapToSaaifExemplarResponses() {
        final ItemRelease.Item.Content content = OBJECT_FACTORY.createItemreleaseItemContent();
        final List<String> exemplarResponses = Lists.newArrayList("ex1", "ex2");
        ItemMapper.mapToSaaifExemplarResponses(exemplarResponses, content);
        assertThat(content.getRubriclist()).isNotNull();
    }

    @Test
    public void itShouldMapExemplarResponses() {
        final List<String> exemplarResponses = Lists.newArrayList("ex1", "ex2");
        final ItemRelease.Item.Content.Rubriclist rubriclist = ItemMapper.mapExemplarResponses(exemplarResponses);

        assertThat(rubriclist.getContent()).hasSize(2);

        final JAXBElement rubricEle = (JAXBElement) rubriclist.getContent().get(0);

        final ItemRelease.Item.Content.Rubriclist.Rubric rubric = (ItemRelease.Item.Content.Rubriclist.Rubric)
            rubricEle.getValue();

        assertThat(rubric.getIndex()).isEqualTo(0);
        assertThat(rubric.getScorepoint()).isEqualTo(EXEMPLAR_SCOREPOINT);
        assertThat(rubric.getName()).isEqualTo(EXEMPLAR_RESPONSE);
        assertThat(rubric.getVal()).isEqualTo(EMPTY);

        final JAXBElement samplelistEle = (JAXBElement) rubriclist.getContent().get(1);

        ItemRelease.Item.Content.Rubriclist.Samplelist samplelist = (ItemRelease.Item.Content.Rubriclist.Samplelist) samplelistEle.getValue();

        assertThat(samplelist.getIndex()).isEqualTo(0);
        assertThat(samplelist.getMinval()).isEqualTo(toByte(EXEMPLAR_SCOREPOINT));
        assertThat(samplelist.getMaxval()).isEqualTo(toByte(EXEMPLAR_SCOREPOINT));

        assertThat(samplelist.getSample()).hasSize(2);

        final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample sample1 = samplelist.getSample().get(0);
        final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample sample2 = samplelist.getSample().get(1);

        assertThat(sample1.getName()).isEqualTo(EXEMPLAR_PURPOSE + "0");
        assertThat(sample1.getPurpose()).isEqualTo(EXEMPLAR_PURPOSE);
        assertThat(sample1.getSamplecontent()).isEqualTo("ex1");
        assertThat(sample1.getScorepoint()).isEqualTo(toByte(EXEMPLAR_SCOREPOINT));

        assertThat(sample2.getName()).isEqualTo(EXEMPLAR_PURPOSE + "1");
        assertThat(sample2.getPurpose()).isEqualTo(EXEMPLAR_PURPOSE);
        assertThat(sample2.getSamplecontent()).isEqualTo("ex2");
        assertThat(sample2.getScorepoint()).isEqualTo(toByte(EXEMPLAR_SCOREPOINT));
    }

    @Test
    public void itShouldMapToSaaifRubric() {
        final ItemRelease.Item.Content.Rubriclist.Rubric rubric = ItemMapper.mapToSaaifRubric(4, "name", "val", "3");

        assertThat(rubric.getIndex()).isEqualTo(4);
        assertThat(rubric.getName()).isEqualTo("name");
        assertThat(rubric.getVal()).isEqualTo("val");
        assertThat(rubric.getScorepoint()).isEqualTo("3");
    }

    @Test
    public void itShouldMapToSaaifSamplelist() {
        final ItemRelease.Item.Content.Rubriclist.Samplelist samplelist = ItemMapper.mapToSaaifSamplelist(1, "3");
        assertThat(samplelist.getIndex()).isEqualTo(1);
        assertThat(samplelist.getMinval()).isEqualTo(toByte("3"));
        assertThat(samplelist.getMaxval()).isEqualTo(toByte("3"));
    }

    @Test
    public void itShouldMapToSaaifSample() {
        final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample sample = ItemMapper.mapToSaaifSample("name",
            "purpose", "content", "4");
        assertThat(sample.getName()).isEqualTo("name");
        assertThat(sample.getPurpose()).isEqualTo("purpose");
        assertThat(sample.getSamplecontent()).isEqualTo("content");
        assertThat(sample.getScorepoint()).isEqualTo(toByte("4"));
    }

    private Byte toByte(final String val) {
        return val != null ? Byte.valueOf(val) : null;
    }
}
