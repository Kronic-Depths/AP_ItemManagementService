/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.rest.v1;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.ims.rest.CreateNewItemRequest;
import org.opentestsystem.ap.ims.rest.ItemRequestWrapper;
import org.opentestsystem.ap.ims.service.ItemService;
import org.opentestsystem.ap.ims.util.IMSTestUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.mock.http.MockHttpOutputMessage;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertNotNull;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.ims.rest.ItemRequestWrapper.ItemRequestWrapperBuilder.aItemRequestWrapper;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.COMMIT_MESSAGE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ActiveProfiles(value = "it-test")
@RunWith(SpringRunner.class)
@WebMvcTest(ItemApi.class)
public class ItemApiIT {

    private final String API_BASE_PATH = "/api/v1/items/";

    private final MediaType contentType = new MediaType(MediaType.APPLICATION_JSON.getType(),
        MediaType.APPLICATION_JSON.getSubtype(), Charset.forName("utf8"));

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ItemService itemService;

    private HttpMessageConverter mappingJackson2HttpMessageConverter;

    private IMSTestUtil testUtil = new IMSTestUtil();

    @Autowired
    void setConverters(HttpMessageConverter<?>[] converters) {
        this.mappingJackson2HttpMessageConverter = Arrays.asList(converters).stream()
            .filter(hmc -> hmc instanceof MappingJackson2HttpMessageConverter)
            .findAny()
            .orElse(null);

        assertNotNull("the JSON message converter must not be null",
            this.mappingJackson2HttpMessageConverter);
    }

    // ------------------------------------------------------------------------

    @Test
    public void isShouldGetItem() throws Exception {
        final Item expectedItem = testUtil.newSaItem();
        expectedItem.setBeingCreatedBy(ITEM_BANK_USER.getUsername());

        given(itemService.findItem(ITEM_ID)).willReturn(expectedItem);

        mvc.perform(get(API_BASE_PATH + ITEM_ID).contentType(contentType))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.id", is(ITEM_ID)))
            .andExpect(jsonPath("$.type", is(TYPE_SA)))
            .andExpect(jsonPath("$.beingCreatedBy", is(ITEM_BANK_USER.getUsername())));

        verify(itemService, times(1)).findItem(ITEM_ID);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldCreateNewItem() throws Exception {
        final String type = TYPE_SA;

        final CreateNewItemRequest newItemRequest = new CreateNewItemRequest();
        newItemRequest.setType(type);

        final Item expectedItem = testUtil.newSaItem();
        expectedItem.setBeingCreatedBy(ITEM_BANK_USER.getUsername());

        given(itemService.createNewItem(type)).willReturn(expectedItem);

        mvc.perform(post(API_BASE_PATH + "/begin")
            .contentType(contentType)
            .content(json(newItemRequest)))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.id", is(ITEM_ID)))
            .andExpect(jsonPath("$.type", is(type)))
            .andExpect(jsonPath("$.beingCreatedBy", is(ITEM_BANK_USER.getUsername())));

        verify(itemService, times(1)).createNewItem(type);
    }

    @Test
    public void itShouldSaveNewItem() throws Exception {
        final Item itemToSave = testUtil.newSaItem();

        mvc.perform(post(API_BASE_PATH + ITEM_ID + "/save")
            .contentType(contentType)
            .content(json(itemToSave)))
            .andExpect(status().isOk());

        verify(itemService, times(1)).saveItem(ITEM_ID, itemToSave);
    }

    @Test
    public void itShouldCommitNewItem() throws Exception {
        final Item itemToCommit = testUtil.newSaItem();

        final ItemRequestWrapper itemRequestWrapper = aItemRequestWrapper().message(COMMIT_MESSAGE).item(itemToCommit)
            .build();

        mvc.perform(post(API_BASE_PATH + ITEM_ID + "/commit")
            .contentType(contentType)
            .content(json(itemRequestWrapper)))
            .andExpect(status().isOk());

        verify(itemService, times(1)).saveItem(ITEM_ID, itemToCommit);
        verify(itemService, times(1)).commitNewItem(ITEM_ID);
    }

    @Test
    public void itShouldDeleteNewItem() throws Exception {
        mvc.perform(post(API_BASE_PATH + ITEM_ID + "/rollback")
            .contentType(contentType))
            .andExpect(status().isOk());

        verify(itemService, times(1)).deleteNewItem(ITEM_ID);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldBeginItemEdit() {

    }

    @Test
    public void itShouldSaveItemEdit() throws Exception {
        final Item itemEditToSave = testUtil.newSaItem();

        mvc.perform(put(API_BASE_PATH + ITEM_ID + "/save")
            .contentType(contentType)
            .content(this.json(itemEditToSave)))
            .andExpect(status().isOk());

        verify(itemService, times(1)).saveItem(ITEM_ID, itemEditToSave);
    }

    @Test
    public void itShouldCommitItemEdit() throws Exception {
        final Item itemEditToCommit = testUtil.newSaItem();

        final ItemRequestWrapper itemRequestWrapper = aItemRequestWrapper().message(COMMIT_MESSAGE).item(itemEditToCommit)
            .build();

        mvc.perform(put(API_BASE_PATH + ITEM_ID + "/commit")
            .contentType(contentType)
            .content(json(itemRequestWrapper)))
            .andExpect(status().isOk());

        verify(itemService, times(1)).commitItem(ITEM_ID, itemEditToCommit, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldRollbackEditChanges() throws Exception {
        mvc.perform(put(API_BASE_PATH + ITEM_ID + "/rollback")
            .contentType(contentType))
            .andExpect(status().isOk());

        verify(itemService, times(1)).rollbackItem(ITEM_ID);
    }


    // ------------------------------------------------------------------------

    protected String json(Object o) throws IOException {
        MockHttpOutputMessage mockHttpOutputMessage = new MockHttpOutputMessage();
        this.mappingJackson2HttpMessageConverter.write(o, MediaType.APPLICATION_JSON, mockHttpOutputMessage);
        return mockHttpOutputMessage.getBodyAsString();
    }

}
