/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.rest.v1;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.service.ItemBankService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.mock.http.MockHttpOutputMessage;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertNotNull;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemFormat.FORMAT_SHORT_ANSWER;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ActiveProfiles(value = "it-itShouldCreateSAItemAndUpdateItWithChanges")
@RunWith(SpringRunner.class)
@WebMvcTest(ItemApi.class)
public class ItemApiIT {

    private final String API_BASE_PATH = "/api/v1/items/";

    private final MediaType contentType = new MediaType(MediaType.APPLICATION_JSON.getType(),
        MediaType.APPLICATION_JSON.getSubtype(), Charset.forName("utf8"));

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ItemBankService itemBankService;

    private HttpMessageConverter mappingJackson2HttpMessageConverter;

    @Autowired
    void setConverters(HttpMessageConverter<?>[] converters) {
        this.mappingJackson2HttpMessageConverter = Arrays.asList(converters).stream()
            .filter(hmc -> hmc instanceof MappingJackson2HttpMessageConverter)
            .findAny()
            .orElse(null);

        assertNotNull("the JSON message converter must not be null",
            this.mappingJackson2HttpMessageConverter);
    }

    @Test
    public void itShouldDeleteItemChanges() throws Exception {
        mvc.perform(delete(API_BASE_PATH + ITEM_ID)
            .contentType(contentType))
            .andExpect(status().isOk());

        verify(itemBankService, times(1)).deleteItem(ITEM_ID);
    }

    @Test
    public void itShouldCommitItemChanges() throws Exception {
        mvc.perform(put(API_BASE_PATH + ITEM_ID + "/commit")
            .contentType(contentType))
            .andExpect(status().isOk());

        verify(itemBankService, times(1)).commitItemChanges(ITEM_ID);
    }

    @Test
    public void itShouldCreateItem() throws Exception {
        final Item newItemRequest = Item.ItemBuilder.anItem().type(FORMAT_SHORT_ANSWER).build();

        given(itemBankService.createItem(newItemRequest)).willReturn(ITEM_ID);

        mvc.perform(post(API_BASE_PATH)
            .contentType(contentType)
            .content(this.json(newItemRequest)))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.id", is(ITEM_ID)))
            .andExpect(jsonPath("$.type", is("sa")));

        verify(itemBankService, times(1)).createItem(newItemRequest);
    }

    @Test
    public void itShouldUpdateItem() throws Exception {
        final Item itemToUpdate = Item.ItemBuilder.anItem().type(FORMAT_SHORT_ANSWER).build();

        mvc.perform(put(API_BASE_PATH + ITEM_ID)
            .contentType(contentType)
            .content(this.json(itemToUpdate)))
            .andExpect(status().isOk());

        verify(itemBankService, times(1)).updateItem(ITEM_ID, itemToUpdate);
    }

    protected String json(Object o) throws IOException {
        MockHttpOutputMessage mockHttpOutputMessage = new MockHttpOutputMessage();
        this.mappingJackson2HttpMessageConverter.write(o, MediaType.APPLICATION_JSON, mockHttpOutputMessage);
        return mockHttpOutputMessage.getBodyAsString();
    }

}
