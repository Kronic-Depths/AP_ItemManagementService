/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.config;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.saaif.item.ItemFactory;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemBankConfigTest {

    @Mock
    private ItemBankProperties mockItemBankProperties;

    private ItemBankConfig itemBankConfig;

    @Before
    public void setup() {
        itemBankConfig = new ItemBankConfig(mockItemBankProperties);

    }

    @Test
    public void itShouldCreateGitlabSession() {
        when(mockItemBankProperties.getHost()).thenReturn("https://localhost:8080");
        when(mockItemBankProperties.getUser()).thenReturn("user");
        when(mockItemBankProperties.getPassword()).thenReturn("password");

        try {
            itemBankConfig.gitlabSession();
        } catch (IOException e) {
            // expected, connection properties are not valid
        }

        verify(mockItemBankProperties, times(1)).getHost();
        verify(mockItemBankProperties, times(1)).getUser();
        verify(mockItemBankProperties, times(1)).getPassword();
    }

    @Test
    public void itShouldCreateItemIdGenerator() {
        when(mockItemBankProperties.getIdMinValue()).thenReturn(1);
        when(mockItemBankProperties.getIdMaxValue()).thenReturn(10);

        final ItemIdGenerator itemIdGenerator = itemBankConfig.itemIdGenerator();
        assertThat(itemIdGenerator).isNotNull();
        assertThat(itemIdGenerator.getMinValue()).isEqualTo(1);
        assertThat(itemIdGenerator.getMaxValue()).isEqualTo(10);
    }

    @Test
    public void itShouldCreateItemFactory() {
        final ItemFactory itemFactory = itemBankConfig.itemFactory();
        assertThat(itemFactory).isNotNull();
    }
}
