/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.repository;

import java.io.IOException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.client.GitClientFactory;
import org.opentestsystem.ap.ims.client.GitlabClient;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.util.IMSTestUtil;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.ap.ims.util.ItemMapper;
import org.opentestsystem.ap.ims.util.ResourceNotFoundException;
import org.opentestsystem.ap.ims.util.ValidationException;
import org.opentestsystem.saaif.item.ItemRelease;
import org.opentestsystem.saaif.item.SaaifItemFactory;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_FACTORY;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemFormat.FORMAT_SHORT_ANSWER;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemLanguage.LANG_ENU;

@RunWith(MockitoJUnitRunner.class)
public class ItemRepositoryTest {

    private final IMSTestUtil testUtil = new IMSTestUtil();

    @Mock
    private ItemIdGenerator mockItemIdGenerator;

    @Mock
    private GitlabClient mockGitlabClient;

    @Mock
    private GitClient mockGitClient;

    @Mock
    private GitClientFactory mockGitClientFactory;

    @Mock
    private ItemRepositoryFactory mockItemRepositoryFactory;

    @Mock
    private SaaifItemFactory mockSaaifItemFactory;

    @Mock
    private ItemMapper mockItemMapper;

    private ItemRepository repository;

    private ItemRepository spyRepository;

    @Before
    public void setup() throws IOException {
        when(mockItemRepositoryFactory.getGitClientFactory()).thenReturn(mockGitClientFactory);
        when(mockItemRepositoryFactory.getGitlabClient()).thenReturn(mockGitlabClient);
        when(mockItemRepositoryFactory.getSaaifItemFactory()).thenReturn(mockSaaifItemFactory);
        when(mockItemRepositoryFactory.getItemIdGenerator()).thenReturn(mockItemIdGenerator);
        when(mockItemRepositoryFactory.getItemMapper()).thenReturn(mockItemMapper);

        when(mockItemIdGenerator.generateItemId()).thenReturn(ITEM_ID);

        when(mockGitClientFactory.cloneRemoteRepository(ITEM_BANK_USER, ITEM_ID)).thenReturn(mockGitClient);
        when(mockGitClientFactory.openRepository(ITEM_BANK_USER, ITEM_ID)).thenReturn(mockGitClient);

        repository = new ItemRepository(mockItemRepositoryFactory);

        spyRepository = spy(repository);
    }

    @Test
    public void itShouldRollbackItemChanges() {
        repository.rollbackItemChanges(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitClient, times(1)).checkoutMasterBranch();
        verify(mockGitClient, times(1)).deleteScratchPad();
    }

    @Test
    public void itShouldUpdateItemWhenScratchPadOwnerIsUserMakingUpdateRequest() {
        final Item expectedItem = testUtil.newItem(ITEM_ID, FORMAT_SHORT_ANSWER);
        expectedItem.setBeingCreatedBy(null);
        expectedItem.setBeingEditedBy(null);

        final ItemRelease saaifITem = ITEM_FACTORY.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER,
            LANG_ENU);

        doNothing().when(spyRepository).initializeItemForEdit(ITEM_BANK_USER, ITEM_ID);
        when(mockGitClient.findScratchPadOwner()).thenReturn(ITEM_BANK_USER.getUsername());
        when(mockItemMapper.mapToSaaifAssesmentItem(expectedItem)).thenReturn(saaifITem);

        spyRepository.updateItem(ITEM_BANK_USER, expectedItem);

        verify(mockGitClientFactory, times(1)).openRepository(ITEM_BANK_USER, ITEM_ID);
        verify(mockItemMapper, times(1)).mapToSaaifAssesmentItem(expectedItem);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenUpdatingItemAndScratchPadOwnerIsNull() {
        final Item expectedItem = testUtil.newItem(ITEM_ID, FORMAT_SHORT_ANSWER);
        expectedItem.setBeingCreatedBy(null);
        expectedItem.setBeingEditedBy(null);

        final ItemRelease saaifITem = ITEM_FACTORY.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER,
            LANG_ENU);

        doNothing().when(spyRepository).initializeItemForEdit(ITEM_BANK_USER, ITEM_ID);
        when(mockGitClient.findScratchPadOwner()).thenReturn(null);
        when(mockItemMapper.mapToSaaifAssesmentItem(expectedItem)).thenReturn(saaifITem);

        spyRepository.updateItem(ITEM_BANK_USER, expectedItem);
    }

    @Test
    public void itShouldInitializeItemForEdit() {
        repository.initializeItemForEdit(ITEM_BANK_USER, ITEM_ID);

        InOrder inOrder = inOrder(mockGitClientFactory, mockGitClient);

        inOrder.verify(mockGitClientFactory, times(1)).openRepository(ITEM_BANK_USER, ITEM_ID);
        inOrder.verify(mockGitClient, times(1)).checkoutMasterBranch();
        inOrder.verify(mockGitClient, times(1)).pullLatest();
        inOrder.verify(mockGitClient, times(1)).createScratchPad();
        inOrder.verify(mockGitClient, times(1)).stageItemFile();
        inOrder.verify(mockGitClient, times(1)).commit("initialize scratch pad for editing");
        inOrder.verify(mockGitClient, times(1)).push();

        verifyNoMoreInteractions(mockGitClient);
    }

    @Test
    public void itShouldDeleteItem() {
        repository.deleteItem(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitlabClient, times(1)).deleteProject(ITEM_ID);
    }

    @Test
    public void itShouldCommitItemChanges() {
        final InOrder inOrder = Mockito.inOrder(mockGitClient);

        repository.commitItemChanges(ITEM_BANK_USER, ITEM_ID);

        inOrder.verify(mockGitClient).checkoutMasterBranch();
        inOrder.verify(mockGitClient).pullLatest();
        inOrder.verify(mockGitClient).mergeScratchPad();
        inOrder.verify(mockGitClient).push();
        inOrder.verify(mockGitClient).deleteScratchPad();
    }

    @Test(expected = ResourceNotFoundException.class)
    public void itShouldThrowWhenFindingItem() {
        final Item expectedItem = testUtil.newItem(ITEM_ID, FORMAT_SHORT_ANSWER);
        expectedItem.setBeingCreatedBy(null);
        expectedItem.setBeingEditedBy(null);

        final ItemRelease saaifITem = ITEM_FACTORY.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER,
            LANG_ENU);

        // make scrach pad owner the same as the user making request
        final String scratchPadOwner = "some-other-user@fake.com";

        when(mockGitClient.findScratchPadOwner()).thenReturn(scratchPadOwner);
        // the item is in edit mode
        when(mockGitClient.doesItemFileExistOnMaster()).thenReturn(false);

        final Item actualItem = repository.findItem(ITEM_BANK_USER, ITEM_ID);
    }

    @Test
    public void itShouldFindItemAndCheckoutMaster() {
        final Item expectedItem = testUtil.newItem(ITEM_ID, FORMAT_SHORT_ANSWER);
        expectedItem.setBeingCreatedBy(null);
        expectedItem.setBeingEditedBy(null);

        final ItemRelease saaifITem = ITEM_FACTORY.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER,
            LANG_ENU);

        // make scrach pad owner the same as the user making request
        final String scratchPadOwner = "some-other-user@fake.com";

        when(mockGitClient.findScratchPadOwner()).thenReturn(scratchPadOwner);
        // the item is in edit mode
        when(mockGitClient.doesItemFileExistOnMaster()).thenReturn(true);
        when(mockGitClient.readItemFile()).thenReturn(saaifITem);
        when(mockItemMapper.mapToEntityItem(saaifITem.getItem())).thenReturn(expectedItem);

        final Item actualItem = repository.findItem(ITEM_BANK_USER, ITEM_ID);

        verify(mockGitClientFactory, times(1)).openRepository(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitClient, times(1)).checkoutMasterBranch();
        assertThat(actualItem.getBeingCreatedBy()).isNull();
        assertThat(actualItem.getBeingEditedBy()).isEqualTo(scratchPadOwner);
    }

    @Test
    public void itShouldFindItemAndSetBeingEditedBy() {
        final Item expectedItem = testUtil.newItem(ITEM_ID, FORMAT_SHORT_ANSWER);
        expectedItem.setBeingCreatedBy(null);
        expectedItem.setBeingEditedBy(null);

        final ItemRelease saaifITem = ITEM_FACTORY.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER,
            LANG_ENU);

        // make scrach pad owner the same as the user making request
        final String scratchPadOwner = ITEM_BANK_USER.getUsername();

        when(mockGitClient.findScratchPadOwner()).thenReturn(scratchPadOwner);
        // the item is in edit mode
        when(mockGitClient.doesItemFileExistOnMaster()).thenReturn(true);
        when(mockGitClient.readItemFile()).thenReturn(saaifITem);
        when(mockItemMapper.mapToEntityItem(saaifITem.getItem())).thenReturn(expectedItem);

        final Item actualItem = repository.findItem(ITEM_BANK_USER, ITEM_ID);

        verify(mockGitClientFactory, times(1)).openRepository(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitClient, times(1)).readItemFile();
        verify(mockGitClient, times(1)).checkoutScratchPad();
        verify(mockGitClient, times(1)).pullLatest();
        assertThat(actualItem.getBeingCreatedBy()).isNull();
        assertThat(actualItem.getBeingEditedBy()).isEqualTo(ITEM_BANK_USER.getUsername());
    }

    @Test
    public void itShouldFindItemAndSetBeingCreatedBy() {
        final Item expectedItem = testUtil.newItem(ITEM_ID, FORMAT_SHORT_ANSWER);
        expectedItem.setBeingCreatedBy(null);
        expectedItem.setBeingEditedBy(null);

        final ItemRelease saaifITem = ITEM_FACTORY.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER,
            LANG_ENU);

        // make scrach pad owner the same as the user making request
        final String scratchPadOwner = ITEM_BANK_USER.getUsername();

        when(mockGitClient.findScratchPadOwner()).thenReturn(scratchPadOwner);
        // the item is in edit mode
        when(mockGitClient.doesItemFileExistOnMaster()).thenReturn(false);
        when(mockGitClient.readItemFile()).thenReturn(saaifITem);
        when(mockItemMapper.mapToEntityItem(saaifITem.getItem())).thenReturn(expectedItem);

        final Item actualItem = repository.findItem(ITEM_BANK_USER, ITEM_ID);

        verify(mockGitClientFactory, times(1)).openRepository(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitClient, times(1)).readItemFile();
        verify(mockGitClient, times(1)).checkoutScratchPad();
        verify(mockGitClient, times(1)).pullLatest();
        assertThat(actualItem.getBeingEditedBy()).isNull();
        assertThat(actualItem.getBeingCreatedBy()).isEqualTo(ITEM_BANK_USER.getUsername());
    }

    @Test
    public void itShouldInitializeItemType() {
        final Item expectedItem = testUtil.newItem(ITEM_ID, FORMAT_SHORT_ANSWER);
        final ItemRelease saaifItem = ITEM_FACTORY.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER);

        when(mockSaaifItemFactory.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER, LANG_ENU)).thenReturn(saaifItem);
        when(mockGitClientFactory.openRepository(ITEM_BANK_USER, ITEM_ID)).thenReturn(mockGitClient);

        when(mockItemMapper.mapToEntityItem(saaifItem.getItem())).thenReturn(expectedItem);

        final Item actualItem = spyRepository.initializeItemType(ITEM_BANK_USER, ITEM_ID, FORMAT_SHORT_ANSWER);

        assertThat(actualItem.getBeingCreatedBy()).isEqualTo(ITEM_BANK_USER.getUsername());
        assertThat(actualItem.getBeingEditedBy()).isNull();

        verify(mockGitClient, times(1)).createScratchPad();
        verify(mockGitClient, times(1)).writeItemFile(saaifItem);
        verify(mockGitClient, times(1)).stageItemFile();
        verify(mockGitClient, times(1)).commit(anyString());
        verify(mockGitClient, times(1)).push();
    }

    @Test
    public void itShouldInitializeNewItem() throws IOException {
        final String actualItemId = repository.initializeNewItem(ITEM_BANK_USER);

        assertThat(actualItemId).isEqualTo(ITEM_ID);

        verify(mockItemIdGenerator, times(1)).generateItemId();
        verify(mockGitlabClient, times(1)).createProject(ITEM_ID);
        verify(mockGitClientFactory, times(1)).cloneRemoteRepository(ITEM_BANK_USER, ITEM_ID);
    }
}
