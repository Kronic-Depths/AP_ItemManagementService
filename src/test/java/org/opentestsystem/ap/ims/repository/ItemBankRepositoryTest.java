/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.repository;

import org.gitlab.api.GitlabAPI;
import org.gitlab.api.models.GitlabGroup;
import org.gitlab.api.models.GitlabSession;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.client.GitClientFactory;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.util.ItemBankTestUtil;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.ap.ims.util.SystemException;
import org.opentestsystem.saaif.item.ItemRelease;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.util.ItemBankTestUtil.GROUP_ID;
import static org.opentestsystem.ap.ims.util.ItemBankTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.ItemBankTestUtil.ITEM_FACTORY;
import static org.opentestsystem.ap.ims.util.ItemBankTestUtil.ITEM_ID;
import static org.opentestsystem.saaif.item.ItemConstants.ItemFormat.FORMAT_SHORT_ANSWER;

@RunWith(MockitoJUnitRunner.class)
public class ItemBankRepositoryTest {

    private static final ItemBankTestUtil TEST_UTIL = new ItemBankTestUtil();

    @Mock
    private ItemIdGenerator mockItemIdGenerator;

    @Mock
    private GitlabSession mockGitLabSession;

    @Mock
    private GitlabAPI mockGitlabApi;

    @Mock
    private GitClient mockGitClient;

    @Mock
    private GitlabGroup mockGroup;

    @Mock
    private GitClientFactory mockGitClientFactory;

    @Mock
    private ItemBankProperties mockItemBankProperties;

    private ItemBankRepository repository;

    private ItemBankRepository spyRepository;


    @Before
    public void setup() throws IOException {
        when(mockItemIdGenerator.generateItemId()).thenReturn(ITEM_ID);
        when(mockGroup.getId()).thenReturn(GROUP_ID);
        when(mockGitlabApi.getGroup(TEST_UTIL.getGitlabGroup())).thenReturn(mockGroup);
        when(mockGitClientFactory.cloneRemoteRepository(ITEM_BANK_USER, ITEM_ID)).thenReturn(mockGitClient);
        when(mockGitClientFactory.openRepository(ITEM_BANK_USER, ITEM_ID)).thenReturn(mockGitClient);

        repository = new ItemBankRepository(
            TEST_UTIL.getGitlabProperties(), mockGitLabSession, mockItemIdGenerator, mockGitClientFactory);

        repository.setGitlabApi(mockGitlabApi);

        spyRepository = spy(repository);
        doReturn(mockGroup).when(spyRepository).getGroup();
        doReturn(mockGroup).when(spyRepository).lookupGroup();
    }

    @Test
    public void itShouldCommitItemChanges() {
        final InOrder inOrder = Mockito.inOrder(mockGitClient);

        repository.commitItemChanges(ITEM_BANK_USER, ITEM_ID);

        inOrder.verify(mockGitClient).checkoutMasterBranch();
        inOrder.verify(mockGitClient).pullLatest();
        inOrder.verify(mockGitClient).mergeScratchPad();
        inOrder.verify(mockGitClient).push();
        inOrder.verify(mockGitClient).deleteScratchPad();
    }

    @Test
    public void itShouldInitialize() {
        repository.initialize();

        when(mockItemBankProperties.getHost()).thenReturn("host");
        when(mockGitLabSession.getPrivateToken()).thenReturn("token");
        try {
            repository.initialize();
        } catch(Exception e) {
        }
    }

    @Test
    public void itShouldGetGroup() {
        final GitlabGroup group = repository.getGroup();
    }

    @Test
    public void itShouldFindItem() {
        repository.findItem(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitClientFactory, times(1)).openRepository(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitClient, times(1)).readItemFile();
    }

    @Test
    public void itShouldInitializeItemType() {
        final ItemRelease item = ITEM_FACTORY.newAssessmentItem(ITEM_ID, FORMAT_SHORT_ANSWER);

        when(mockGitClientFactory.openRepository(ITEM_BANK_USER, ITEM_ID)).thenReturn(mockGitClient);

        spyRepository.initializeItemType(ITEM_BANK_USER, item);

        verify(mockGitClient, times(1)).createScratchPad();
        verify(mockGitClient, times(1)).writeItemFile(item);
        verify(mockGitClient, times(1)).stageItemFile();
        verify(mockGitClient, times(1)).commit(anyString());
        verify(mockGitClient, times(1)).push();
    }

    @SuppressWarnings("deprecation")
    @Test
    public void itShouldInitializeNewItem() throws IOException {
        final String actualItemId = spyRepository.initializeNewItem(ITEM_BANK_USER);

        assertThat(actualItemId).isEqualTo(ITEM_ID);

        verify(mockItemIdGenerator, times(1)).generateItemId();


        verify(mockGitlabApi, times(1)).createProject(ITEM_ID, GROUP_ID, null,
            Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, 0, null);
    }

    @SuppressWarnings("deprecation")
    @Test(expected = SystemException.class)
    public void itShouldThrowSystemExceptionWhenCreatingProject() throws IOException {
        final IOException ioException = new IOException("IO exception");

        when(mockGitlabApi.createProject(ITEM_ID, GROUP_ID, null,
            Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, 0, null))
            .thenThrow(ioException);

        repository.createProject(mockGroup, ITEM_ID);


    }

    @SuppressWarnings("deprecation")
    @Test
    public void itShouldCreateProject() throws IOException {
        repository.createProject(mockGroup, ITEM_ID);

        verify(mockGitlabApi, times(1)).createProject(ITEM_ID, GROUP_ID, null,
            Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, 0, null);
    }

    @Test
    public void isShouldLookupGroup() throws IOException {
        final GitlabGroup gitlabGroup = repository.lookupGroup();
        verify(mockGitlabApi, times(1)).getGroup(TEST_UTIL.getGitlabGroup());
    }
}
