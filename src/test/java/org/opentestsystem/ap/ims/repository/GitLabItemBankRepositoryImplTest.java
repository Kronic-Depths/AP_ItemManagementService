/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.repository;

import org.gitlab.api.GitlabAPI;
import org.gitlab.api.models.GitlabGroup;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.util.GitTestUtil;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;

import java.io.IOException;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class GitLabItemBankRepositoryImplTest {

    private static final String TEST_ITEM_ID = "testItemId";

    private static final Integer TEST_GROUP_ID = 123;

    @Mock
    private ItemIdGenerator mockItemIdGenerator;

    @Mock
    private GitlabAPI mockGitlabApi;

    @Mock
    private GitClient mockGitClient;

    @Mock
    private GitlabGroup mockGroup;

    private GitTestUtil testUtil;

    private GitLabItemBankRepositoryImpl repository;

    @Before
    public void setup() throws IOException {
        testUtil = new GitTestUtil();

        MockitoAnnotations.initMocks(this);

        when(mockItemIdGenerator.generateItemId()).thenReturn(TEST_ITEM_ID);
        when(mockGroup.getId()).thenReturn(TEST_GROUP_ID);
        when(mockGitlabApi.getGroup(testUtil.getGitlabGroup())).thenReturn(mockGroup);


        repository = new GitLabItemBankRepositoryImpl(
            testUtil.getGitlabProperties(), null, mockItemIdGenerator, mockGitClient);

        repository.setGitlabApi(mockGitlabApi);
    }

    @Test
    public void itShouldCreateItem() throws IOException {
        repository.createItem();

        verify(mockGitlabApi, times(1)).getGroup(testUtil.getGitlabGroup());

        verify(mockItemIdGenerator, times(1)).generateItemId();

        verify(mockGitlabApi, times(1)).createProject(TEST_ITEM_ID, TEST_GROUP_ID, null,
            Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, 0, null);

        verify(mockGitClient, times(1)).initializeRemoteRepository(TEST_ITEM_ID);
    }

    @Test
    public void itShouldCreateProject() throws IOException {
        repository.createProject(mockGroup, TEST_ITEM_ID);

        verify(mockGitlabApi, times(1)).createProject(TEST_ITEM_ID, TEST_GROUP_ID, null,
            Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, 0, null);
    }

    @Test
    public void itShouldGetGroup() throws IOException {
        final GitlabGroup group = repository.getGroup();
        verify(mockGitlabApi, times(1)).getGroup(testUtil.getGitlabGroup());
    }

}
