/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.repository;

import org.gitlab.api.GitlabAPI;
import org.gitlab.api.models.GitlabGroup;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.client.GitClientFactory;
import org.opentestsystem.ap.ims.util.GitTestUtil;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.saaif.item.ItemFactory;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.util.GitTestUtil.GROUP_ID;
import static org.opentestsystem.ap.ims.util.GitTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.GitTestUtil.ITEM_ID;
import static org.opentestsystem.saaif.item.ItemConstants.ItemFormat.FORMAT_SHORT_ANSWER;

@RunWith(MockitoJUnitRunner.class)
public class ItemBankRepositoryImplTest {

    private static final GitTestUtil GIT_TEST_UTIL = new GitTestUtil();
    @Mock
    private ItemIdGenerator mockItemIdGenerator;

    @Mock
    private GitlabAPI mockGitlabApi;

    @Mock
    private GitClient mockGitClient;

    @Mock
    private GitlabGroup mockGroup;

    @Mock
    private GitClientFactory mockGitClientFactory;

    @Mock
    private ItemFactory mockItemFactory;


    private ItemBankRepositoryImpl repository;

    @Before
    public void setup() throws IOException {

        when(mockItemIdGenerator.generateItemId()).thenReturn(ITEM_ID);
        when(mockGroup.getId()).thenReturn(GROUP_ID);
        when(mockGitlabApi.getGroup(GIT_TEST_UTIL.getGitlabGroup())).thenReturn(mockGroup);
        when(mockGitClientFactory.createAndCloneRemoteRepository(ITEM_BANK_USER, ITEM_ID)).thenReturn(mockGitClient);

        repository = new ItemBankRepositoryImpl(
            GIT_TEST_UTIL.getGitlabProperties(), null, mockItemIdGenerator, mockGitClientFactory, mockItemFactory);

        repository.setGitlabApi(mockGitlabApi);
    }

    @Test
    public void itShouldCreateItem() throws IOException {
        final String actualItemId = repository.createItem(ITEM_BANK_USER, FORMAT_SHORT_ANSWER);

        assertThat(actualItemId).isEqualTo(ITEM_ID);

        verify(mockGitlabApi, times(1)).getGroup(GIT_TEST_UTIL.getGitlabGroup());

        verify(mockItemIdGenerator, times(1)).generateItemId();

        verify(mockGitlabApi, times(1)).createProject(ITEM_ID, GROUP_ID, null,
            Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, 0, null);

    }

    @Test
    public void itShouldCreateProject() throws IOException {
        repository.createProject(mockGroup, ITEM_ID);

        verify(mockGitlabApi, times(1)).createProject(ITEM_ID, GROUP_ID, null,
            Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, 0, null);
    }

    @Test
    public void itShouldGetGroup() throws IOException {
        final GitlabGroup group = repository.getGroup();
        verify(mockGitlabApi, times(1)).getGroup(GIT_TEST_UTIL.getGitlabGroup());
    }

}
