/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.entity;

import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Lists;
import org.junit.Before;
import org.junit.Test;

import static java.lang.System.out;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemLanguage.LANG_ENU;

public class ItemTest {

    private ObjectMapper mapper;

    @Before
    public void setup() {
        mapper = new ObjectMapper();
    }

    @Test
    public void itShouldUseNoArgConstructor() {
        new Item();
    }

    @Test
    public void itShouldConfirmItemsAreEqual() {
        final Item item1 = Item.ItemBuilder.anItem().id("id").type("type").build();
        final Item item2 = Item.ItemBuilder.anItem().id("id").type("type").build();
        assertThat(item1).isEqualTo(item2);
        assertItem(item1);
        assertItem(item2);
    }

    @Test
    public void itShouldCreateShortAnswerItem() throws JsonProcessingException {
        final Sample exemplar1 = Sample.SampleBuilder.aSample().name("Exemplar 1").purpose("Exemplar").sampleContent
            ("The answer is George Washington").build();

        final Rubric rubric = Rubric.RubricBuilder.aRubric().name("ExemplarResponses").samples(Lists.newArrayList(exemplar1)).build();

        final Content content = Content.ContentBuilder.aContent().stem("this is a stem").language
            (LANG_ENU).rubrics(Lists.newArrayList(rubric)).build();

        final List<Content> contents = Lists.newArrayList(content);

        final Item item = Item.ItemBuilder.anItem().id("1234567890").type("sa").contents(contents).build();

        out.println(mapper.writeValueAsString(item));
    }

    private void assertItem(Item item) {
        assertThat(item.getId()).isEqualTo("id");
        assertThat(item.getType()).isEqualTo("type");
    }
}
