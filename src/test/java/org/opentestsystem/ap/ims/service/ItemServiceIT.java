/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.service;

import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.gitlab4j.api.models.Commit;
import org.gitlab4j.api.models.Project;
import org.gitlab4j.api.models.RepositoryFile;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.client.GitClientFactory;
import org.opentestsystem.ap.ims.client.GitlabClient;
import org.opentestsystem.ap.ims.model.Item;
import org.opentestsystem.ap.ims.model.ItemBankUser;
import org.opentestsystem.ap.ims.model.ItemHistory;
import org.opentestsystem.ap.ims.model.SaItem;
import org.opentestsystem.ap.ims.repository.ItemRepository;
import org.opentestsystem.ap.ims.util.IMSTestUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static java.lang.System.out;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;

@ActiveProfiles(value = "it-test, itembank-on")
@RunWith(SpringRunner.class)
@SpringBootTest
public class ItemServiceIT {

    private IMSTestUtil testUtil;

    private ObjectMapper mapper;

    @Autowired
    private ItemService service;

    @Autowired
    private GitlabClient gitlabClient;

    @Autowired
    private GitClientFactory gitClientFactory;

    @Autowired
    private ItemRepository itemRepository;

    @Before
    public void setup() {
        testUtil = new IMSTestUtil();
        mapper = new ObjectMapper();
    }

    @Ignore
    @Test
    public void itShouldReturnItemHistory() {
//        final String itemId = "1711962333";
        final String itemId = "1614000275";

        final List<Commit> commits = gitlabClient.lookupItemHistory(itemId);
        System.out.println("number of commits " + commits.size());

        final List<ItemHistory> itemHistoryList = itemRepository.findItemHistory(itemId);
        itemHistoryList.stream().forEach(System.out::println);
    }

    @Ignore
    @Test
    public void itShouldMerge() {
        ItemBankUser user = new ItemBankUser("bdrainer@fairwaytech.com", "Brett Drainer");

        final GitClient gitClient = gitClientFactory.openRepository(user, "1944756329");

        gitClient.checkoutScratchPad();
        gitClient.pullLatest();

        gitClient.checkoutMasterBranch();
        gitClient.pullLatest();

        gitClient.mergeScratchPad();

        gitClient.commit("I am committing my final changes");
        gitClient.push();
    }

    @Ignore
    @Test
    public void itShouldLookupProject() {
        final Project project = gitlabClient.lookupProjectByName("1614000275");
        System.out.printf("Project ID = %d %n", project.getId());
    }

    @Ignore
    @Test
    public void itShouldFindItemFile() {
        final RepositoryFile itemFile = gitlabClient.lookupItemFile("1411661897", "master");
        assertThat(itemFile).isNull();
    }

    @Ignore
    @Test
    public void itShouldListRemoteBranches() {
        final String itemId = "1673544860";
        final GitClient gitClient = gitClientFactory.openRepository(ITEM_BANK_USER, itemId);
        final String owner = gitClient.findScratchPadOwner();
        out.println("****** " + owner + "  ******");
    }

    @Ignore
    @Test
    public void itShouldCheckoutItemForEdit() throws JsonProcessingException {
        final String itemId = "1579987491";
        final Item item = service.beginEditItem(itemId);
        itemOut(item);
    }

    @Ignore
    @Test
    public void itShouldCreateSAItemAndUpdateItWithChanges() throws JsonProcessingException {
        Item item = null;

        final String itemType = TYPE_SA;
        final Item newItem = testUtil.newSaItem();
        final String itemId = newItem.getId();

        item  = service.findItem(itemId);
        itemOut(item);

        final SaItem updatedItem = testUtil.newSaItem();
        updatedItem.setPrompt("Updating prompt");
        // expecting two exemplar responses
        updatedItem.getExemplarResponses().remove(1);

        service.saveItem(itemId, updatedItem);

        item  = service.findItem(itemId);
        itemOut(item);
    }


    private void itemOut(final Item item) throws JsonProcessingException {
        out.println(mapper.writeValueAsString(item));
        out.printf("%n%n");
    }

}
