/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.repository.ItemBankRepository;
import org.opentestsystem.ap.ims.util.SecurityUtil;
import org.opentestsystem.saaif.item.ItemFactory;
import org.opentestsystem.saaif.item.ItemRelease;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.util.ItemBankTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.ItemBankTestUtil.ITEM_FACTORY;
import static org.opentestsystem.ap.ims.util.ItemBankTestUtil.ITEM_ID;
import static org.opentestsystem.saaif.item.ItemConstants.ItemFormat.FORMAT_SHORT_ANSWER;

@RunWith(MockitoJUnitRunner.class)
public class ItemBankServiceTest {

    @Mock
    private ItemBankRepository repository;

    @Mock
    private ItemFactory itemFactory;

    @Mock
    private SecurityUtil securityUtil;

    private ItemBankService service;

    @Before
    public void setup() {
        when(securityUtil.getUsername()).thenReturn(ITEM_BANK_USER.getUsername());
        when(securityUtil.getFullname()).thenReturn(ITEM_BANK_USER.getFullname());


        service = new ItemBankService(repository, itemFactory, securityUtil);
    }

    @Test
    public void itShouldCreateItem() {
        final ItemRelease item = ITEM_FACTORY.newDefaultItemWrapper(ITEM_ID, FORMAT_SHORT_ANSWER);

        when(repository.initializeNewItem(ITEM_BANK_USER)).thenReturn(ITEM_ID);
        when(itemFactory.newDefaultItemWrapper(ITEM_ID, FORMAT_SHORT_ANSWER)).thenReturn(item);

        final String itemId = service.createItem(FORMAT_SHORT_ANSWER);

        assertThat(itemId).isEqualTo(ITEM_ID);

        verify(repository, times(1)).initializeNewItem(ITEM_BANK_USER);
        verify(itemFactory, times(1)).newDefaultItemWrapper(ITEM_ID, FORMAT_SHORT_ANSWER);
        verify(repository, times(1)).initializeItemType(ITEM_BANK_USER, item);
    }
}
