/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import java.util.concurrent.CountDownLatch;

import org.gitlab4j.api.models.Project;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;

/**
 * Use this class to test two threads attempting to claim the scratch pad.  One and only one thread should
 * claim it.  The other thread should always get an error.
 */
@ActiveProfiles(value = "it-test, itembank-on")
@RunWith(SpringRunner.class)
@SpringBootTest
public class ClaimScratchPadIT {

    // set an existing item to test against
    // an enhancement would be to create a new item in the test
    private static final String ITEM_ID = "1411661897";

    @Autowired
    private GitlabClient gitlabClient;

    private Project project;

    @Before
    public void setup() {
        project = gitlabClient.lookupProjectByName(ITEM_ID);
        gitlabClient.deleteItemLock(project);
    }

    @Ignore
    @Test
    public void itShouldCreateOneAndOnlyOneScratchPad() throws InterruptedException {
        final CountDownLatch stopLatch = new CountDownLatch(2);

        final OpenItemForEdit t1 = new OpenItemForEdit("t1", project, gitlabClient, stopLatch);
        final OpenItemForEdit t2 = new OpenItemForEdit("t2", project, gitlabClient, stopLatch);

        t1.start();
        t2.start();

        stopLatch.await();

        System.out.println("************************************************");
        System.out.println("**** Done ****");
        System.out.println("************************************************");
    }

    public static class OpenItemForEdit extends Thread {

        private Project project;

        private final GitlabClient gitlabClient;

        private final CountDownLatch stopLatch;

        public OpenItemForEdit(final String name,
                               final Project project,
                               final GitlabClient gitlabClient,
                               final CountDownLatch stopLatch) {
            super(name);
            this.gitlabClient = gitlabClient;
            this.stopLatch = stopLatch;
        }

        @Override
        public void run() {
            try {
                gitlabClient.lockItem(ITEM_BANK_USER, project);
                System.out.println("##### Winner Winner, Chicken Dinner --> " + getName());
            } finally {
                stopLatch.countDown();
            }
        }
    }
}
