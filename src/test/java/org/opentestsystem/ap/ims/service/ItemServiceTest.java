/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.AbstractItem;
import org.opentestsystem.ap.common.model.ItemResponse;
import org.opentestsystem.ap.common.repository.EqEditorConfigRepository;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;
import org.opentestsystem.ap.ims.util.IMSTestUtil;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CORE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.COMMIT_MESSAGE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.HISTORY_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.WORKFLOW_STATUS_DRAFT;

@RunWith(MockitoJUnitRunner.class)
public class ItemServiceTest {

    @Mock
    private ItemRepository mockRepository;

    @Mock
    private EqEditorConfigRepository mockEqEditorConfigRepository;

    @Mock
    private WorkflowStatusRepository mockWorkflowStatusRepository;

    @Mock
    private SecurityUtil mockSecurityUtil;

    @Mock
    private ItemServiceValidator mockValidator;

    private ItemService service;

    private IMSTestUtil testUtil;

    private ItemChangeRequest itemChangeRequest;

    @Before
    public void setup() {
        testUtil = new IMSTestUtil();

        itemChangeRequest = new ItemChangeRequest();
        itemChangeRequest.setMessage(COMMIT_MESSAGE);

        when(mockSecurityUtil.getItemBankUser()).thenReturn(ITEM_BANK_USER);
        when(mockSecurityUtil.getUsername()).thenReturn(ITEM_BANK_USER.getUserName());
        when(mockSecurityUtil.getFullname()).thenReturn(ITEM_BANK_USER.getFullName());

        service = new ItemService(mockRepository, mockEqEditorConfigRepository, mockWorkflowStatusRepository,
            mockValidator, mockSecurityUtil);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldFindItem() {
        final InOrder inOrder = inOrder(mockValidator, mockRepository, mockSecurityUtil);
        final ItemResponse expectedItemResponse = testUtil.newItemResponse();

        when(mockRepository.findItem(ITEM_BANK_USER, ITEM_ID)).thenReturn(expectedItemResponse);

        final ItemResponse actualItemResponse = service.findItem(ITEM_ID);
        assertThat(actualItemResponse).isEqualTo(expectedItemResponse);

        inOrder.verify(mockValidator).validateFindItem(ITEM_ID);
        inOrder.verify(mockSecurityUtil).getItemBankUser();
        inOrder.verify(mockRepository).findItem(ITEM_BANK_USER, ITEM_ID);
    }

    @Test
    public void itShouldFindItemHistory() {
        final InOrder inOrder = inOrder(mockValidator, mockRepository);
        service.findItemHistory(ITEM_ID);
        inOrder.verify(mockValidator).validateFindItemHistory(ITEM_ID);
        inOrder.verify(mockRepository).findItemHistory(ITEM_ID);
    }

    @Test
    public void itShouldFindItemDiff() {
        final InOrder inOrder = inOrder(mockValidator, mockRepository);
        service.findItemDiff(ITEM_ID, HISTORY_ID);
        inOrder.verify(mockValidator).validateFindItemDiff(ITEM_ID, HISTORY_ID);
        inOrder.verify(mockRepository).findItemDiff(ITEM_ID, HISTORY_ID);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldBeginCreateTransaction() {
        final String itemType = TYPE_SA;
        final ItemResponse expectedItemResponse = testUtil.newItemResponse();

        final InOrder inOrder = inOrder(mockValidator, mockRepository, mockSecurityUtil);

        when(mockRepository.createItem(ITEM_BANK_USER, itemType, COMMIT_MESSAGE, WORKFLOW_STATUS_DRAFT)).thenReturn
            (expectedItemResponse);

        final ItemResponse actualItemResponse = service.beginCreateTransaction(itemType, COMMIT_MESSAGE);
        assertThat(actualItemResponse).isEqualTo(expectedItemResponse);

        inOrder.verify(mockValidator).validateBeginCreateTransaction(itemType, COMMIT_MESSAGE);
        inOrder.verify(mockSecurityUtil).getItemBankUser();
        inOrder.verify(mockRepository).createItem(ITEM_BANK_USER, TYPE_SA, COMMIT_MESSAGE, WORKFLOW_STATUS_DRAFT);
    }

    @Test
    public void itShouldBeginEditTransaction() {
        final InOrder inOrder = inOrder(mockValidator, mockRepository, mockSecurityUtil);

        service.beginEditTransaction(ITEM_ID, SECTION_CORE, COMMIT_MESSAGE);

        inOrder.verify(mockValidator).validateBeginEditTransaction(ITEM_ID, SECTION_CORE, COMMIT_MESSAGE);
        inOrder.verify(mockSecurityUtil).getItemBankUser();
        inOrder.verify(mockRepository).beginItemEdit(ITEM_BANK_USER, ITEM_ID, SECTION_CORE, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldSaveTransaction() {
        final InOrder inOrder = inOrder(mockValidator, mockRepository, mockSecurityUtil);

        final AbstractItem expectedItem = testUtil.newSaItem();

        itemChangeRequest.setItem(expectedItem);

        service.saveTransaction(ITEM_ID, itemChangeRequest);

        inOrder.verify(mockValidator).validateSaveTransaction(ITEM_ID, itemChangeRequest);
        inOrder.verify(mockSecurityUtil).getItemBankUser();
        inOrder.verify(mockRepository).saveItem(ITEM_BANK_USER, expectedItem, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldCommitTransaction() {
        final InOrder inOrder = inOrder(mockValidator, mockRepository);

        final AbstractItem expectedItem = testUtil.newSaItem();

        itemChangeRequest.setItem(expectedItem);

        service.commitTransaction(ITEM_ID, itemChangeRequest);

        inOrder.verify(mockValidator).validateCommitTransaction(ITEM_ID, itemChangeRequest);
        inOrder.verify(mockRepository).saveItem(ITEM_BANK_USER, expectedItem, COMMIT_MESSAGE);
        inOrder.verify(mockRepository).commitItem(ITEM_BANK_USER, expectedItem, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldRollbackItem() {
        service.rollbackTransaction(ITEM_ID);
        verify(mockValidator).validateRollbackTransaction(ITEM_ID);
        verify(mockRepository).rollbackEdits(ITEM_BANK_USER, ITEM_ID);
    }
}
