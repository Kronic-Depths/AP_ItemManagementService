/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemMapper;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;
import org.opentestsystem.ap.ims.util.IMSTestUtil;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.COMMIT_MESSAGE;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.HISTORY_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.TRANSACTION_ID;

@RunWith(MockitoJUnitRunner.class)
public class ItemServiceTest {

    @Mock
    private ItemRepository mockRepository;

    @Mock
    private SecurityUtil mockSecurityUtil;

    @Mock
    private ItemMapper mockItemMapper;

    @Mock
    private ItemServiceValidator mockValidator;

    private ItemService service;

    private IMSTestUtil testUtil;

    private ItemChangeRequest itemChangeRequest;

    @Before
    public void setup() {
        testUtil = new IMSTestUtil();

        itemChangeRequest = new ItemChangeRequest();
        itemChangeRequest.setMessage(COMMIT_MESSAGE);

        when(mockSecurityUtil.getItemBankUser()).thenReturn(ITEM_BANK_USER);
        when(mockSecurityUtil.getUsername()).thenReturn(ITEM_BANK_USER.getUsername());
        when(mockSecurityUtil.getFullname()).thenReturn(ITEM_BANK_USER.getFullname());

        service = new ItemService(mockRepository, mockValidator, mockSecurityUtil);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldFindItem() {
        final Item expectedItem = testUtil.newSaItem();

        when(mockRepository.findItem(ITEM_BANK_USER, ITEM_ID)).thenReturn(expectedItem);

        final Item actualItem = service.findItem(ITEM_ID);
        assertThat(actualItem).isEqualTo(expectedItem);

        verify(mockValidator, times(1)).validateFindItem(ITEM_ID);
        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).findItem(ITEM_BANK_USER, ITEM_ID);
    }

    @Test
    public void itShouldFindItemHistory() {
        service.findItemHistory(ITEM_ID);
        verify(mockValidator, times(1)).validateFindItemHistory(ITEM_ID);
        verify(mockRepository, times(1)).findItemHistory(ITEM_ID);
    }

    @Test
    public void itShouldFindItemDiff() {
        service.findItemDiff(ITEM_ID, HISTORY_ID);
        verify(mockValidator, times(1)).validateFindItemDiff(ITEM_ID, HISTORY_ID);
        verify(mockRepository, times(1)).findItemDiff(ITEM_ID, HISTORY_ID);
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldBeginCreateTransaction() {
        final String itemType = TYPE_SA;
        final Item expectedItem = testUtil.newSaItem();
        // want to confirm the service sets the correct one
        expectedItem.setCreateTransaction(null);
        expectedItem.setEditTransaction(null);

        when(mockRepository.newItem(ITEM_BANK_USER)).thenReturn(ITEM_ID);

        when(mockRepository.beginCreateTransaction(ITEM_BANK_USER, ITEM_ID, itemType, COMMIT_MESSAGE)).thenReturn
            (expectedItem);

        final Item actualItem = service.beginCreateTransaction(itemType, COMMIT_MESSAGE);
        assertThat(actualItem).isEqualTo(expectedItem);

        verify(mockValidator, times(1)).validateBeginCreateTransaction(itemType, COMMIT_MESSAGE);
        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).newItem(ITEM_BANK_USER);
        verify(mockRepository, times(1)).beginCreateTransaction(ITEM_BANK_USER, ITEM_ID, TYPE_SA, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldBeginEditTransaction() {
        final Item actualItem = service.beginEditTransaction(ITEM_ID, COMMIT_MESSAGE);

        verify(mockValidator, times(1)).validateBeginEditTransaction(ITEM_ID, COMMIT_MESSAGE);
        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).beginEditTransaction(ITEM_BANK_USER, ITEM_ID, COMMIT_MESSAGE);
    }

    @Test
    public void itShouldSaveTransaction() {
        final Item expectedItem = testUtil.newSaItem();

        itemChangeRequest.setItem(expectedItem);

        service.saveTransaction(ITEM_ID, TRANSACTION_ID, itemChangeRequest);

        verify(mockValidator, times(1)).validateSaveTransaction(ITEM_ID, TRANSACTION_ID, itemChangeRequest);
        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).saveItem(ITEM_BANK_USER, expectedItem, TRANSACTION_ID, COMMIT_MESSAGE, false);
    }

    @Test
    public void itShouldCommitTransaction() {
        final Item expectedItem = testUtil.newSaItem();

        itemChangeRequest.setItem(expectedItem);

        service.commitTransaction(ITEM_ID, TRANSACTION_ID, itemChangeRequest);

        verify(mockValidator, times(1)).validateCommitTransaction(ITEM_ID, TRANSACTION_ID, itemChangeRequest);
        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).saveItem(ITEM_BANK_USER, expectedItem, TRANSACTION_ID, COMMIT_MESSAGE, true);
    }

    @Test
    public void itShouldRollbackItem() {
        service.rollbackTransaction(ITEM_ID, TRANSACTION_ID);
        verify(mockValidator, times(1)).validateRollbackTransaction(ITEM_ID, TRANSACTION_ID);
        verify(mockRepository, times(1)).rollbackTransaction(ITEM_BANK_USER, ITEM_ID, TRANSACTION_ID);
    }
}
