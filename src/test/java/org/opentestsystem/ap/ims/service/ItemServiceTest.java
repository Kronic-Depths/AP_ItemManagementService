/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.model.Item;
import org.opentestsystem.ap.ims.model.ItemMapper;
import org.opentestsystem.ap.ims.repository.ItemRepository;
import org.opentestsystem.ap.ims.util.IMSTestUtil;
import org.opentestsystem.ap.ims.util.SecurityUtil;
import org.opentestsystem.ap.ims.util.ValidationException;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class ItemServiceTest {

    @Mock
    private ItemRepository mockRepository;

    @Mock
    private SecurityUtil mockSecurityUtil;

    @Mock
    private ItemMapper mockItemMapper;

    private ItemService service;

    private IMSTestUtil testUtil;

    @Before
    public void setup() {
        testUtil = new IMSTestUtil();

        when(mockSecurityUtil.getItemBankUser()).thenReturn(ITEM_BANK_USER);
        when(mockSecurityUtil.getUsername()).thenReturn(ITEM_BANK_USER.getUsername());
        when(mockSecurityUtil.getFullname()).thenReturn(ITEM_BANK_USER.getFullname());

        service = new ItemService(mockRepository, mockSecurityUtil);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWheFindingItemHistoryBecauseItemIdIsNull() {
        service.findItemHistory(null);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWheFindingItemHistoryBecauseItemIdIsEmpty() {
        service.findItemHistory(EMPTY);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWheFindingItemHistoryBecauseItemIdIsBlank() {
        service.findItemHistory(" ");
    }

    @Test
    public void itShouldFindItemHistory() {
        service.findItemHistory(ITEM_ID);
        verify(mockRepository, times(1)).findItemHistory(ITEM_ID);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenRollbackingItem() {
        service.rollbackItem(null);
    }

    @Test
    public void itShouldRollbackItem() {
        service.rollbackItem(ITEM_ID);
        verify(mockRepository, times(1)).rollbackItemChanges(ITEM_BANK_USER, ITEM_ID);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenSavingItemBecauseItemIdIsNull() {
        final Item expectedItem = testUtil.newSaItem();
        service.saveItem(null, expectedItem);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenSavingItemBecauseItemIsNull() {
        service.saveItem(ITEM_ID, null);
    }

    @Test
    public void itShouldSaveItem() {
        final Item expectedItem = testUtil.newSaItem();

        service.saveItem(ITEM_ID, expectedItem);

        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).saveItem(ITEM_BANK_USER, expectedItem);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenFindingItemBecauseItemIdIsNull() {
        service.findItem(null);
    }

    @Test
    public void itShouldFindItem() {
        final Item expectedItem = testUtil.newSaItem();

        when(mockRepository.findItem(ITEM_BANK_USER, ITEM_ID)).thenReturn(expectedItem);

        final Item actualItem = service.findItem(ITEM_ID);

        assertThat(actualItem).isEqualTo(expectedItem);
        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).findItem(ITEM_BANK_USER, ITEM_ID);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenDeletingNewItemBecauseItemIdIsNull() {
        service.deleteNewItem(null);
    }

    @Test
    public void itShouldDeleteNewItem() {
        service.deleteNewItem(ITEM_ID);
        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).deleteItem(ITEM_BANK_USER, ITEM_ID);
    }

    @Test
    public void itShouldCommitItemChanges() {
        service.commitNewItem(ITEM_ID);

        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).commitItemChanges(ITEM_BANK_USER, ITEM_ID, "Complete item creation");
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenCommitingNewItemBecauseItemIdIsNull() {
        service.commitNewItem(null);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenCreatingNewItemBecauseItemTypeIsNull() {
        service.createNewItem(null);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenCreatingNewItemBecauseItemTypeIsEmpty() {
        service.createNewItem(EMPTY);
    }

    @Test(expected = ValidationException.class)
    public void itShouldThrowWhenCreatingNewItemBecauseItemTypeIsBlank() {
        service.createNewItem(" ");
    }

    @Test
    public void itShouldCreateNewItem() {
        final String itemType = TYPE_SA;
        final Item expectedItem = testUtil.newSaItem();
        // want to confirm the service sets the correct one
        expectedItem.setBeingCreatedBy(null);
        expectedItem.setBeingEditedBy(null);

        when(mockRepository.newItem(ITEM_BANK_USER)).thenReturn(ITEM_ID);

        when(mockRepository.beginCreateItem(ITEM_BANK_USER, ITEM_ID, itemType)).thenReturn(expectedItem);

        final Item actualItem = service.createNewItem(itemType);

        assertThat(actualItem.getId()).isEqualTo(ITEM_ID);
        assertThat(actualItem.getType()).isEqualTo(TYPE_SA);

        verify(mockSecurityUtil, times(1)).getItemBankUser();
        verify(mockRepository, times(1)).newItem(ITEM_BANK_USER);
        verify(mockRepository, times(1)).beginCreateItem(ITEM_BANK_USER, ITEM_ID, TYPE_SA);
    }

}
