/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.util;

import org.apache.commons.lang3.RandomUtils;
import org.assertj.core.util.Sets;
import org.junit.Before;
import org.junit.Test;

import java.util.Set;

import static java.lang.System.out;
import static org.assertj.core.api.Assertions.assertThat;

public class ItemIdGeneratorTest {

    private static final int ID_LENGTH = 8;

    private static final int MIN_VAL = 1000000000;
    private static final int MAX_VAL = Integer.MAX_VALUE;

    private ItemIdGenerator generator;

    @Before
    public void setup() {
        generator = new ItemIdGenerator(MIN_VAL, MAX_VAL);
    }

    @Test
    public void itShouldGenerateItemId() {
        final String itemId = generator.generateItemId();
        assertThat(itemId).hasSize(10);
    }

    @Test
    public void test() {
        final int HOW_MANY = 10;
        Set<Integer> numbers = Sets.newHashSet();
        for (int i = 0; i < HOW_MANY; i++) {
            numbers = getIds(HOW_MANY);
            if (numbers.size() != HOW_MANY) {
                out.println(numbers.size());
            }
        }
    }

    public Set<Integer> getIds(int howMany) {
        Set<Integer> numbers = Sets.newHashSet();
        for (int i = 0; i < howMany; i++) {
            int num = RandomUtils.nextInt(1000000000, Integer.MAX_VALUE);
            out.printf("%d | %s | %s %n", num,
                Integer.toHexString(num).toUpperCase(),
                Integer.toString(num, Character.MAX_RADIX).toUpperCase());
            numbers.add(num);
        }
        return numbers;
    }
}
