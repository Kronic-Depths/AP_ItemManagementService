/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.util;

import org.opentestsystem.ap.ims.entity.WorkflowStatus;
import org.opentestsystem.ap.ims.repository.WorkflowStatusRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

@Component
@ConditionalOnProperty(value = "data.loader.enabled", havingValue = "true", matchIfMissing = false)
public class DataLoader implements ApplicationRunner {

    private final WorkflowStatusRepository workflowStatusRepository;

    @Autowired
    public DataLoader(final WorkflowStatusRepository workflowStatusRepository) {
        this.workflowStatusRepository = workflowStatusRepository;
    }

    @Override
    public void run(ApplicationArguments applicationArguments) throws Exception {
        workflowStatusRepository.save(new WorkflowStatus("Draft", "1. Draft", 1));
        workflowStatusRepository.save(new WorkflowStatus("InitialReview", "2. Initial Review", 2));
        workflowStatusRepository.save(new WorkflowStatus("MultimediaUpload", "2a. Multimedia Upload", 3));
        workflowStatusRepository.save(new WorkflowStatus("AuditReview", "3. Audit Review", 4));
        workflowStatusRepository.save(new WorkflowStatus("QualityReview", "4. Quality Review", 5));
        workflowStatusRepository.save(new WorkflowStatus("QualityCorrections", "4a. Quality Corrections", 6));
        workflowStatusRepository.save(new WorkflowStatus("QualityContentReview", "4b. Quality Content Review", 7));
        workflowStatusRepository.save(new WorkflowStatus("QualityStudentSupportReview", "4c. Quality Student Support Review", 8));
        workflowStatusRepository.save(new WorkflowStatus("ContentEditReview", "5. Content Edit Review", 9));
        workflowStatusRepository.save(new WorkflowStatus("ContentReview", "6. Content Review", 10));
        workflowStatusRepository.save(new WorkflowStatus("TextToSpeechUpload", "7. Text-to-speech Upload", 11));
        workflowStatusRepository.save(new WorkflowStatus("AccessibilityUpload", "8. Accessibility Upload", 12));
        workflowStatusRepository.save(new WorkflowStatus("AccessibilityReview", "9. Accessibility Review", 13));
        workflowStatusRepository.save(new WorkflowStatus("ContentFinalReview", "10. Content Final Review", 14));
        workflowStatusRepository.save(new WorkflowStatus("FieldTest", "11. Field Test", 15));
        workflowStatusRepository.save(new WorkflowStatus("PsychometricReview", "12. Psychometric Review", 16));
        workflowStatusRepository.save(new WorkflowStatus("DataReview", "12a. Data Review", 17));
        workflowStatusRepository.save(new WorkflowStatus("PostFieldTestCorrections", "12b. Post Field Test Corrections", 18));
        workflowStatusRepository.save(new WorkflowStatus("Operational", "13. Operational", 19));
        workflowStatusRepository.save(new WorkflowStatus("Released", "14. Released", 20));
        workflowStatusRepository.save(new WorkflowStatus("Archived", "15. Archived", 21));
        workflowStatusRepository.save(new WorkflowStatus("Rejected", "Rejected", 900));
        workflowStatusRepository.save(new WorkflowStatus("DoNotUse", "Do Not Use", 901));
    }
}
