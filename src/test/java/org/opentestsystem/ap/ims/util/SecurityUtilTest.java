/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.util;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Spy;
import org.opentestsystem.security.model.User;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.initMocks;
import static org.opentestsystem.ap.ims.util.SecurityUtil.USER_ANONYMOUS;

public class SecurityUtilTest {

    private static final String USERNAME = "johndoe@fake.com";

    private static final String FULLNAME = "John Doe";

    @Mock
    private Authentication mockAuthentication;

    @Mock
    private UserDetails mockUserDetails;

    @Mock
    private User mockUser;

    @Spy
    private SecurityUtil spy;

    @Before
    public void setup() {
        initMocks(this);
    }

    @Test
    public void itShouldParseUserName() {
        assertParsedUsername("test", "test");
        assertParsedUsername("test@fake.com", "test");
        assertParsedUsername("@fake.com", EMPTY);
        assertParsedUsername(null, null);
        assertParsedUsername(EMPTY, EMPTY);
    }

    private void assertParsedUsername(String username, String expected) {
        SecurityUtil.UserInfo user = new SecurityUtil.UserInfo(username, "Test User");
        assertThat(user.parseUsername()).isEqualTo(expected);
    }

    @Test
    public void itShouldGetUserInfoFromUser() {
        when(mockUser.getUsername()).thenReturn(USERNAME);
        when(mockUser.getFullName()).thenReturn(FULLNAME);
        when(mockAuthentication.getPrincipal()).thenReturn(mockUser);
        when(spy.getAuthentication()).thenReturn(mockAuthentication);

        final SecurityUtil.UserInfo userInfo = spy.getUserInfo();

        assertThat(userInfo).isNotNull();
        assertThat(userInfo.getUsername()).isEqualTo(USERNAME);
        assertThat(userInfo.getFullname()).isEqualTo(FULLNAME);
    }

    @Test
    public void itShouldGetAnonymousUsername() {
        when(spy.getAuthentication()).thenReturn(null);
        final String username = spy.getUsername();
        assertThat(username).isEqualTo(USER_ANONYMOUS);
    }

    @Test
    public void itShouldGetUsernameAnonymousFromNullPrincipal() {
        when(mockAuthentication.getPrincipal()).thenReturn(null);
        when(spy.getAuthentication()).thenReturn(mockAuthentication);
        final String actual = spy.getUsername();
        assertThat(actual).isEqualTo(USER_ANONYMOUS);
    }

    @Test
    public void itShouldGetUsernameFromString() {
        when(mockAuthentication.getPrincipal()).thenReturn(USERNAME);
        when(spy.getAuthentication()).thenReturn(mockAuthentication);
        final String actual = spy.getUsername();
        assertThat(actual).isEqualTo(USERNAME);
    }

    @Test
    public void itShouldGetUsernameFromUserDetails() {
        when(mockUserDetails.getUsername()).thenReturn(USERNAME);
        when(mockAuthentication.getPrincipal()).thenReturn(mockUserDetails);
        when(spy.getAuthentication()).thenReturn(mockAuthentication);
        final String actual = spy.getUsername();
        assertThat(actual).isEqualTo(USERNAME);
    }

    @Test
    public void itShouldGetFullnameAnonymous() {
        when(spy.getAuthentication()).thenReturn(null);
        final String actual = spy.getFullname();
        assertThat(actual).isEqualTo(USER_ANONYMOUS);
    }

    @Test
    public void itShouldGetFullnameFromUser() {
        when(mockUser.getFullName()).thenReturn(FULLNAME);
        when(mockAuthentication.getPrincipal()).thenReturn(mockUser);
        when(spy.getAuthentication()).thenReturn(mockAuthentication);
        final String actual = spy.getFullname();
        assertThat(actual).isEqualTo(FULLNAME);
    }

    @Test
    public void itShouldGetNullFullname() {
        when(mockAuthentication.getPrincipal()).thenReturn(mockUserDetails);
        when(spy.getAuthentication()).thenReturn(mockAuthentication);
        final String actual = spy.getFullname();
        assertThat(actual).isNull();
    }

}
