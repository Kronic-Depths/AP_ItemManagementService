/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.util;

import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.ims.entity.Content;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.entity.Rubric;
import org.opentestsystem.ap.ims.entity.Sample;
import org.opentestsystem.saaif.item.ItemRelease;

import static org.assertj.core.api.Assertions.assertThat;

public class ItemMapperTest {

    private IMSTestUtil testUtil;

    private ItemMapper mapper;

    @Before
    public void init() {
        testUtil = new IMSTestUtil();
        mapper = new ItemMapper();
    }

    @Test
    public void itShouldMapToSaaifItem() {
        final Item item = testUtil.newItem();

        final ItemRelease.Item saaifItem = mapper.mapToSaaifItem(item);

        assertThat(saaifItem.getId()).isEqualTo(item.getId());
        assertThat(saaifItem.getFormat()).isEqualTo(item.getType());

        assertThat(saaifItem.getContent()).hasSize(2);
    }

    @Test
    public void itShouldMapToSaaifContent() {
        final Content content = testUtil.newContent();
        final ItemRelease.Item.Content saaifContent = mapper.mapToSaaifContent(content);

        assertThat(saaifContent.getStem()).isEqualTo(content.getStem());
        assertThat(saaifContent.getLanguage()).isEqualTo(content.getLanguage());

        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = saaifContent.getRubriclist();

        assertThat(saaifRubriclist.getContent()).hasSize(2);
    }

    @Test
    public void itShouldMapToSaaifRubriclist() {
        final Rubric rubric1 = testUtil.newRubric();

        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = mapper.mapToSaaifRubriclist(Lists.newArrayList
            (rubric1));

        assertThat(saaifRubriclist.getContent()).hasSize(2);
    }

    @Test
    public void itShouldMapToSaaifRubric() {
        final Rubric rubric = testUtil.newRubric();

        final ItemRelease.Item.Content.Rubriclist.Rubric saaifRubric = mapper.mapToSaaifRubric(1, rubric);

        assertThat(saaifRubric.getIndex()).isEqualTo(1);
        assertThat(saaifRubric.getName()).isEqualTo(rubric.getName());
        assertThat(saaifRubric.getVal()).isEqualTo(rubric.getVal());
        assertThat(saaifRubric.getScorepoint()).isEqualTo(rubric.getScorepoint());
    }

    @Test
    public void itShouldMapToSaaifSamplelist() {
        final Rubric rubric = testUtil.newRubric();

        final ItemRelease.Item.Content.Rubriclist.Samplelist samplelist = mapper.mapToSaaifSamplelist(1, rubric);

        assertThat(samplelist.getName()).isNull();
        assertThat(samplelist.getVal()).isNull();

        assertThat(samplelist.getIndex()).isEqualTo(1);
        assertThat(samplelist.getSample()).hasSize(2);
        assertThat(samplelist.getMinval()).isEqualTo(rubric.getMinVal());
        assertThat(samplelist.getMaxval()).isEqualTo(rubric.getMaxVal());
    }

    @Test
    public void itShouldMapToSaaifSample() {
        final Sample sample = testUtil.newSample();

        final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample saaifSample = mapper.mapToSaaifSample(sample);

        assertThat(saaifSample.getName()).isEqualTo(sample.getName());
        assertThat(saaifSample.getPurpose()).isEqualTo(sample.getPurpose());
        assertThat(saaifSample.getSamplecontent()).isEqualTo(sample.getSamplecontent());
        assertThat(saaifSample.getScorepoint()).isEqualTo(toByte(sample.getScorepoint()));
    }

    private Byte toByte(final String val) {
        return val != null ? Byte.valueOf(val) : null;
    }
}
