/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.util;

import java.util.Date;
import java.util.List;

import org.gitlab4j.api.models.Commit;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.ims.entity.Attribute;
import org.opentestsystem.ap.ims.entity.Content;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.entity.ItemHistory;
import org.opentestsystem.ap.ims.entity.Rubric;
import org.opentestsystem.ap.ims.entity.Sample;
import org.opentestsystem.saaif.item.ItemRelease;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ItemMapperTest {

    private IMSTestUtil testUtil;

    private ItemMapper mapper;

    @Before
    public void init() {
        testUtil = new IMSTestUtil();
        mapper = new ItemMapper();
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldMapToEntityItemHistory() {
        final String committerEmail = "test@fake.com";
        final String committerName = "John Doe";
        final Date committedDate = new Date();
        final String message = "this is a commit message";

        final Commit mockCommit = mock(Commit.class);

        when(mockCommit.getCommitterName()).thenReturn(committerName);
        when(mockCommit.getCommitterEmail()).thenReturn(committerEmail);
        when(mockCommit.getCommittedDate()).thenReturn(committedDate);
        when(mockCommit.getMessage()).thenReturn(message);

        final ItemHistory itemHistory = mapper.mapToEntityItemHistory(mockCommit);

        assertThat(itemHistory.getChangedBy()).isEqualTo(committerName);
        assertThat(itemHistory.getChangedByEmail()).isEqualTo(committerEmail);
        assertThat(itemHistory.getMessage()).isEqualTo(message);
        assertThat(itemHistory.getChangedOn()).isEqualTo(committedDate);

    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldMapToEntitySample() {
        final Item expectedItem = testUtil.newItem();

        final ItemRelease.Item saaifItem = mapper.mapToSaaifItem(expectedItem);

        final Item actualItem = mapper.mapToEntityItem(saaifItem);

        assertThat(actualItem.getId()).isEqualTo(expectedItem.getId());
        assertThat(actualItem.getType()).isEqualTo(expectedItem.getType());
        assertThat(actualItem.getVersion()).isEqualTo(expectedItem.getVersion());
        assertThat(actualItem.getAttributes()).hasSize(expectedItem.getAttributes().size());


        final List<Content> expectedContents = expectedItem.getContents();
        final List<Content> actualContents = actualItem.getContents();

        assertThat(actualContents).hasSize(expectedContents.size());

        // the ordering of lists should be maintained
        final Content expectedContent = expectedContents.get(0);
        final Content actualContent = actualContents.get(0);

        assertThat(actualContent.getLanguage()).isEqualTo(expectedContent.getLanguage());
        assertThat(actualContent.getStem()).isEqualTo(expectedContent.getStem());

        final List<Rubric> expectedRubrics = expectedContent.getRubrics();
        final List<Rubric> actualRubrics = actualContent.getRubrics();

        assertThat(actualRubrics).hasSize(expectedRubrics.size());

        final Rubric expectedRubric = expectedRubrics.get(0);
        final Rubric actualRubric = actualRubrics.get(0);

        assertThat(actualRubric.getName()).isEqualTo(expectedRubric.getName());
        assertThat(actualRubric.getVal()).isEqualTo(expectedRubric.getVal());
        assertThat(actualRubric.getMinVal()).isEqualTo(expectedRubric.getMinVal());
        assertThat(actualRubric.getMaxVal()).isEqualTo(expectedRubric.getMaxVal());
        assertThat(actualRubric.getScorepoint()).isEqualTo(expectedRubric.getScorepoint());

        final List<Sample> expectedSamples = expectedRubric.getSamples();
        final List<Sample> actualSamples = actualRubric.getSamples();

        assertThat(actualSamples).hasSize(expectedSamples.size());

        final Sample expectedSample = expectedSamples.get(0);
        final Sample actualSample = actualSamples.get(0);

        assertThat(actualSample.getName()).isEqualTo(expectedSample.getName());
        assertThat(actualSample.getPurpose()).isEqualTo(expectedSample.getPurpose());
        assertThat(actualSample.getSamplecontent()).isEqualTo(expectedSample.getSamplecontent());
        assertThat(actualSample.getScorepoint()).isEqualTo(expectedSample.getScorepoint());
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldMapToSaaifItem() {
        final Item item = testUtil.newItem();

        final ItemRelease.Item saaifItem = mapper.mapToSaaifItem(item);

        assertThat(saaifItem.getId()).isEqualTo(item.getId());
        assertThat(saaifItem.getFormat()).isEqualTo(item.getType());
        assertThat(saaifItem.getContent()).hasSize(2);
    }

    @Test
    public void itShouldMapToSaaifAttriblist() {
        final Attribute attribute1 = testUtil.newAttribute();
        final Attribute attribute2 = testUtil.newAttribute();

        final ItemRelease.Item.Attriblist saaifAttriblist = mapper.mapToSaaifAttriblist(newArrayList(attribute1,
            attribute2));

        assertThat(saaifAttriblist.getAttrib()).hasSize(2);
    }

    @Test
    public void itShouldMapToSaaifAttrib() {
        final Attribute attribute = testUtil.newAttribute();
        final ItemRelease.Item.Attriblist.Attrib saaifAttrib = mapper.mapToSaaifAttrib(attribute);
        assertThat(saaifAttrib.getAttid()).isEqualTo(attribute.getAttid());
        assertThat(saaifAttrib.getName()).isEqualTo(attribute.getName());
        assertThat(saaifAttrib.getVal()).isEqualTo(attribute.getVal());
        assertThat(saaifAttrib.getDesc()).isEqualTo(attribute.getDesc());
    }

    @Test
    public void itShouldMapToSaaifContent() {
        final Content content = testUtil.newContent();
        final ItemRelease.Item.Content saaifContent = mapper.mapToSaaifContent(content);

        assertThat(saaifContent.getStem()).isEqualTo(content.getStem());
        assertThat(saaifContent.getLanguage()).isEqualTo(content.getLanguage());

        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = saaifContent.getRubriclist();
        assertThat(saaifRubriclist.getContent()).hasSize(2);
    }

    @Test
    public void itShouldMapToSaaifRubriclist() {
        final Rubric rubric1 = testUtil.newRubric();

        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = mapper.mapToSaaifRubriclist(newArrayList
            (rubric1));

        assertThat(saaifRubriclist.getContent()).hasSize(2);
    }

    @Test
    public void itShouldMapToSaaifRubric() {
        final Rubric rubric = testUtil.newRubric();

        final ItemRelease.Item.Content.Rubriclist.Rubric saaifRubric = mapper.mapToSaaifRubric(1, rubric);

        assertThat(saaifRubric.getIndex()).isEqualTo(1);
        assertThat(saaifRubric.getName()).isEqualTo(rubric.getName());
        assertThat(saaifRubric.getVal()).isEqualTo(rubric.getVal());
        assertThat(saaifRubric.getScorepoint()).isEqualTo(rubric.getScorepoint());
    }

    @Test
    public void itShouldMapToSaaifSamplelist() {
        final Rubric rubric = testUtil.newRubric();

        final ItemRelease.Item.Content.Rubriclist.Samplelist samplelist = mapper.mapToSaaifSamplelist(1, rubric);

        assertThat(samplelist.getName()).isNull();
        assertThat(samplelist.getVal()).isNull();

        assertThat(samplelist.getIndex()).isEqualTo(1);
        assertThat(samplelist.getSample()).hasSize(2);
        assertThat(samplelist.getMinval()).isEqualTo(rubric.getMinVal());
        assertThat(samplelist.getMaxval()).isEqualTo(rubric.getMaxVal());
    }

    @Test
    public void itShouldMapToSaaifSample() {
        final Sample sample = testUtil.newSample();

        final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample saaifSample = mapper.mapToSaaifSample(sample);

        assertThat(saaifSample.getName()).isEqualTo(sample.getName());
        assertThat(saaifSample.getPurpose()).isEqualTo(sample.getPurpose());
        assertThat(saaifSample.getSamplecontent()).isEqualTo(sample.getSamplecontent());
        assertThat(saaifSample.getScorepoint()).isEqualTo(toByte(sample.getScorepoint()));
    }

    private Byte toByte(final String val) {
        return val != null ? Byte.valueOf(val) : null;
    }
}
