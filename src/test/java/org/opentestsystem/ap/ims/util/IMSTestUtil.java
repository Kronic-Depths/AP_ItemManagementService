/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.util;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Comparator;
import java.util.List;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.entity.Attribute;
import org.opentestsystem.ap.ims.entity.Content;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.entity.ItemBankUser;
import org.opentestsystem.ap.ims.entity.Rubric;
import org.opentestsystem.ap.ims.entity.Sample;
import org.opentestsystem.saaif.item.SaaifItemFactory;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemAttribute.ItemAnswerKey;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemFormat.FORMAT_SHORT_ANSWER;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemLanguage.LANG_ESN;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemVersion.ITEM_VERSION;

/**
 * When instantiated the utility creates a temp directory and another directory in it.
 * These represent the local repo base and a local repository.  There is a cleanup
 * method intended for tests during their tear down.
 */
@Slf4j
@Getter
public class IMSTestUtil {

    public static final SaaifItemFactory ITEM_FACTORY = new SaaifItemFactory();

    public static final ItemBankUser ITEM_BANK_USER = new ItemBankUser("test@fake.com", "Test User");

    public static final Integer GROUP_ID = 8765309;

    public static final Integer PROJECT_ID = 11;

    public static final String ITEM_ID = "testItemId";

    public static final String COMMIT_MESSAGE = "this is a commit message";

    // ------------------------------------------------------------------------

    private ItemBankProperties gitlabProperties;

    private Path localBaseDir;

    private Path localRepoDir;

    private String gitlabHost = "https://gitlab-dev.smarterbalanced.org";

    private String gitlabUser = "test@fake.com";

    private String gitlabPass = "testPassword";

    private String gitlabGroup = "TestItembankGroup";

    private String gitLabProject = ITEM_ID;

    private int idMinValue = 1000000000;

    private int idMaxValue = Integer.MAX_VALUE;

    /**
     * Creates a temporary directory using a prefix of <code>gitlabGroup</code>.
     * A directory is created in the temp directory with the name <code>gitLabProject</code>.
     * The <code>GitlabProperties</code> instance is created with the default values set on the
     * class's instance properties.
     */
    public IMSTestUtil() {
        init();
    }

    /**
     * Same as the default constructor but instead of using default values the class's instance properties
     * are first set with the arguments of the constructor.
     */
    public IMSTestUtil(String gitlabHost, String gitlabUser, String gitlabPass, String gitlabGroup,
                       String gitLabProject, int idMinValue, int idMaxValue) {
        this.gitlabHost = gitlabHost;
        this.gitlabUser = gitlabUser;
        this.gitlabPass = gitlabPass;
        this.gitlabGroup = gitlabGroup;
        this.gitLabProject = gitLabProject;
        this.idMinValue = idMinValue;
        this.idMaxValue = idMaxValue;

        init();
    }

    private void init() {
        try {
            localBaseDir = Files.createTempDirectory(gitlabGroup);
            localRepoDir = Files.createDirectory(Paths.get(localBaseDir.toString(), gitLabProject));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        gitlabProperties = new ItemBankProperties();
        gitlabProperties.setGroup(gitlabGroup);
        gitlabProperties.setHost(gitlabHost);
        gitlabProperties.setIdMinValue(idMinValue);
        gitlabProperties.setIdMaxValue(idMinValue);
        gitlabProperties.setUser(gitlabUser);
        gitlabProperties.setPassword(gitlabUser);
        gitlabProperties.setLocalBaseDir(localBaseDir.toString());
    }

    // ------------------------------------------------------------------------

    /**
     * Deletes the temp directory and all its contents.
     */
    public void cleanup() {
        deleteDirectory(localBaseDir);
    }

    public void deleteDirectory(Path directoryToDelete) {
        if (Files.exists(directoryToDelete) && Files.isDirectory(directoryToDelete)) {
            log.info("deleting {}", directoryToDelete.toString());
            try {
                Files.walk(directoryToDelete, FileVisitOption.FOLLOW_LINKS)
                    .sorted(Comparator.reverseOrder())
                    .map(Path::toFile)
                    .peek(System.out::println)
                    .forEach(File::delete);
            } catch (Exception e) {
                throw new RuntimeException("Error trying to delete a directory", e);
            }
        }
    }

    // ------------------------------------------------------------------------

    public Item newItem() {
        return newItem("1234567890", FORMAT_SHORT_ANSWER);
    }

    public Item newItem(String id, String type) {
        final Attribute attribute1 = newAttribute();
        final Attribute attribute2 = newAttribute(ItemAnswerKey.getAttId(), ItemAnswerKey.getName(),
            type.toUpperCase(), null);

        final Content content1 = newContent();
        final Content content2 = newContent(LANG_ESN, "<p style=\"\">Este es el tallo para el contenido</p>",
            newArrayList(newRubric()));

        final Item item = Item.ItemBuilder.anItem()
            .id(id)
            .type(type)
            .version(ITEM_VERSION)
            .beingCreatedBy(ITEM_BANK_USER.getUsername())
            .attributes(newArrayList(attribute1, attribute2))
            .contents(newArrayList(content1, content2))
            .build();

        return item;
    }

    public Attribute newAttribute() {
        return newAttribute("attid", "name", "val", "desc");
    }

    public Attribute newAttribute(final String attid, final String name, final String val, final String desc) {
        final Attribute attribute = Attribute.AttributeBuilder.anAttribute().attid(attid).name(name).val(val)
            .desc(desc).build();

        return attribute;
    }

    public Content newContent() {
        final Rubric rubric = newRubric();
        return newContent(LANG_ENU, "<p style=\"\">Name one of the most popular US Presidents.</p>",
            newArrayList(rubric));
    }

    public Content newContent(String language, String stem, List<Rubric> rubrics) {
        return Content.ContentBuilder.aContent().language(language).stem(stem).rubrics(rubrics)
            .build();
    }

    public Rubric newRubric() {
        final Sample sample1 = newSample();
        final Sample sample2 = newSample("Exemplar 2", "OtherExemplar", "<p style=\"\">Abraham Lincoln</p>");

        final Rubric rubric = Rubric.RubricBuilder.aRubric().name("ExemplarResponse").samples(newArrayList(sample1,
            sample2)).build();

        return rubric;
    }

    public Sample newSample() {
        return newSample("Examplar 1", "Exemplar", "<p style=\"\">George Washington</p>");
    }

    public Sample newSample(String name, String purpose, String sampleContent) {
        final Sample sample = Sample.SampleBuilder.aSample().purpose(purpose).name(name)
            .sampleContent(sampleContent).build();
        return sample;
    }

}
