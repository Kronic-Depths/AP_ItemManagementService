/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.util;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Comparator;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.ItemAuthor;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_WER;

/**
 * When instantiated the utility creates a temp directory and another directory in it.
 * These represent the local repo base and a local repository.  There is a cleanup
 * method intended for tests during their tear down.
 */
@Slf4j
@Getter
public class IMSTestUtil {

    private ItemFactory itemFactory = new ItemFactory();

    // ------------------------------------------------------------------------

    public static final ItemBankUser ITEM_BANK_USER = new ItemBankUser("test@fake.com", "Test User");


    public static final Integer GROUP_ID = 8765309;

    public static final Integer PROJECT_ID = 11;

    public static final String ITEM_ID = "testItemId";

    public static final String TRANSACTION_ID = "testTransactionId";

    public static final ItemAuthor ITEM_AUTHOR = new ItemAuthor(ITEM_BANK_USER.getUsername(), TRANSACTION_ID);

    public static final String HISTORY_ID = "testHistoryId";

    public static final String ITEM_BANK_HOST = "http://itembank.com";

    public static final String API_VERSION = "/api/version";

    public static final String BANK_KEY = "187";

    public static final String COMMIT_MESSAGE = "this is a commit message";

    public static final String PROMPT = "This is a prompt";

    public static final String PROMPT_RICH_TEXT = "<p style=\"font-weight: bold;\">This is a rich text prompt</p>";

    public static final String EXEMPLAR_RESPONSE_1 = "This is an exemplar response 1";

    public static final String EXEMPLAR_RESPONSE_2 = "This is an exemplar response 2";

    public static final String WORKFLOW_STATUS_DRAFT = "Draft";

    // ------------------------------------------------------------------------

    private ItemBankProperties gitlabProperties;

    private Path localBaseDir;

    private Path localRepoDir;

    private String gitlabHost = "https://gitlab-dev.smarterbalanced.org";

    private String gitlabUser = "test@fake.com";

    private String gitlabPass = "testPassword";

    private String gitlabGroup = "TestItembankGroup";

    private String gitLabProject = ITEM_ID;

    private int idMinValue = 1000000000;

    private int idMaxValue = Integer.MAX_VALUE;

    /**
     * Creates a temporary directory using a prefix of <code>gitlabGroup</code>.
     * A directory is created in the temp directory with the name <code>gitLabProject</code>.
     * The <code>GitlabProperties</code> instance is created with the default values set on the
     * class's instance properties.
     */
    public IMSTestUtil() {
        init();
    }

    /**
     * Same as the default constructor but instead of using default values the class's instance properties
     * are first set with the arguments of the constructor.
     */
    public IMSTestUtil(String gitlabHost, String gitlabUser, String gitlabPass, String gitlabGroup,
                       String gitLabProject, int idMinValue, int idMaxValue) {
        this.gitlabHost = gitlabHost;
        this.gitlabUser = gitlabUser;
        this.gitlabPass = gitlabPass;
        this.gitlabGroup = gitlabGroup;
        this.gitLabProject = gitLabProject;
        this.idMinValue = idMinValue;
        this.idMaxValue = idMaxValue;

        init();
    }

    private void init() {
        try {
            localBaseDir = Files.createTempDirectory(gitlabGroup);
            localRepoDir = Files.createDirectories(Paths.get(localBaseDir.toString(), ITEM_BANK_USER.parseUsername(),
                gitLabProject));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        gitlabProperties = new ItemBankProperties();
        gitlabProperties.setGroup(gitlabGroup);
        gitlabProperties.setHost(gitlabHost);
        gitlabProperties.setIdMinValue(idMinValue);
        gitlabProperties.setIdMaxValue(idMinValue);
        gitlabProperties.setUser(gitlabUser);
        gitlabProperties.setPassword(gitlabUser);
        gitlabProperties.setLocalBaseDir(localBaseDir.toString());
    }

    // ------------------------------------------------------------------------

    /**
     * Deletes the temp directory and all its contents.
     */
    public void cleanup() {
        deleteDirectory(localBaseDir);
    }

    public void deleteDirectory(Path directoryToDelete) {
        if (Files.exists(directoryToDelete) && Files.isDirectory(directoryToDelete)) {
            log.info("deleting {}", directoryToDelete.toString());
            try {
                Files.walk(directoryToDelete, FileVisitOption.FOLLOW_LINKS)
                    .sorted(Comparator.reverseOrder())
                    .map(Path::toFile)
                    .peek(System.out::println)
                    .forEach(File::delete);
            } catch (Exception e) {
                throw new RuntimeException("Error trying to delete a directory", e);
            }
        }
    }

    // ------------------------------------------------------------------------

    public ItemChangeRequest newItemChangeRequest()  {
        final SaItem item = newSaItem();
        item.setWorkflowStatusCode(WORKFLOW_STATUS_DRAFT);
        final ItemChangeRequest req = new ItemChangeRequest();
        req.setMessage(COMMIT_MESSAGE);
        req.setItem(item);
        return req;
    }

    // ------------------------------------------------------------------------

    public SaItem newSaItem() {
        final SaItem item = (SaItem) itemFactory.newItem(ITEM_ID, TYPE_SA);
        item.setPrompt(PROMPT);
        item.setExemplarResponses(newArrayList(EXEMPLAR_RESPONSE_1, EXEMPLAR_RESPONSE_2));
        return item;
    }

    public WerItem newWerItem() {
        final WerItem item = (WerItem) itemFactory.newItem(ITEM_ID, TYPE_WER);
        item.setPrompt(PROMPT_RICH_TEXT);
        item.setExemplarResponses(newArrayList(EXEMPLAR_RESPONSE_1, EXEMPLAR_RESPONSE_2));
        return item;
    }

    public ItemRelease newSaaifSaItem() {
        final SaItem item = newSaItem();
        return item.newSaaifItem(BANK_KEY);
    }

    public ItemRelease newSaaifWerItem() {
        final WerItem item = newWerItem();
        return item.newSaaifItem(BANK_KEY);
    }
}
