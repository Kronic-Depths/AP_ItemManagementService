/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.client;

import java.io.IOException;
import java.util.List;

import org.assertj.core.util.Lists;
import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.NamespaceApi;
import org.gitlab4j.api.ProjectApi;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.models.Project;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.util.IMSTestUtil;
import org.opentestsystem.ap.ims.util.SystemException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.GROUP_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class GitlabClientTest {

    private final IMSTestUtil testUtil = new IMSTestUtil();

    private final GitLabApiException exception = new GitLabApiException("GitLab API Error");

    @Mock
    private ItemBankProperties mockGitlabProperties;

    @Mock
    private GitLabApi mockGitLabApi;

    @Mock
    private Namespace mockGroup;

    @Mock
    private Project mockProject;

    @Mock
    private ProjectApi mockProjectApi;

    @Mock
    private NamespaceApi mockNamespaceApi;

    @Mock
    private Namespace mockNamespace;

    private ItemBankProperties props;

    private GitlabClient gitlabClient;

    private GitlabClient spyGitlabClient;


    @Before
    public void setup() throws IOException {
        props = testUtil.getGitlabProperties();

        gitlabClient = new GitlabClient(mockGitlabProperties);
        gitlabClient.setGitLabApi(mockGitLabApi);
        gitlabClient.setGroup(mockGroup);

        spyGitlabClient = spy(gitlabClient);

        when(mockGitlabProperties.getGroup()).thenReturn(props.getGroup());
        when(mockGitlabProperties.getHost()).thenReturn(props.getHost());
        when(mockGitlabProperties.getUser()).thenReturn(props.getUser());
        when(mockGitlabProperties.getPassword()).thenReturn(props.getPassword());

        when(mockGitLabApi.getProjectApi()).thenReturn(mockProjectApi);
        when(mockGitLabApi.getNamespaceApi()).thenReturn(mockNamespaceApi);

        when(mockGroup.getId()).thenReturn(GROUP_ID);
    }

    @Test
    public void itShouldCreateGitLabApi() {
        final GitLabApi gitLabApi = gitlabClient.createGitLabApi();

        assertThat(gitLabApi).isNotNull();

        verify(mockGitlabProperties, times(1)).getHost();
        verify(mockGitlabProperties, times(1)).getAccessToken();
    }

    @Test
    public void itShouldInitialize() {
        doReturn(mockGitLabApi).when(spyGitlabClient).createGitLabApi();
        doReturn(mockGroup).when(spyGitlabClient).lookupGroup();

        spyGitlabClient.initialize();

        verify(spyGitlabClient, times(1)).setGitLabApi(mockGitLabApi);
        verify(spyGitlabClient, times(1)).setGroup(mockGroup);
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowWhenDeletingProject() throws GitLabApiException {
        doReturn(mockProject).when(spyGitlabClient).lookupProjectByName(ITEM_ID);
        doThrow(exception).when(mockProjectApi).deleteProject(mockProject);
        spyGitlabClient.deleteProject(ITEM_ID);
    }

    @Test
    public void itShouldDeleteProject() throws GitLabApiException {
        doReturn(mockProject).when(spyGitlabClient).lookupProjectByName(ITEM_ID);
        spyGitlabClient.deleteProject(ITEM_ID);
        verify(mockProjectApi, times(1)).deleteProject(mockProject);
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowWhenLookingUpProjectByName() throws GitLabApiException {
        doThrow(exception).when(mockProjectApi).getProject(props.getGroup(), ITEM_ID);
        gitlabClient.lookupProjectByName(ITEM_ID);
        verify(mockProjectApi, times(1)).getProject(props.getGroup(), ITEM_ID);
    }

    @Test
    public void itShouldLookupProjectByName() throws GitLabApiException {
        gitlabClient.lookupProjectByName(ITEM_ID);
        verify(mockProjectApi, times(1)).getProject(props.getGroup(), ITEM_ID);
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowSystemExceptionWhenCreatingProject() throws GitLabApiException {
        doThrow(exception).when(mockProjectApi).createProject(GROUP_ID, ITEM_ID);
        gitlabClient.createProject(ITEM_ID);
    }

    @Test
    public void itShouldCreateProject() throws GitLabApiException {
        gitlabClient.createProject(ITEM_ID);
        verify(mockProjectApi, times(1)).createProject(GROUP_ID, ITEM_ID);
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowWhenLookingUpGroupAndNoGroupIsFound() throws GitLabApiException {
        when(mockNamespaceApi.findNamespaces(props.getGroup())).thenReturn(null);
        final Namespace namespace = gitlabClient.lookupGroup();
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowWhenLookingUpGroup() throws GitLabApiException {
        when(mockNamespaceApi.findNamespaces(props.getGroup())).thenThrow(exception);
        final Namespace namespace = gitlabClient.lookupGroup();
    }

    @Test
    public void itShouldLookupGroup() throws GitLabApiException {
        final List<Namespace> namespaces = Lists.newArrayList(mockNamespace);
        when(mockNamespaceApi.findNamespaces(props.getGroup())).thenReturn(namespaces);

        final Namespace namespace = gitlabClient.lookupGroup();

        verify(mockGitlabProperties, times(1)).getGroup();
        assertThat(namespace).isEqualTo(mockNamespace);
    }

}
