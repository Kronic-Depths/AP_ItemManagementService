/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.client;

import java.io.IOException;

import org.gitlab.api.GitlabAPI;
import org.gitlab.api.http.GitlabHTTPRequestor;
import org.gitlab.api.models.GitlabGroup;
import org.gitlab.api.models.GitlabProject;
import org.gitlab.api.models.GitlabSession;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.util.IMSTestUtil;
import org.opentestsystem.ap.ims.util.SystemException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.GROUP_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.PROJECT_ID;

@RunWith(MockitoJUnitRunner.class)
public class GitlabClientTest {

    private final IMSTestUtil TEST_UTIL = new IMSTestUtil();

    private final IOException ioException = new IOException("IO Error");

    @Mock
    private ItemBankProperties mockGitlabProperties;

    @Mock
    private GitlabSession mockGitLabSession;

    @Mock
    private GitlabAPI mockGitlabApi;

    @Mock
    private GitlabGroup mockGitlabGroup;

    @Mock
    private GitlabHTTPRequestor mockGitlabRequestor;

    @Mock
    private GitlabProject mockGitlabProject;

    private String gitLabProjectLookupBaseUrl;

    private ItemBankProperties props;

    private GitlabClient gitlabClient;

    private GitlabClient spyGitlabClient;

    @Before
    public void setup() throws IOException {
        props = TEST_UTIL.getGitlabProperties();

        gitLabProjectLookupBaseUrl = GitlabProject.URL + "/" + props.getGroup() + "%2F";

        gitlabClient = new GitlabClient(mockGitlabProperties);
        gitlabClient.setGitlabSession(mockGitLabSession);
        gitlabClient.setGitlabApi(mockGitlabApi);
        gitlabClient.setGitlabGroup(mockGitlabGroup);
        gitlabClient.setGitLabProjectLookupBaseUrl(gitLabProjectLookupBaseUrl);

        spyGitlabClient = spy(gitlabClient);

        when(mockGitlabProperties.getGroup()).thenReturn(props.getGroup());
        when(mockGitlabProperties.getHost()).thenReturn(props.getHost());
        when(mockGitlabProperties.getUser()).thenReturn(props.getUser());
        when(mockGitlabProperties.getPassword()).thenReturn(props.getPassword());

        when(mockGitlabApi.getGroup(props.getGroup())).thenReturn(mockGitlabGroup);

        when(mockGitlabGroup.getId()).thenReturn(GROUP_ID);
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowWhenCreatingSession() {
        gitlabClient.createSession();
    }

    @Test
    public void itShouldCreateGitlabAPI() {
        final GitlabAPI gitlabAPI = gitlabClient.createGitlabAPI();

        assertThat(gitlabAPI).isNotNull();

        verify(mockGitlabProperties, times(1)).getHost();
        verify(mockGitLabSession, times(1)).getPrivateToken();
    }

    @Test
    public void itShouldInitialize() {
        doReturn(mockGitLabSession).when(spyGitlabClient).createSession();
        doReturn(mockGitlabApi).when(spyGitlabClient).createGitlabAPI();
        doReturn(mockGitlabGroup).when(spyGitlabClient).lookupGroup();

        spyGitlabClient.initialize();

        verify(spyGitlabClient, times(1)).setGitlabSession(mockGitLabSession);
        verify(spyGitlabClient, times(1)).setGitlabApi(mockGitlabApi);
        verify(spyGitlabClient, times(1)).setGitlabGroup(mockGitlabGroup);
        verify(spyGitlabClient, times(1)).setGitLabProjectLookupBaseUrl(gitLabProjectLookupBaseUrl);
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowWhenDeletingProject() throws IOException {
        doReturn(mockGitlabProject).when(spyGitlabClient).lookupProjectByName(ITEM_ID);
        when(mockGitlabProject.getId()).thenReturn(PROJECT_ID);

        doThrow(ioException).when(mockGitlabApi).deleteProject(PROJECT_ID);

        spyGitlabClient.deleteProject(ITEM_ID);
    }

    @Test
    public void itShouldDeleteProject() throws IOException {
        doReturn(mockGitlabProject).when(spyGitlabClient).lookupProjectByName(ITEM_ID);
        when(mockGitlabProject.getId()).thenReturn(PROJECT_ID);

        spyGitlabClient.deleteProject(ITEM_ID);

        verify(mockGitlabApi, times(1)).deleteProject(PROJECT_ID);
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowWhenLookingUpProjectByName() throws IOException {
        when(mockGitlabApi.retrieve()).thenReturn(mockGitlabRequestor);
        when(mockGitlabRequestor.to(gitLabProjectLookupBaseUrl + ITEM_ID, GitlabProject.class)).thenThrow(ioException);

        gitlabClient.lookupProjectByName(ITEM_ID);
    }

    @Test
    public void itShouldLookupProjectByName() throws IOException {
        when(mockGitlabApi.retrieve()).thenReturn(mockGitlabRequestor);

        gitlabClient.lookupProjectByName(ITEM_ID);

        verify(mockGitlabRequestor, times(1)).to(gitLabProjectLookupBaseUrl + ITEM_ID, GitlabProject.class);
    }

    @SuppressWarnings("deprecation")
    @Test(expected = SystemException.class)
    public void itShouldThrowSystemExceptionWhenCreatingProject() throws IOException {
        final IOException ioException = new IOException("IO exception");

        when(mockGitlabApi.createProject(ITEM_ID, GROUP_ID, null,
            Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, 0, null))
            .thenThrow(ioException);

        gitlabClient.createProject(ITEM_ID);
    }

    @SuppressWarnings("deprecation")
    @Test
    public void itShouldCreateProject() throws IOException {
        gitlabClient.createProject(ITEM_ID);

        verify(mockGitlabApi, times(1)).createProject(ITEM_ID, GROUP_ID, null,
            Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, 0, null);
    }

    @Test(expected = SystemException.class)
    public void itShouldThrowWhenLookingUpGroup() throws IOException {
        when(mockGitlabApi.getGroup(props.getGroup())).thenThrow(ioException);
        final GitlabGroup gitlabGroup = gitlabClient.lookupGroup();
    }

    @Test
    public void itShouldLookupGroup() throws IOException {
        final GitlabGroup gitlabGroup = gitlabClient.lookupGroup();
        verify(mockGitlabApi, times(1)).getGroup(props.getGroup());
        verify(mockGitlabProperties, times(1)).getGroup();
    }

}
