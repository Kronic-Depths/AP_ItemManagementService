/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.client;

import org.eclipse.jgit.api.AddCommand;
import org.eclipse.jgit.api.CloneCommand;
import org.eclipse.jgit.api.CommitCommand;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.PushCommand;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.lib.StoredConfig;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.config.GitlabProperties;
import org.opentestsystem.ap.ims.util.ItemAssembler;
import org.opentestsystem.ap.ims.util.GitTestUtil;

import java.io.File;
import java.nio.file.Files;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.ims.client.GitClient.GIT_CONFIG_USER;
import static org.opentestsystem.ap.ims.client.GitClient.GIT_CONFIG_USER_EMAIL;
import static org.opentestsystem.ap.ims.client.GitClient.GIT_CONFIG_USER_NAME;
import static org.opentestsystem.ap.ims.client.GitClient.README_FILE;
import static org.opentestsystem.ap.ims.util.GitTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.GitTestUtil.ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class GitClientImplTest {

    @Mock
    private Git mockGit;

    @Mock
    private Repository mockRepository;

    @Mock
    private StoredConfig mockConfig;

    @Mock
    private CloneCommand mockCloneCommand;

    @Mock
    private AddCommand mockAddCommand;

    @Mock
    private CommitCommand mockCommitCommand;

    @Mock
    private PushCommand mockPushCommand;

    @Mock
    private ItemAssembler mockItemAssembler;

    private GitClient spyGitClient;

    private GitClient gitClient;

    private GitTestUtil gitTestUtil;

    private GitlabProperties gitlabProperties;

    @Before
    public void setup() {

        gitTestUtil = new GitTestUtil();
        gitlabProperties = gitTestUtil.getGitlabProperties();

        gitClient = new GitClient(gitTestUtil.getGitlabProperties(), ITEM_BANK_USER, ITEM_ID, mockItemAssembler);
        gitClient.setGit(mockGit);

        spyGitClient = spy(gitClient);
    }

    @After
    public void teardown() {
        if (gitTestUtil != null) {
            gitTestUtil.cleanup();
        }
    }

    // ------------------------------------------------------------------------

    @Test
    public void itShouldCloneRemoteRepository() throws GitAPIException {
        setMocksForCloneRepository();
        spyGitClient.cloneRemoteRepository();
        assertCloneRepository();
    }

    @Test
    public void itShouldCloneRepository() throws GitAPIException {
        setMocksForCloneRepository();

        final Git git = spyGitClient.cloneRepository();

        assertThat(git).isEqualTo(mockGit);
        assertCloneRepository();
    }

    private void setMocksForCloneRepository() throws GitAPIException {
        when(mockCloneCommand.setURI(anyString())).thenReturn(mockCloneCommand);

        when(mockCloneCommand.setDirectory(any(File.class))).thenReturn(mockCloneCommand);

        when(mockCloneCommand.setCredentialsProvider(any(UsernamePasswordCredentialsProvider.class)))
            .thenReturn(mockCloneCommand);

        when(mockCloneCommand.call()).thenReturn(mockGit);

        when(spyGitClient.cloneCommand()).thenReturn(mockCloneCommand);

        doNothing().when(spyGitClient).setUserInfo();
    }

    private void assertCloneRepository() throws GitAPIException {
        verify(mockCloneCommand, times(1)).setURI(anyString());
        verify(mockCloneCommand, times(1)).setDirectory(any(File.class));
        verify(mockCloneCommand, times(1)).setCredentialsProvider(any(UsernamePasswordCredentialsProvider.class));
        verify(mockCloneCommand, times(1)).call();
    }

    @Test
    public void itShouldPush() throws GitAPIException {
        when(mockPushCommand.setCredentialsProvider(any(UsernamePasswordCredentialsProvider.class))).thenReturn
            (mockPushCommand);
        when(mockGit.push()).thenReturn(mockPushCommand);

        gitClient.push();

        verify(mockPushCommand, times(1)).setCredentialsProvider(any(UsernamePasswordCredentialsProvider.class));
        verify(mockPushCommand, times(1)).call();
    }

    @Test
    public void itShouldCommitWhenMessagePresent() throws GitAPIException {
        final String message = "Test Commit Message";

        when(mockCommitCommand.setMessage(message)).thenReturn(mockCommitCommand);
        when(mockGit.commit()).thenReturn(mockCommitCommand);

        gitClient.commit(message);

        verify(mockCommitCommand, times(1)).setMessage(message);
        verify(mockCommitCommand, times(1)).call();
    }

    @Test
    public void itShouldCommitWhenMessageNotPresent() throws GitAPIException {
        when(mockGit.commit()).thenReturn(mockCommitCommand);

        gitClient.commit(null);

        verify(mockCommitCommand, never()).setMessage(anyString());
        verify(mockCommitCommand, times(1)).call();
    }

    @Test
    public void itShouldAddReadMe() throws GitAPIException {
        when(mockAddCommand.addFilepattern(README_FILE)).thenReturn(mockAddCommand);
        when(mockGit.add()).thenReturn(mockAddCommand);

        gitClient.addReadMe();

        verify(mockAddCommand, times(1)).addFilepattern(README_FILE);
        verify(mockAddCommand, times(1)).call();
    }

    @Test
    public void itShouldWriteReadMeFileToLocalGitRepository() {
        gitClient.writeEmptyReadMe();
        assertThat(new File(gitTestUtil.getLocalRepoDir().toString() + "/" + README_FILE).isFile())
            .isEqualTo(true);
    }

    @Test
    public void itShouldGenerateRepositoryURI() {
        final String expected = String.format("%s/%s/%s.git",
            gitTestUtil.getGitlabHost(),
            gitTestUtil.getGitlabGroup(),
            gitTestUtil.getGitLabProject());

        final String actual = gitClient.generateRepositoryURI(gitTestUtil.getGitLabProject());

        assertThat(actual).isEqualTo(expected);
    }

    @Test
    public void itShouldDeleteDirectory() {
        // setup creates the directories
        assertThat(Files.exists(gitTestUtil.getLocalRepoDir())).isEqualTo(true);
        assertThat(Files.isDirectory(gitTestUtil.getLocalRepoDir())).isEqualTo(true);

        gitClient.deleteDirectory(gitTestUtil.getLocalRepoDir());

        assertThat(Files.exists(gitTestUtil.getLocalRepoDir())).isEqualTo(false);
    }

    @Test
    public void itShouldsetUserInfo() {
        final String username = "johndoe@fake.com";
        final String fullname = "John Doe";


        when(mockRepository.getConfig()).thenReturn(mockConfig);
        when(mockGit.getRepository()).thenReturn(mockRepository);

        gitClient.setUserInfo();

        verify(mockConfig, times(1)).setString(GIT_CONFIG_USER, null, GIT_CONFIG_USER_NAME, ITEM_BANK_USER
            .getFullname());
        verify(mockConfig, times(1)).setString(GIT_CONFIG_USER, null, GIT_CONFIG_USER_EMAIL, ITEM_BANK_USER
            .getUsername());
    }


}
