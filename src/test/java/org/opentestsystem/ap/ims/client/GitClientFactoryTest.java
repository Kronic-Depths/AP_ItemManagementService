/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.client;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.ims.util.IMSTestUtil;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.ap.ims.util.ItemMapper;
import org.opentestsystem.ap.ims.util.SaaifAssembler;
import org.opentestsystem.saaif.item.SaaifItemFactory;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.ims.util.IMSTestUtil.ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class GitClientFactoryTest {

    private static final IMSTestUtil TEST_UTIL = new IMSTestUtil();

    @Mock
    private GitlabClient mockGitlabClient;

    @Mock
    private GitClient mockGitClient;

    @Mock
    private SaaifAssembler mockSaaifAssembler;

    @Mock
    private SaaifItemFactory mockSaaifItemFactory;

    @Mock
    private ItemMapper mockItemMapper;

    @Mock
    private ItemIdGenerator mockItemIdGenerator;

    private GitClientFactory factory;

    private GitClientFactory spyFactory;

    @Before
    public void setup() {
        factory = new GitClientFactory(mockGitlabClient,
            TEST_UTIL.getGitlabProperties(),
            mockSaaifAssembler,
            mockSaaifItemFactory,
            mockItemMapper,
            mockItemIdGenerator);

        spyFactory = spy(factory);

        doReturn(mockGitClient).when(spyFactory).newGitClient(ITEM_BANK_USER, ITEM_ID);
    }

    @Test
    public void itShouldCreateAndCloneRemoteRepository() {
        spyFactory.cloneRemoteRepository(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitClient, times(1)).cloneRemoteRepository();
    }

    @Test
    public void itShouldCreateAndOpenRepository() {
        spyFactory.openRepository(ITEM_BANK_USER, ITEM_ID);
        verify(mockGitClient, times(1)).openOrClone();
    }

    @Test
    public void itShouldCreateNewGitClient() {
        final GitClient gitClient = factory.newGitClient(ITEM_BANK_USER, ITEM_ID);
        assertThat(gitClient).isNotNull();
    }
}
