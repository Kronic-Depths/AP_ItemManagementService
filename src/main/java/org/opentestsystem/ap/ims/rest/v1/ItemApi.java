/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.rest.v1;

import java.util.List;

import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemDiff;
import org.opentestsystem.ap.common.model.ItemHistory;
import org.opentestsystem.ap.ims.entity.WorkflowStatus;
import org.opentestsystem.ap.ims.rest.BeginTransactionRequest;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;
import org.opentestsystem.ap.ims.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Operations on items in the item bank.
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/items")
@Api
public class ItemApi {

    private final ItemService itemService;

    @Autowired
    public ItemApi(final ItemService itemService) {
        this.itemService = itemService;
    }

    // ------------------------------------------------------------------------

    /**
     * Finds and returns the item from the item bank.  Returns
     * a 404 if the item is not found.
     *
     * @param itemId The unique item identifier.
     * @return The item.
     */
    @GetMapping("/{itemId}")
    public Item getItem(@PathVariable final String itemId) {
        log.debug("find item {}", itemId);
        final Item item = itemService.findItem(itemId);
        return item;
    }

    /**
     * A list of changes associated with an item.
     *
     * @param itemId The unique item identifier.
     * @return The changes associated with an item.
     */
    @GetMapping("/{itemId}/history")
    public List<ItemHistory> getItemHistory(@PathVariable final String itemId) {
        log.debug("find item {}", itemId);
        final List<ItemHistory> itemHistory = itemService.findItemHistory(itemId);
        return itemHistory;
    }

    /**
     * A list of changes associated with an item.
     *
     * @param itemId The unique item identifier.
     * @return The changes associated with an item.
     */
    @GetMapping("/{itemId}/diff/{historyId}")
    public List<ItemDiff> getItemDiff(@PathVariable final String itemId,
                                      @PathVariable final String historyId) {
        log.debug("find item {}, historyId {}", itemId, historyId);
        final List<ItemDiff> itemDiff = itemService.findItemDiff(itemId, historyId);
        return itemDiff;
    }


    // ------------------------------------------------------------------------
    // POST requests - Create Item
    // ------------------------------------------------------------------------

    /**
     * Create an item in the item bank.  It is not viewable by anyone
     * other than the user that created it.
     *
     * @return The new item with its ID and transaction ID set.
     */
    @PostMapping("/transactions")
    public Item beginCreateTransaction(@RequestBody final BeginTransactionRequest request) {
        log.debug("create new item");
        return itemService.beginCreateTransaction(request.getType(), request.getMessage());
    }

    /**
     * s
     * Puts the item in edit mode.  The user making the request is now the editor.
     *
     * @param itemId The item to begin editing.
     */
    @PostMapping("/{itemId}/transactions")
    public Item beginEditTransaction(@PathVariable final String itemId,
                                     @RequestBody final BeginTransactionRequest request) {
        log.debug("begin editing item {}", itemId);
        return itemService.beginEditTransaction(itemId, request.getMessage());
    }

    /**
     * Saves changes made to the item.
     *
     * @param itemId            The item to save.
     * @param transactionId     The transaction to save changes to.
     * @param itemChangeRequest The changes to save.
     */
    @PatchMapping("/{itemId}/transactions/{transactionId}")
    public void saveTransaction(@PathVariable final String itemId,
                                @PathVariable final String transactionId,
                                @RequestBody  final ItemChangeRequest itemChangeRequest) {
        log.debug("save item {}, transaction {}", itemId, transactionId);
        itemService.saveTransaction(itemId, transactionId, itemChangeRequest);
    }

    /**
     * Merge the scratch pad branch to the master branch.  The scratch pad branch is deleted.  The net effect
     * is the item is open for editing.
     *
     * @param itemId            The item's unique identifier.
     * @param transactionId     The transaction to commit.
     * @param itemChangeRequest The changes to save.
     */
    @PutMapping("/{itemId}/transactions/{transactionId}")
    public void commitTransaction(@PathVariable final String itemId,
                                  @PathVariable final String transactionId,
                                  @RequestBody  final ItemChangeRequest itemChangeRequest) {
        log.debug("commit new item {}", itemId);
        itemService.commitTransaction(itemId, transactionId, itemChangeRequest);
    }

    /**
     * Delete's an item from the item bank.
     *
     * @param itemId        The item to delete.
     * @param transactionId The transaction to delete.
     */
    @DeleteMapping("/{itemId}/transactions/{transactionId}")
    public void rollbackTransaction(@PathVariable final String itemId,
                                    @PathVariable final String transactionId) {
        log.debug("delete new item {}", itemId);
        itemService.rollbackTransaction(itemId, transactionId);
    }

    @GetMapping("/workflow-statuses")
    public List<WorkflowStatus> getWorkflowStatuses() {
        return itemService.findAllWorkflowStatus();
    }
}
