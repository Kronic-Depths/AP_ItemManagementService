/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.rest.v1;

import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ims.model.Item;
import org.opentestsystem.ap.ims.rest.ItemRequestWrapper;
import org.opentestsystem.ap.ims.rest.CreateNewItemRequest;
import org.opentestsystem.ap.ims.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import static org.opentestsystem.ap.ims.util.AppConstants.API_V1;

/**
 * Operations on items in the item bank.
 */
@Slf4j
@RestController
@RequestMapping("${api.context-path}/" + API_V1 + "/items")
@Api
public class ItemApi {

    private final ItemService itemService;

    @Autowired
    public ItemApi(final ItemService itemService) {
        this.itemService = itemService;
    }

    // ------------------------------------------------------------------------

    /**
     * Finds and returns the item from the item bank.  Returns
     * a 404 if the item is not found.
     *
     * @param itemId The unique item identifier.
     * @return The item.
     */
    @GetMapping("/{itemId}")
    public Item getItem(@PathVariable final String itemId) {
        log.debug("find item {}", itemId);
        final Item item = itemService.findItem(itemId);
        return item;
    }

    // ------------------------------------------------------------------------
    // POST requests - Create Item
    // ------------------------------------------------------------------------

    /**
     * Create an item in the item bank.  It is not viewable by anyone
     * other than the user that created it.
     *
     * @return The new item with its ID set.
     */
    @PostMapping("/begin")
    public Item createNewItem(@RequestBody final CreateNewItemRequest request) {
        log.debug("create new item");
        final Item item = itemService.createNewItem(request.getType());
        return item;
    }

    /**
     * Saves changes made to the item.
     *
     * @param itemId  The item to save.
     * @param item The changes to save.
     */
    @PostMapping("/{itemId}/save")
    public void saveNewItem(@PathVariable final String itemId, @RequestBody final Item item) {
        log.debug("save new item {}", itemId);
        itemService.saveItem(itemId, item);
    }

    /**
     * Merge the scratch pad branch to the master branch.  The scratch pad branch is deleted.  The net effect
     * is the item is open for editing.
     *
     * @param itemId The item's unique identifier
     */
    @PostMapping("/{itemId}/commit")
    public void commitNewItem(@PathVariable final String itemId,
                              @RequestBody final ItemRequestWrapper itemRequestWrapper) {
        log.debug("commit new item {}", itemId);
        itemService.saveItem(itemId, itemRequestWrapper.getItem());
        itemService.commitNewItem(itemId);
    }

    /**
     * Delete's an item from the item bank.
     *
     * @param itemId The item to delete.
     */
    @PostMapping("/{itemId}/rollback")
    public void deleteNewItem(@PathVariable final String itemId) {
        log.debug("delete new item {}", itemId);
        itemService.deleteNewItem(itemId);
    }

    // ------------------------------------------------------------------------
    // PUT requests - Edit Item
    // ------------------------------------------------------------------------

    /**
     * Puts the item in edit mode.  The user making the request is now the editor.
     *
     * @param itemId The item to begin editing.
     */
    @PutMapping("/{itemId}/begin")
    public void beginEdit(@PathVariable final String itemId) {
        log.debug("begin editing item {}", itemId);
        itemService.beginEditItem(itemId);
    }

    /**
     * Saves changes made to the item.
     *
     * @param itemId  The item to save.
     * @param item The changes to save.
     */
    @PutMapping("/{itemId}/save")
    public void saveEdit(@PathVariable final String itemId, @RequestBody final Item item) {
        log.debug("save edit changes for item {}", itemId);
        itemService.saveItem(itemId, item);
    }

    /**
     * Merge the scratch pad branch to the master branch.  The scratch pad branch is deleted.  The net effect
     * is the item is open for editing.
     *
     * @param itemId The item's unique identifier.
     */
    @PutMapping("/{itemId}/commit")
    public void commitEdit(@PathVariable final String itemId,
                           @RequestBody final ItemRequestWrapper itemRequestWrapper) {
        log.debug("commit editing item {}", itemId);
        itemService.saveItem(itemId, itemRequestWrapper.getItem());
        itemService.commitItem(itemId, itemRequestWrapper.getMessage());
    }

    /**
     * Delete's any changes made during the edit session.
     *
     * @param itemId The item to rollback changes for.
     */
    @PutMapping("/{itemId}/rollback")
    public void rollbackEdit(@PathVariable final String itemId) {
        log.debug("rollback edit changes for item {}", itemId);
        itemService.rollbackItem(itemId);
    }
}
