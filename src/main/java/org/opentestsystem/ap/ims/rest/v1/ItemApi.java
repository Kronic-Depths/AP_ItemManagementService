/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.rest.v1;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.service.ItemBankService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import static org.opentestsystem.ap.ims.util.AppConstants.API_V1;

/**
 * Operations on items.
 */
@Slf4j
@RestController
@RequestMapping("${api.context-path}/" + API_V1 + "/items")
public class ItemApi {

    private final ItemBankService itemBankService;

    @Autowired
    public ItemApi(ItemBankService itemBankService) {
        this.itemBankService = itemBankService;
    }

    /**
     * Create an item in the item bank.
     *
     * @return The item's unique identifier.
     */
    @PostMapping
    public Item createNewItem(@RequestBody Item request) {
        log.debug("create new item");
        final Item newItem = Item.ItemBuilder.anItem().build();
        newItem.setId(itemBankService.createItem(request));
        newItem.setType(request.getType());
        return newItem;
    }

    /**
     * Update an item using the given request body.
     *
     * @param itemId  The item's unique identifier
     * @param request The item data to save to the itembank.
     */
    @PutMapping("/{itemId}")
    public void updateItem(@PathVariable String itemId, @RequestBody Item request) {
        itemBankService.updateItem(itemId, request);
    }

    /**
     * Merge the scratch pad branch to the master branch.  The scratch pad branch is deleted.  The net effect
     * is the item is open for editing by anyone as the item is no longer being edited.
     *
     * @param itemId  The item's unique identifier
     */
    @PutMapping("/{itemId}/commit")
    public void commitChanges(@PathVariable String itemId) {
        itemBankService.commitItemChanges(itemId);
    }

    /**
     * Delete's an item from the item bank.
     *
     * @param itemId The item to delete.
     */
    @DeleteMapping("/{itemId}")
    public void deleteItem(@PathVariable String itemId) {
        itemBankService.deleteItem(itemId);
    }


}
