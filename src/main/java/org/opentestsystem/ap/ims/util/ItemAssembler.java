/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.util;

import org.opentestsystem.ap.ims.exception.SysException;
import org.opentestsystem.saaif.item.ItemRelease;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static javax.xml.bind.JAXBContext.newInstance;

/**
 * Assembles item entities to and from XML and JSON.  Writes and reads
 * data from files.  The files are XML or JSON format where
 * the assembler unmarshals the file data to an object.
 */
@Component
public class ItemAssembler {

    public static final boolean WITH_SCHEMA_VALIDATION = true;

    public static final boolean NO_SCHEMA_VALIDATION = false;

    public static final String SCHEMA_FILE = "SAAIF-Item.xsd";

    private static final SchemaFactory SCHEMA_FACTORY = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

    private static final String ECLIPSE_LINK_MEDIA_TYPE = "eclipselink.media-type";

    private static final String ECLIPSE_LINK_APPLICATION_JSON = "application/json";

    private Schema schema;

    public JAXBContext jaxbContext;

    @PostConstruct
    public void init() {
        try {
            schema = SCHEMA_FACTORY.newSchema(fileToSource(SCHEMA_FILE));
            jaxbContext = newInstance(ItemRelease.class);
        } catch (Exception e) {
            throw new RuntimeException("Error instantiating Schema or JAXBContext", e);
        }
    }

    // ------------------------------------------------------------------------

    public void writeXmlToFile(ItemRelease item, Path file) {
        try {
            Marshaller marshaller = xmlMarshaller(WITH_SCHEMA_VALIDATION);
            marshaller.marshal(item, Files.newOutputStream(file));
        } catch (Exception e) {
            throw new SysException("Error writing item to file", e);
        }
    }

    // ------------------------------------------------------------------------

    private Schema getSchema() throws Exception {
        return schema;
    }

    private JAXBContext getJaxbContext() throws Exception {
        return jaxbContext;
    }

    // --------------------------------

    private Unmarshaller jsonUnmarshaller(boolean setSchema) throws Exception {
        final Unmarshaller unmarshaller = unmarshaller();
        unmarshaller.setProperty(ECLIPSE_LINK_MEDIA_TYPE, ECLIPSE_LINK_APPLICATION_JSON);
        if (setSchema) {
            unmarshaller.setSchema(getSchema());
        }
        return unmarshaller;
    }

    private Marshaller jsonMarshaller(boolean setSchema) throws Exception {
        final Marshaller marshaller = marshaller();
        marshaller.setProperty(ECLIPSE_LINK_MEDIA_TYPE, ECLIPSE_LINK_APPLICATION_JSON);
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        if (setSchema) {
            marshaller.setSchema(getSchema());
        }
        return marshaller;
    }

    // --------------------------------

    private Unmarshaller xmlUnmarshaller(boolean setSchema) throws Exception {
        final Unmarshaller unmarshaller = unmarshaller();
        if (setSchema) {
            unmarshaller.setSchema(getSchema());
        }
        return unmarshaller;
    }

    private Marshaller xmlMarshaller(boolean setSchema) throws Exception {
        final Marshaller marshaller = marshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        if (setSchema) {
            marshaller.setSchema(getSchema());
        }
        return marshaller;
    }

    // --------------------------------

    private Unmarshaller unmarshaller() throws Exception {
        final Unmarshaller unmarshaller = getJaxbContext().createUnmarshaller();
        return unmarshaller;
    }

    private Marshaller marshaller() throws Exception {
        final Marshaller marshaller = getJaxbContext().createMarshaller();
        return marshaller;
    }

    // --------------------------------

    /**
     * Converts a file to a string.  The file should be on the classpath as this specifically
     * looks for system resource from the <code>ClassLoader</code>.
     *
     * @param file The name of the file to read from the classpath.
     * @return A string representation of the file.
     * @throws Exception
     */
    private String fileToString(String file) throws Exception {
        return new String(Files.readAllBytes(Paths.get(ClassLoader.getSystemResource(file).toURI())));
    }

    /**
     * Converts a file to a reader.  The file should be on the classpath as this specifically
     * looks for system resource from the <code>ClassLoader</code>.
     *
     * @param file The name of the file to read from the classpath.
     * @return A reader for the classpath file.
     * @throws Exception
     */
    private StringReader fileToReader(String file) throws Exception {
        return new StringReader(fileToString(file));
    }

    /**
     * Converts a file to a source.  The file should be on the classpath as this specifically
     * looks for system resource from the <code>ClassLoader</code>.
     *
     * @param file The name of the file to read from the classpath.
     * @return A source for the classpath file.
     * @throws Exception
     */
    private StreamSource fileToSource(String file) throws Exception {
        return new StreamSource(fileToReader(file));
    }

}
