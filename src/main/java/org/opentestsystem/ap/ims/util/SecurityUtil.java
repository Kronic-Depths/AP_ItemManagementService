/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.util;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.security.model.User;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

/**
 * Frontend utility component.
 */
@Component
public class SecurityUtil {

    public static final String USER_ANONYMOUS = "anonymous";

    /**
     * Gets the authenticated principal's username.
     *
     * @return The principal's username.
     */
    public String getUsername() {
        final Authentication authentication = getAuthentication();
        if (authentication == null) {
            return USER_ANONYMOUS;
        } else {
            final Object user = authentication.getPrincipal();
            if (user == null) {
                return USER_ANONYMOUS;
            } else if (user instanceof String) {
                return (String) user;
            } else {
                return ((UserDetails) user).getUsername();
            }
        }
    }

    /**
     * Gets the authenticated principal's fullname if provided.  If not provided
     * null is returned however, if there is no authentication provided this is
     * considered anonymous and so the fullname will be the value of the
     * <code>USER_ANONYMOUS</code> constant.
     *
     * @return The authenticated user's fullname or null if not provided.
     */
    public String getFullname() {
        String fullname = null;
        final Authentication authentication = getAuthentication();
        if (authentication == null) {
            fullname = USER_ANONYMOUS;
        } else {
            final Object user = authentication.getPrincipal();
            if (user != null && user instanceof User) {
                fullname = ((User) user).getFullName();
            }
        }
        return fullname;
    }

    @VisibleForTesting
    Authentication getAuthentication() {
        return SecurityContextHolder.getContext().getAuthentication();
    }
}
