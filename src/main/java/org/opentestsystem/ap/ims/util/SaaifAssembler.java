/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.util;

import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.annotation.PostConstruct;
import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.opentestsystem.saaif.item.ItemRelease;
import org.springframework.stereotype.Component;

import static javax.xml.bind.JAXBContext.newInstance;

/**
 * Assembles (marshals and unmarshals) SAAIF item entities to and from XML.
 * Reads and writes XML from files.
 */
@Component
public class SaaifAssembler {

    public static final boolean NO_SCHEMA_VALIDATION = false;

    public static final String SCHEMA_FILE = "SAAIF-Item.xsd";

    private static final SchemaFactory SCHEMA_FACTORY = SchemaFactory.newInstance(
        XMLConstants.W3C_XML_SCHEMA_NS_URI);

    private static final String ECLIPSE_LINK_MEDIA_TYPE = "eclipselink.media-type";

    private static final String ECLIPSE_LINK_APPLICATION_JSON = "application/json";

    private Schema schema;

    public JAXBContext jaxbContext;

    @PostConstruct
    public void init() {
        try(final InputStream is = this.getClass().getClassLoader().getResourceAsStream(SCHEMA_FILE)) {
            schema = SCHEMA_FACTORY.newSchema(new StreamSource(is));
            jaxbContext = newInstance(ItemRelease.class);
        } catch (Exception e) {
            throw new SystemException("Error instantiating Schema or JAXBContext", e);
        }
    }

    // ------------------------------------------------------------------------

    public ItemRelease readXmlFromFile(Path file) {
        try(final InputStream inputStream = Files.newInputStream(file)) {
            final Unmarshaller unmarshaller = xmlUnmarshaller();
            return (ItemRelease) unmarshaller.unmarshal(inputStream);
        } catch (Exception e) {
            throw new SystemException("Error writing item to file", e);
        }
    }

    public void writeXmlToFile(ItemRelease item, Path file) {
        try(final OutputStream outputStream = Files.newOutputStream(file)) {
            Marshaller marshaller = xmlMarshaller();
            marshaller.marshal(item, outputStream);
        } catch (Exception e) {
            throw new SystemException("Error writing item to file", e);
        }
    }

    // ------------------------------------------------------------------------

    private Unmarshaller jsonUnmarshaller(boolean setSchema) throws Exception {
        final Unmarshaller unmarshaller = unmarshaller();
        unmarshaller.setProperty(ECLIPSE_LINK_MEDIA_TYPE, ECLIPSE_LINK_APPLICATION_JSON);
        if (setSchema) {
            unmarshaller.setSchema(getSchema());
        }
        return unmarshaller;
    }

    private Marshaller jsonMarshaller(boolean setSchema) throws Exception {
        final Marshaller marshaller = marshaller();
        marshaller.setProperty(ECLIPSE_LINK_MEDIA_TYPE, ECLIPSE_LINK_APPLICATION_JSON);
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        if (setSchema) {
            marshaller.setSchema(getSchema());
        }
        return marshaller;
    }

    private Unmarshaller xmlUnmarshaller() throws Exception {
        return xmlUnmarshaller(NO_SCHEMA_VALIDATION);
    }

    private Unmarshaller xmlUnmarshaller(boolean setSchema) throws Exception {
        final Unmarshaller unmarshaller = unmarshaller();
        if (setSchema) {
            unmarshaller.setSchema(getSchema());
        }
        return unmarshaller;
    }

    private Marshaller xmlMarshaller() throws Exception {
        return xmlMarshaller(NO_SCHEMA_VALIDATION);
    }

    private Marshaller xmlMarshaller(boolean setSchema) throws Exception {
        final Marshaller marshaller = marshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        if (setSchema) {
            marshaller.setSchema(getSchema());
        }
        return marshaller;
    }

    private Unmarshaller unmarshaller() throws Exception {
        final Unmarshaller unmarshaller = getJaxbContext().createUnmarshaller();
        return unmarshaller;
    }

    private Marshaller marshaller() throws Exception {
        final Marshaller marshaller = getJaxbContext().createMarshaller();
        return marshaller;
    }

    private Schema getSchema() {
        return schema;
    }

    private JAXBContext getJaxbContext() {
        return jaxbContext;
    }
}
