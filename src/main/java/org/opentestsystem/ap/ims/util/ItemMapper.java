/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.util;

import java.util.List;
import javax.xml.bind.JAXBElement;

import org.apache.commons.collections.CollectionUtils;
import org.opentestsystem.ap.ims.entity.Content;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.entity.Rubric;
import org.opentestsystem.ap.ims.entity.Sample;
import org.opentestsystem.saaif.item.ItemRelease;
import org.opentestsystem.saaif.item.ObjectFactory;

/**
 * Maps IMS entities to/from SAAIF entities.
 */
public class ItemMapper {

    private ObjectFactory objectFactory = new ObjectFactory();

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param item The IMS entity {@link Item}
     * @return The SAAIF {@link ItemRelease.Item}
     */
    public ItemRelease.Item mapToSaaifItem(final Item item) {
        final ItemRelease.Item saaifItem = objectFactory.createItemreleaseItem();

        saaifItem.setId(item.getId());
        saaifItem.setFormat(item.getType());

        final List<Content> contents = item.getContents();

        if (CollectionUtils.isNotEmpty(contents)) {
            for (Content content : contents) {
                final ItemRelease.Item.Content saaifContent = mapToSaaifContent(content);
                saaifItem.getContent().add(saaifContent);
            }
        }

        return saaifItem;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param content The IMS entity {@link Content}
     * @return The SAAIF {@link ItemRelease.Item.Content}
     */
    public ItemRelease.Item.Content mapToSaaifContent(final Content content) {
        final ItemRelease.Item.Content saaifContent = objectFactory.createItemreleaseItemContent();

        saaifContent.setStem(content.getStem());
        saaifContent.setLanguage(content.getLanguage());

        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = mapToSaaifRubriclist(content.getRubrics());
        saaifContent.setRubriclist(saaifRubriclist);

        return saaifContent;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param rubrics A list of IMS entity {@link Rubric}
     * @return The SAAIF {@link ItemRelease.Item.Content.Rubriclist}
     */
    public ItemRelease.Item.Content.Rubriclist mapToSaaifRubriclist(final List<Rubric> rubrics) {
        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = objectFactory
            .createItemreleaseItemContentRubriclist();
        if (CollectionUtils.isNotEmpty(rubrics)) {
            for (int i = 0; i < rubrics.size(); ++i) {
                final Rubric rubric = rubrics.get(i);

                final JAXBElement<ItemRelease.Item.Content.Rubriclist.Rubric> saaifRubric
                    = objectFactory.createItemreleaseItemContentRubriclistRubric(mapToSaaifRubric(i, rubric));

                final JAXBElement<ItemRelease.Item.Content.Rubriclist.Samplelist> saaifSamplelist = objectFactory
                    .createItemreleaseItemContentRubriclistSamplelist(mapToSaaifSamplelist(i, rubric));

                saaifRubriclist.getContent().add(saaifRubric);
                saaifRubriclist.getContent().add(saaifSamplelist);
            }
        }
        return saaifRubriclist;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param index The index given to the SAAIF entity.
     * @param rubric The IMS entity {@link Rubric}
     * @return The SAAIF {@link ItemRelease.Item.Content.Rubriclist.Rubric}
     */
    public ItemRelease.Item.Content.Rubriclist.Rubric mapToSaaifRubric(final int index, final Rubric rubric) {
        final ItemRelease.Item.Content.Rubriclist.Rubric saaifRubric = objectFactory
            .createItemreleaseItemContentRubriclistRubric();

        saaifRubric.setIndex(index);
        saaifRubric.setName(rubric.getName());
        saaifRubric.setVal(rubric.getVal());
        saaifRubric.setScorepoint(rubric.getScorepoint());

        return saaifRubric;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param index The index given to the SAAIF entity.
     * @param rubric The IMS entity {@link Rubric}
     * @return The SAAIF {@link ItemRelease.Item.Content.Rubriclist.Samplelist}
     */
    public ItemRelease.Item.Content.Rubriclist.Samplelist mapToSaaifSamplelist(final int index, final Rubric rubric) {
        final ItemRelease.Item.Content.Rubriclist.Samplelist saaifSamplelist = objectFactory
            .createItemreleaseItemContentRubriclistSamplelist();

        saaifSamplelist.setIndex(index);
        saaifSamplelist.setMinval(toByte(rubric.getMinVal()));
        saaifSamplelist.setMaxval(toByte(rubric.getMaxVal()));

        if (rubric != null && CollectionUtils.isNotEmpty(rubric.getSamples())) {
            for (Sample sample : rubric.getSamples()) {
                final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample saaifSample = mapToSaaifSample(sample);
                saaifSamplelist.getSample().add(saaifSample);
            }
        }

        return saaifSamplelist;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param sample The IMS entity {@link Sample}
     * @return The SAAIF {@link ItemRelease.Item.Content.Rubriclist.Samplelist.Sample}
     */
    public ItemRelease.Item.Content.Rubriclist.Samplelist.Sample mapToSaaifSample(final Sample sample) {
        final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample saaifSample = objectFactory
            .createItemreleaseItemContentRubriclistSamplelistSample();

        saaifSample.setName(sample.getName());
        saaifSample.setPurpose(sample.getPurpose());
        saaifSample.setSamplecontent(sample.getSamplecontent());
        saaifSample.setScorepoint(toByte(sample.getScorepoint()));

        return saaifSample;
    }

    /**
     * Converts a String to a Byte. If null is passed in then null is returned.
     *
     * @param val The string to convert.
     * @return The Byte value of the String.
     */
    private Byte toByte(final String val) {
        return val != null ? Byte.valueOf(val) : null;
    }
}
