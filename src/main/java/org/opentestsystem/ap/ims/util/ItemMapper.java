/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.util;

import java.io.Serializable;
import java.util.List;
import javax.xml.bind.JAXBElement;

import org.apache.commons.collections.CollectionUtils;
import org.gitlab4j.api.models.Commit;
import org.opentestsystem.ap.ims.entity.Attribute;
import org.opentestsystem.ap.ims.entity.Content;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.entity.ItemHistory;
import org.opentestsystem.ap.ims.entity.Rubric;
import org.opentestsystem.ap.ims.entity.Sample;
import org.opentestsystem.saaif.item.ItemRelease;
import org.opentestsystem.saaif.item.ObjectFactory;
import org.opentestsystem.saaif.item.SaaifItemFactory;
import org.springframework.stereotype.Component;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Maps IMS entities to/from SAAIF entities.
 */
@Component
public class ItemMapper {

    private ObjectFactory objectFactory;

    private SaaifItemFactory saaifItemFactory;

    public ItemMapper() {
        objectFactory = new ObjectFactory();

        saaifItemFactory = new SaaifItemFactory();
    }

    // ------------------------------------------------------------------------
    // Map GitLab entity to IMS entity
    // ------------------------------------------------------------------------

    public ItemHistory mapToEntityItemHistory(final Commit gitlabCommit) {
        final ItemHistory itemHistory = ItemHistory.ItemHistoryBuilder
            .anItemHistory()
                .changedBy(gitlabCommit.getCommitterName())
                .changedOn(gitlabCommit.getCommittedDate())
                .changedByEmail(gitlabCommit.getCommitterEmail())
                .message(gitlabCommit.getMessage())
            .build();
        return itemHistory;
    }

    // ------------------------------------------------------------------------
    // Map SAAIF to IMS
    // ------------------------------------------------------------------------

    public Item mapToEntityItem(final ItemRelease.Item saaifItem) {

        final List<Attribute> attributes = mapToEntityAttributeList(saaifItem.getAttriblist());

        final List<Content> contents = mapToEntityContentList(saaifItem.getContent());

        return Item.ItemBuilder.anItem().id(saaifItem.getId()).type(saaifItem.getFormat()).attributes(attributes)
            .version(saaifItem.getVersion()).contents(contents).build();
    }

    public List<Attribute> mapToEntityAttributeList(final ItemRelease.Item.Attriblist saaifAttriblist) {
        final List<Attribute> attributeList = newArrayList();

        if (saaifAttriblist != null) {
            final List<ItemRelease.Item.Attriblist.Attrib> saaifAttribs = saaifAttriblist.getAttrib();

            if (CollectionUtils.isNotEmpty(saaifAttribs)) {
                for (ItemRelease.Item.Attriblist.Attrib saaifAttrib : saaifAttribs) {
                    final Attribute attribute = mapToEntityAttribute(saaifAttrib);
                    attributeList.add(attribute);
                }
            }
        }
        return attributeList;
    }

    public Attribute mapToEntityAttribute(final ItemRelease.Item.Attriblist.Attrib saaifAttrib) {
        return Attribute.AttributeBuilder.anAttribute().attid(saaifAttrib.getAttid()).name(saaifAttrib.getName()).val
            (saaifAttrib.getVal()).desc(saaifAttrib.getDesc()).build();
    }

    public List<Content> mapToEntityContentList(final List<ItemRelease.Item.Content> saaifContentList) {
        final List<Content> contentList = newArrayList();
        if (CollectionUtils.isNotEmpty(saaifContentList)) {
            for (ItemRelease.Item.Content saaifContent : saaifContentList) {
                final Content content = mapToEntityContent(saaifContent);
                contentList.add(content);
            }
        }
        return contentList;
    }

    public Content mapToEntityContent(final ItemRelease.Item.Content saaif) {
        // avoid null, use default instead
        final ItemRelease.Item.Content saaifContent = saaif != null ? saaif : this.saaifItemFactory.newDefaultContent();

        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = saaifContent.getRubriclist();

        List<Rubric> rubrics = newArrayList();

        if (saaifRubriclist != null) {
            rubrics = mapToEntityRubricList(saaifRubriclist.getContent());
        }

        Content content = Content.ContentBuilder.aContent().stem(saaifContent.getStem()).language(saaifContent
            .getLanguage()).rubrics(rubrics).build();

        return content;
    }

    public List<Rubric> mapToEntityRubricList(final List<Serializable> saaifRubricListItems) {
        final List<ItemRelease.Item.Content.Rubriclist.Rubric> saaifRubrics = newArrayList();
        final List<ItemRelease.Item.Content.Rubriclist.Samplelist> saaifSamplelists = newArrayList();

        final List<Rubric> rubrics = newArrayList();

        // collect the two instances into different lists
        if (CollectionUtils.isNotEmpty(saaifRubricListItems)) {
            for (Serializable rubricListItem : saaifRubricListItems) {
                JAXBElement element = (JAXBElement) rubricListItem;
                // it is expected Rubric and Samplelist match up in pairs, and assumed
                // the pairs are in sequence, finding a Rubric means the next item will be
                // its matched Samplelist (vice versa)
                if (ItemRelease.Item.Content.Rubriclist.Rubric.class.equals(element.getDeclaredType())) {
                    saaifRubrics.add((ItemRelease.Item.Content.Rubriclist.Rubric) element.getValue());
                } else if (ItemRelease.Item.Content.Rubriclist.Samplelist.class.equals(element.getDeclaredType())) {
                    saaifSamplelists.add((ItemRelease.Item.Content.Rubriclist.Samplelist) element.getValue());
                }
            }
        }

        // assuming there is a 1-to-1 between Rubric and Samplelist, and they are at the same index
        if (CollectionUtils.isNotEmpty(saaifRubrics) && CollectionUtils.isNotEmpty(saaifSamplelists)) {
            for (int i = 0; i < saaifRubrics.size(); ++i) {
                final Rubric rubric = mapToEntityRubric(saaifRubrics.get(i), saaifSamplelists.get(i));
                rubrics.add(rubric);
            }
        }

        return rubrics;
    }

    public Rubric mapToEntityRubric(final ItemRelease.Item.Content.Rubriclist.Rubric saaifRubric,
                                    final ItemRelease.Item.Content.Rubriclist.Samplelist saaifSamplelist) {
        final List<Sample> samples = newArrayList();

        if (CollectionUtils.isNotEmpty(saaifSamplelist.getSample())) {
            for (ItemRelease.Item.Content.Rubriclist.Samplelist.Sample saaifSample : saaifSamplelist.getSample()) {
                final Sample sample = mapToEntitySample(saaifSample);
                samples.add(sample);
            }
        }

        return Rubric.RubricBuilder.aRubric()
            .name(saaifRubric.getName())
            .scorepoint(saaifRubric.getScorepoint())
            .val(saaifRubric.getVal())
            .minVal(toString(saaifSamplelist.getMinval()))
            .maxVal(toString(saaifSamplelist.getMaxval()))
            .samples(samples)
            .build();
    }

    public final Sample mapToEntitySample(final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample
                                              saaifSample) {
        return Sample.SampleBuilder.aSample()
            .name(saaifSample.getName())
            .purpose(saaifSample.getPurpose())
            .sampleContent(saaifSample.getSamplecontent())
            .scorepoint(toString(saaifSample.getScorepoint()))
            .build();
    }


    // ------------------------------------------------------------------------
    // Map IMS to SAAIF
    // ------------------------------------------------------------------------

    public ItemRelease mapToSaaifAssesmentItem(final Item item) {
        final ItemRelease.Item saaifItem = mapToSaaifItem(item);
        return saaifItemFactory.newAssessmentItem(saaifItem);
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param item The IMS entity {@link Item}
     * @return The SAAIF {@link ItemRelease.Item}
     */
    public ItemRelease.Item mapToSaaifItem(final Item item) {
        final ItemRelease.Item saaifItem = objectFactory.createItemreleaseItem();

        if (item != null) {
            saaifItem.setId(item.getId());
            saaifItem.setFormat(item.getType());
            saaifItem.setVersion(item.getVersion());

            final List<Content> contents = item.getContents();

            final ItemRelease.Item.Attriblist saaifAttriblist = mapToSaaifAttriblist(item.getAttributes());
            saaifItem.setAttriblist(saaifAttriblist);

            if (CollectionUtils.isNotEmpty(contents)) {
                for (Content content : contents) {
                    final ItemRelease.Item.Content saaifContent = mapToSaaifContent(content);
                    saaifItem.getContent().add(saaifContent);
                }
            }
        }

        return saaifItem;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param attributes A list of IMS entity {@link Attribute}
     * @return The SAAIF {@link ItemRelease.Item.Attriblist}
     */
    public ItemRelease.Item.Attriblist mapToSaaifAttriblist(List<Attribute> attributes) {
        final ItemRelease.Item.Attriblist saaifAttributes = objectFactory.createItemreleaseItemAttriblist();
        if (CollectionUtils.isNotEmpty(attributes)) {
            for (Attribute attribute : attributes) {
                final ItemRelease.Item.Attriblist.Attrib saaifAttrib = mapToSaaifAttrib(attribute);
                saaifAttributes.getAttrib().add(saaifAttrib);
            }
        }
        return saaifAttributes;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param attribute The IMS entity {@link Attribute}
     * @return The SAAIF {@link ItemRelease.Item.Attriblist.Attrib}
     */
    public ItemRelease.Item.Attriblist.Attrib mapToSaaifAttrib(Attribute attribute) {
        final ItemRelease.Item.Attriblist.Attrib saaifAttrib = objectFactory.createItemreleaseItemAttriblistAttrib();
        saaifAttrib.setAttid(attribute.getAttid());
        saaifAttrib.setName(attribute.getName());
        saaifAttrib.setVal(attribute.getVal());
        saaifAttrib.setDesc(attribute.getDesc());
        return saaifAttrib;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param content The IMS entity {@link Content}
     * @return The SAAIF {@link ItemRelease.Item.Content}
     */
    public ItemRelease.Item.Content mapToSaaifContent(final Content content) {
        final ItemRelease.Item.Content saaifContent = objectFactory.createItemreleaseItemContent();

        saaifContent.setStem(content.getStem());
        saaifContent.setLanguage(content.getLanguage());

        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = mapToSaaifRubriclist(content.getRubrics());
        saaifContent.setRubriclist(saaifRubriclist);

        return saaifContent;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param rubrics A list of IMS entity {@link Rubric}
     * @return The SAAIF {@link ItemRelease.Item.Content.Rubriclist}
     */
    public ItemRelease.Item.Content.Rubriclist mapToSaaifRubriclist(final List<Rubric> rubrics) {
        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = objectFactory
            .createItemreleaseItemContentRubriclist();
        if (CollectionUtils.isNotEmpty(rubrics)) {
            for (int i = 0; i < rubrics.size(); ++i) {
                final Rubric rubric = rubrics.get(i);

                final JAXBElement<ItemRelease.Item.Content.Rubriclist.Rubric> saaifRubric
                    = objectFactory.createItemreleaseItemContentRubriclistRubric(mapToSaaifRubric(i, rubric));

                final JAXBElement<ItemRelease.Item.Content.Rubriclist.Samplelist> saaifSamplelist = objectFactory
                    .createItemreleaseItemContentRubriclistSamplelist(mapToSaaifSamplelist(i, rubric));

                saaifRubriclist.getContent().add(saaifRubric);
                saaifRubriclist.getContent().add(saaifSamplelist);
            }
        }
        return saaifRubriclist;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param index  The index given to the SAAIF entity.
     * @param rubric The IMS entity {@link Rubric}
     * @return The SAAIF {@link ItemRelease.Item.Content.Rubriclist.Rubric}
     */
    public ItemRelease.Item.Content.Rubriclist.Rubric mapToSaaifRubric(final int index, final Rubric rubric) {
        final ItemRelease.Item.Content.Rubriclist.Rubric saaifRubric = objectFactory
            .createItemreleaseItemContentRubriclistRubric();

        saaifRubric.setIndex(index);
        saaifRubric.setName(rubric.getName());
        saaifRubric.setVal(rubric.getVal());
        saaifRubric.setScorepoint(rubric.getScorepoint());

        return saaifRubric;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param index  The index given to the SAAIF entity.
     * @param rubric The IMS entity {@link Rubric}
     * @return The SAAIF {@link ItemRelease.Item.Content.Rubriclist.Samplelist}
     */
    public ItemRelease.Item.Content.Rubriclist.Samplelist mapToSaaifSamplelist(final int index, final Rubric rubric) {
        final ItemRelease.Item.Content.Rubriclist.Samplelist saaifSamplelist = objectFactory
            .createItemreleaseItemContentRubriclistSamplelist();

        saaifSamplelist.setIndex(index);
        saaifSamplelist.setMinval(toByte(rubric.getMinVal()));
        saaifSamplelist.setMaxval(toByte(rubric.getMaxVal()));

        if (rubric != null && CollectionUtils.isNotEmpty(rubric.getSamples())) {
            for (Sample sample : rubric.getSamples()) {
                final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample saaifSample = mapToSaaifSample(sample);
                saaifSamplelist.getSample().add(saaifSample);
            }
        }

        return saaifSamplelist;
    }

    /**
     * Map from IMS entity to SAAIF entity.
     *
     * @param sample The IMS entity {@link Sample}
     * @return The SAAIF {@link ItemRelease.Item.Content.Rubriclist.Samplelist.Sample}
     */
    public ItemRelease.Item.Content.Rubriclist.Samplelist.Sample mapToSaaifSample(final Sample sample) {
        final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample saaifSample = objectFactory
            .createItemreleaseItemContentRubriclistSamplelistSample();

        saaifSample.setName(sample.getName());
        saaifSample.setPurpose(sample.getPurpose());
        saaifSample.setSamplecontent(sample.getSamplecontent());
        saaifSample.setScorepoint(toByte(sample.getScorepoint()));

        return saaifSample;
    }

    /**
     * Converts a String to a Byte. If null is passed in then null is returned.
     *
     * @param val The string to convert.
     * @return The Byte value of the String.
     */
    private Byte toByte(final String val) {
        return val != null ? Byte.valueOf(val) : null;
    }

    private String toString(final Byte val) {
        return val != null ? val.toString() : null;
    }
}
