/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.client;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.entity.ItemBankUser;
import org.opentestsystem.ap.ims.util.SaaifAssembler;
import org.springframework.stereotype.Component;

/**
 * Factory for creating {@link GitClient} instances.  It also holds most of the
 * dependencies required by {@link org.opentestsystem.ap.ims.repository.ItemRepository}.
 */
@Component
public class GitClientFactory {

    private final ItemBankProperties itemBankProperties;

    private final SaaifAssembler saaifAssembler;

    public GitClientFactory(final ItemBankProperties itemBankProperties,
                            final SaaifAssembler saaifAssembler) {
        this.itemBankProperties = itemBankProperties;
        this.saaifAssembler = saaifAssembler;
    }

    /**
     * Creates an instance of {@link GitClient} and clones the given repository.
     *
     * @param userInfo   The user making the request to clone a remote repository.
     * @param repository The repository to clone.
     * @return An instance of {@link GitClient}
     */
    public GitClient cloneRemoteRepository(ItemBankUser userInfo, String repository) {
        final GitClient client = newGitClient(userInfo, repository);
        client.cloneRemoteRepository();
        return client;
    }

    /**
     * Creates an instance of {@link GitClient} and either opens the repository
     * if it is already cloned locally or it clones the repository from the Git host.
     *
     * @param userInfo   The user making the request to clone a remote repository.
     * @param repository The repository to clone.
     * @return An instance of {@link GitClient}
     */
    public GitClient openRepository(ItemBankUser userInfo, String repository) {
        final GitClient client = newGitClient(userInfo, repository);
        client.openOrClone();
        return client;
    }

    // ------------------------------------------------------------------------

    @VisibleForTesting
    GitClient newGitClient(ItemBankUser userInfo, String repository) {
        return new GitClient(itemBankProperties, userInfo, repository, saaifAssembler);
    }
}
