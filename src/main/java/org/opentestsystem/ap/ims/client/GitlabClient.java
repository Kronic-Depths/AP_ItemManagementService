/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.client;

import java.io.IOException;
import java.util.List;
import javax.annotation.PostConstruct;

import lombok.extern.slf4j.Slf4j;
import org.gitlab.api.GitlabAPI;
import org.gitlab.api.http.GitlabHTTPRequestor;
import org.gitlab.api.models.GitlabBranch;
import org.gitlab.api.models.GitlabGroup;
import org.gitlab.api.models.GitlabProject;
import org.gitlab.api.models.GitlabSession;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.util.SystemException;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * A client into Gitlab.  The client is configured with a group.  The group
 * is the top level where all items (or projects) are created and assumed
 * to live.  For example, looking up a project expects the project to be
 * under the configured group.
 */
@Slf4j
public class GitlabClient {

    protected final ItemBankProperties gitlabProperties;

    private GitlabSession gitlabSession;

    private GitlabAPI gitlabApi;

    private GitlabGroup gitlabGroup;

    private String gitLabProjectLookupBaseUrl;

    @Autowired
    public GitlabClient(final ItemBankProperties gitlabProperties) {
        this.gitlabProperties = gitlabProperties;
    }

    @PostConstruct
    public void initialize() {
        setGitlabSession(createSession());

        setGitlabApi(createGitlabAPI());

        final GitlabGroup gitlabGroup = lookupGroup();
        setGitlabGroup(gitlabGroup);

        setGitLabProjectLookupBaseUrl(GitlabProject.URL + "/" + gitlabProperties.getGroup() + "%2F");
    }

    /**
     * !This method does not work and results in an infinite loop!
     * <p>
     * It appears to be a bug in the Gitlab API.
     *
     * @param projectName The name of the project to list the branches for.
     * @return The remote branches for the given project.
     */
    public List<GitlabBranch> listRemoteBranches(final String projectName) {
        final GitlabProject project = lookupProjectByName(projectName);

        final GitlabHTTPRequestor requestor = gitlabApi.retrieve();
        final String projectUrl = GitlabProject.URL + "/" + +project.getId() + "/repository/branches";

        final List<GitlabBranch> branches = requestor.getAll(projectUrl, GitlabBranch[].class);

        return branches;
    }

    public GitlabProject createProject(String itemId) {
        final GitlabProject project;
        try {
            // using deprecated method, only way to create project under group
            project = gitlabApi.createProject(
                (String) itemId,                    // name
                (Integer) gitlabGroup.getId(),      // namespaceId
                (String) null,                      // description
                Boolean.TRUE,                       // issuesEnabled
                Boolean.FALSE,                      // wallEnabled
                Boolean.FALSE,                      // mergeRequestsEnabled
                Boolean.FALSE,                      // wikiEnabled
                Boolean.FALSE,                      // snippetsEnabled
                Boolean.FALSE,                      // publik
                0,                                  // visibilityLevel
                (String) null                       // importUrl
            );
        } catch (IOException e) {
            throw new SystemException("Error creating Gitlab project", e);
        }
        return project;
    }

    /**
     * Delete's a project from gitlab.
     *
     * @param projectName The project to delete.
     */
    public void deleteProject(String projectName) {
        final GitlabProject gitlabProject = lookupProjectByName(projectName);
        if (gitlabProject != null) {
            try {
                gitlabApi.deleteProject(gitlabProject.getId());
            } catch (IOException e) {
                throw new SystemException("Error deleting Gitlab project " + projectName, e);
            }
        }
    }

    /**
     * Look up the gitlab project by its name.
     *
     * @param projectName The Gitlab project name.
     * @return The Gitlab project.
     */
    public GitlabProject lookupProjectByName(final String projectName) {
        log.debug("looking up  project {}", projectName);
        final GitlabHTTPRequestor requestor = gitlabApi.retrieve();
        final String projectUrl = gitLabProjectLookupBaseUrl + projectName;
        GitlabProject project = null;
        try {
            project = requestor.to(projectUrl, GitlabProject.class);
        } catch (IOException e) {
            throw new SystemException("Error looking up Gitlab project " + projectName, e);
        }
        return project;
    }

    /**
     * Looks up the Gitlab group configured for the application.
     *
     * @return The Gitlab group.
     */
    public GitlabGroup lookupGroup() {
        final String groupName = gitlabProperties.getGroup();
        log.debug("getting group {}", groupName);
        try {
            return gitlabApi.getGroup(groupName);
        } catch (IOException e) {
            throw new SystemException("Error looking up Gitlab group " + groupName, e);
        }
    }

    // ------------------------------------------------------------------------
    // Private
    // ------------------------------------------------------------------------

    GitlabSession createSession() {
        try {
            return GitlabAPI.connect(gitlabProperties.getHost(), gitlabProperties.getUser(), gitlabProperties
                .getPassword());
        } catch (IOException e) {
            String errorMsg = String.format("Error creating a session with Gitlab [host:%s][user:%s]",
                gitlabProperties.getHost(), gitlabProperties.getUser());
            throw new SystemException(errorMsg);
        }
    }

    GitlabAPI createGitlabAPI() {
        return GitlabAPI.connect(gitlabProperties.getHost(), gitlabSession.getPrivateToken());
    }

    // ------------------------------------------------------------------------
    // Getters / Setters
    // ------------------------------------------------------------------------

    public void setGitlabGroup(GitlabGroup group) {
        this.gitlabGroup = group;
    }

    public void setGitlabSession(GitlabSession gitlabSession) {
        this.gitlabSession = gitlabSession;
    }

    public void setGitlabApi(GitlabAPI gitlabApi) {
        this.gitlabApi = gitlabApi;
    }

    public void setGitLabProjectLookupBaseUrl(String gitLabProjectLookupBaseUrl) {
        this.gitLabProjectLookupBaseUrl = gitLabProjectLookupBaseUrl;
    }
}
