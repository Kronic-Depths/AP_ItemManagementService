/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.client;

import java.util.List;
import javax.annotation.PostConstruct;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.NamespaceApi;
import org.gitlab4j.api.ProjectApi;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.util.SystemException;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * A client into Gitlab.  The client is configured with a group.  The group
 * is the top level where all items (or projects) are created and assumed
 * to live.  For example, looking up a project expects the project to be
 * under the configured group.
 */
@Slf4j
public class GitlabClient {

    protected final ItemBankProperties gitlabProperties;

    private GitLabApi gitLabApi;

    private Namespace group;

    @Autowired
    public GitlabClient(final ItemBankProperties gitlabProperties) {
        this.gitlabProperties = gitlabProperties;
    }

    @PostConstruct
    public void initialize() {
        setGitLabApi(createGitLabApi());
        setGroup(lookupGroup());
    }

    public Project createProject(String itemId) {
        final ProjectApi projectApi = gitLabApi.getProjectApi();
        try {
            return projectApi.createProject(group.getId(), itemId);
        } catch (GitLabApiException e) {
            throw new SystemException("Error creating project " + itemId, e);
        }
    }

    /**
     * Delete's a project from gitlab.
     *
     * @param projectName The project to delete.
     */
    public void deleteProject(String projectName) {
        log.debug("deleting project {}", projectName);
        final ProjectApi projectApi = gitLabApi.getProjectApi();

        final Project project = lookupProjectByName(projectName);

        if (project != null) {
            try {
                projectApi.deleteProject(project);
            } catch (GitLabApiException e) {
                throw new SystemException("Error deleting project " + projectName, e);
            }
        }
    }

    /**
     * Look up the gitlab project by its name.
     *
     * @param projectName The Gitlab project name.
     * @return The Gitlab project.
     */
    public Project lookupProjectByName(final String projectName) {
        log.debug("looking up  project {}", projectName);
        final ProjectApi projectApi = gitLabApi.getProjectApi();
        try {
            return projectApi.getProject(gitlabProperties.getGroup(), projectName);
        } catch (GitLabApiException e) {
            throw new SystemException("Error looking up Gitlab project " + projectName, e);
        }
    }

    /**
     * Looks up the Gitlab group configured for the application.
     *
     * @return The Gitlab group.
     */
    public Namespace lookupGroup() {
        final String groupName = gitlabProperties.getGroup();
        log.debug("getting group {}", groupName);

        final NamespaceApi namespaceApi = gitLabApi.getNamespaceApi();

        List<Namespace> namespaces = null;
        try {
            namespaces = namespaceApi.findNamespaces(groupName);
        } catch (GitLabApiException e) {
            throw new SystemException("Error looking up Namespace for group " + groupName, e);
        }

        if (CollectionUtils.isEmpty(namespaces)) {
            throw new SystemException("Group " + groupName + " does not exist");
        }

        // assuming one group per name, there cannot be two groups with the same name
        return namespaces.get(0);
    }

    // ------------------------------------------------------------------------
    // Private
    // ------------------------------------------------------------------------

    GitLabApi createGitLabApi() {
        return new GitLabApi(gitlabProperties.getHost(), gitlabProperties.getAccessToken());
    }

    // ------------------------------------------------------------------------
    // Getters / Setters
    // ------------------------------------------------------------------------

    public void setGroup(Namespace group) {
        this.group = group;
    }

    public void setGitLabApi(GitLabApi gitlabApi) {
        this.gitLabApi = gitlabApi;
    }
}
