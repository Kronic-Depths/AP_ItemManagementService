/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.client;

import java.util.List;
import javax.annotation.PostConstruct;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.MergeRequestApi;
import org.gitlab4j.api.NamespaceApi;
import org.gitlab4j.api.ProjectApi;
import org.gitlab4j.api.RepositoryApi;
import org.gitlab4j.api.RepositoryFileApi;
import org.gitlab4j.api.UserApi;
import org.gitlab4j.api.models.MergeRequest;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.models.Project;
import org.gitlab4j.api.models.RepositoryFile;
import org.gitlab4j.api.models.Tag;
import org.gitlab4j.api.models.User;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.model.ItemBankUser;
import org.opentestsystem.ap.ims.util.ResourceNotFoundException;
import org.opentestsystem.ap.ims.util.SystemException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;

import static org.springframework.http.HttpStatus.NOT_FOUND;
import static org.springframework.http.HttpStatus.NO_CONTENT;

/**
 * A client into Gitlab.  The client is configured with a group.  The group
 * is the top level where all items (or projects) are created and assumed
 * to live.  For example, looking up a project expects the project to be
 * under the configured group.
 */
@Slf4j
public class GitlabClient {

    private static final String MASTER = "master";

    protected final ItemBankProperties gitlabProperties;

    private GitLabApi gitLabApi;

    private Namespace group;

    @Autowired
    public GitlabClient(final ItemBankProperties gitlabProperties) {
        this.gitlabProperties = gitlabProperties;
    }

    @PostConstruct
    public void initialize() {
        setGitLabApi(createGitLabApi());
        setGroup(lookupGroup());
    }

    public User lookupUser(final String username) {
        final UserApi userApi = gitLabApi.getUserApi();
        try {
            final List<User> users = userApi.findUsers(username);
            return CollectionUtils.isNotEmpty(users) ? users.get(0) : null;
        } catch (GitLabApiException e) {
            throw new SystemException("User " + username + " not found");
        }
    }

    /**
     * "claim" means to take ownership (authoring ownership) of the item.
     * The owner of the scratch pad branch is also known as the creator
     * or editor depending on the item state.  There is only ever one editor of
     * an item.  If the item is already in edit mode an error is thrown.
     *
     * @param user   The user making the request to become the item's editor.
     * @param itemId The item to claim.  The item to put in edit mode.
     * @return True if the item was claimed or false for all other cases.
     */
    public boolean claimItem(final ItemBankUser user, final String itemId) {
        final Project project = lookupProjectByName(itemId);
        final RepositoryApi repositoryApi = gitLabApi.getRepositoryApi();
        try {
            final Tag tag = repositoryApi.createTag(project.getId(), "scratchpad", "master", user.getUsername(),
                (String) null);
        } catch (GitLabApiException e) {
            final int httpStatus = e.getHttpStatus();
            if (httpStatus == HttpStatus.BAD_REQUEST.value()) {
                return false;
            }
            throw new SystemException("Error creating tag for item " + itemId, e);
        }
        return true;
    }

    /**
     * "release" means the user is done creating/editing the item and the item is now open
     * for anyone to claim.
     *
     * @param itemId The unique item identifier.
     */
    public void releaseItem(final ItemBankUser user, final String itemId) {
        final Project project = lookupProjectByName(itemId);
        final RepositoryApi repositoryApi = gitLabApi.getRepositoryApi();
        try {
            repositoryApi.deleteTag(project.getId(), "scratchpad");
        } catch (GitLabApiException e) {
            final int httpStatus = e.getHttpStatus();
            if (httpStatus != NOT_FOUND.value() && httpStatus != NO_CONTENT.value()) {
                throw new SystemException("Error creating tag for item " + itemId, e);
            }
        }
    }

    public boolean doesItemFileExistOnMaster(String itemId) {
        final RepositoryFile repositoryFile = lookupItemFile(itemId, MASTER);
        return repositoryFile != null;
    }

    public RepositoryFile lookupItemFile(String itemId, String branchName) {
        final Project project = lookupProjectByName(itemId);
        final RepositoryFileApi fileApi = gitLabApi.getRepositoryFileApi();
        try {
            return fileApi.getFile("item-" + itemId + ".xml", project.getId(), branchName);
        } catch (GitLabApiException e) {
            return null;
        }
    }

    public MergeRequest createMergeRequest(String itemId) {
        final Project project = lookupProjectByName(itemId);
        final MergeRequestApi mergeRequestApi = gitLabApi.getMergeRequestApi();
        try {
            return mergeRequestApi.createMergeRequest(project.getId(), "ScratchPad_bdrainer@fairwaytech.com", "master",
                "MergeRequest", "committing changes", null);
        } catch (GitLabApiException e) {
            throw new SystemException("Error creating merge request for item " + itemId, e);
        }
    }

    public Project createProject(String itemId) {
//        final Project project = new Project()
//            .withName(itemId)
//            .withNamespace(group)
//            .withApprovalsBeforeMerge(0)
//            .withContainerRegistryEnabled(false)
////            .withDefaultBranch()
////            .withDescription()
//            .withIssuesEnabled(false)
//            .withJobsEnabled(false)
//            .withLfsEnabled(false)      // large file storage
//            .withMergeRequestsEnabled(true)
//            .withOnlyAllowMergeIfAllDiscussionsAreResolved(false)
//            .withOnlyAllowMergeIfPipelineSucceeds(false)
//            .withPath("")
//            .withPublic(false)
//            .withPublicJobs(false)
////            .withRepositoryStorage()
//            .withRequestAccessEnabled(false)
//            .withSharedRunnersEnabled(false)
//            .withSnippetsEnabled(false);


        final ProjectApi projectApi = gitLabApi.getProjectApi();
        try {
//            projectApi.createProject(project);
            return projectApi.createProject(group.getId(), itemId);

        } catch (GitLabApiException e) {
            throw new SystemException("Error creating project " + itemId, e);
        }
    }

    /**
     * Delete's a project from gitlab.
     *
     * @param projectName The project to delete.
     */
    public void deleteProject(String projectName) {
        log.debug("deleting project {}", projectName);
        final ProjectApi projectApi = gitLabApi.getProjectApi();

        final Project project = lookupProjectByName(projectName);

        if (project != null) {
            try {
                projectApi.deleteProject(project);
            } catch (GitLabApiException e) {
                throw new SystemException("Error deleting project " + projectName, e);
            }
        }
    }

    /**
     * Look up the gitlab project by its name.
     *
     * @param projectName The Gitlab project name.
     * @return The Gitlab project.
     */
    public Project lookupProjectByName(final String projectName) {
        log.debug("looking up  project {}", projectName);
        final ProjectApi projectApi = gitLabApi.getProjectApi();
        try {
            return projectApi.getProject(gitlabProperties.getGroup(), projectName);
        } catch (GitLabApiException e) {
            final int httpStatus = e.getHttpStatus();
            if (httpStatus == NOT_FOUND.value()) {
                throw new ResourceNotFoundException("Item " + projectName + " not found");
            }
            throw new SystemException("Error looking up Gitlab project " + projectName, e);
        }
    }

    /**
     * Looks up the Gitlab group configured for the application.
     *
     * @return The Gitlab group.
     */
    public Namespace lookupGroup() {
        final String groupName = gitlabProperties.getGroup();
        log.debug("getting group {}", groupName);

        final NamespaceApi namespaceApi = gitLabApi.getNamespaceApi();

        List<Namespace> namespaces = null;
        try {
            namespaces = namespaceApi.findNamespaces(groupName);
        } catch (GitLabApiException e) {
            throw new SystemException("Error looking up Namespace for group " + groupName, e);
        }

        if (CollectionUtils.isEmpty(namespaces)) {
            throw new SystemException("Group " + groupName + " does not exist");
        }

        // assuming one group per name, there cannot be two groups with the same name
        return namespaces.get(0);
    }

    // ------------------------------------------------------------------------
    // Private
    // ------------------------------------------------------------------------

    GitLabApi createGitLabApi() {
        return new GitLabApi(gitlabProperties.getHost(), gitlabProperties.getAccessToken());
    }

    // ------------------------------------------------------------------------
    // Getters / Setters
    // ------------------------------------------------------------------------

    public void setGroup(Namespace group) {
        this.group = group;
    }

    public void setGitLabApi(GitLabApi gitlabApi) {
        this.gitLabApi = gitlabApi;
    }
}
