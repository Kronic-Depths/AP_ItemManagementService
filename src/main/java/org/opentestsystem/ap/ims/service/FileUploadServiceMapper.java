/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.service;

import net.logstash.logback.encoder.org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.util.ValidationException;
import org.opentestsystem.ap.ims.model.AttachmentFile;
import org.opentestsystem.ap.ims.model.AttachmentFileType;
import org.springframework.stereotype.Component;

import static org.apache.commons.lang3.StringUtils.equalsIgnoreCase;
import static org.apache.commons.lang3.StringUtils.split;
import static org.opentestsystem.ap.common.model.ItemConstants.AslType.ASL_TYPE_MP4;
import static org.opentestsystem.ap.common.model.ItemConstants.AslType.ASL_TYPE_WEBM;
import static org.opentestsystem.ap.common.model.ItemConstants.BrailleType.BRAILLE_TYPE_BRF;
import static org.opentestsystem.ap.common.model.ItemConstants.BrailleType.BRAILLE_TYPE_PRN;

@Component
public class FileUploadServiceMapper {

    public static final String ASL_LANGUAGE = "enu";

    /**
     * Creates an {@link Attachment} instance from a {@link AttachmentFile}.  It is mapping an IMS model to the common
     * model.
     *
     * @param attachmentFile The file details being uploaded.
     * @return An {@link Attachment} instance.
     */
    public Attachment newAttachment(final AttachmentFile attachmentFile) {
        final Attachment attachment = new Attachment();
        attachment.setFileName(attachmentFile.getFileName());
        attachment.setType(attachmentFile.getType());
        attachment.setSubtype(attachmentFile.getSubtype());
        attachment.setLanguage(attachmentFile.getLanguage());
        return attachment;
    }

    /**
     * Using the file name an instance of {@link AttachmentFile} is created.  A file name is expected in a specific format.
     * It is assumed the file name format has been validated prior to calling this method.
     * <p>
     * <p>
     * "stim_8393_enu_contracted_transcript.brf" and "stim_8393_enu_contracted.brf" are examples of valid braille file
     * names. A valid asl file is "item_3431_ASL_STEM.mp4".
     * The file name contains the different parts making up a {@link AttachmentFile}
     *
     * @param fileName The file name to parse for the file data.
     * @return A {@link AttachmentFile} instance.
     */
    public AttachmentFile newAttachmentFile(final String fileName, AttachmentFileType attachmentFileType) {
        if (fileName == null) {
            throw new ValidationException("File name cannot be null");
        }

        // first split on the extension
        final String[] splitOnExtension = split(fileName, ".");

        final AttachmentFile attachmentFile = new AttachmentFile();
        attachmentFile.setFileName(fileName);

        String fileType = StringUtils.EMPTY;
        final String[] splitOnName = split(splitOnExtension[0], "_");
        if(attachmentFileType == AttachmentFileType.BRAILLE) {
            fileType = equalsIgnoreCase(splitOnExtension[1], BRAILLE_TYPE_BRF.toLowerCase()) ?
                    BRAILLE_TYPE_BRF : BRAILLE_TYPE_PRN;

            attachmentFile.setLanguage(splitOnName[2]);

            if (splitOnName.length == 5) {
                attachmentFile.setSubtype(splitOnName[3] + "_" + splitOnName[4]);
            } else {
                attachmentFile.setSubtype(splitOnName[3]);
            }
        } else if(attachmentFileType == AttachmentFileType.ASL) {
            fileType = equalsIgnoreCase(splitOnExtension[1], ASL_TYPE_MP4.toLowerCase()) ?
                    ASL_TYPE_MP4 : ASL_TYPE_WEBM;

            attachmentFile.setLanguage(ASL_LANGUAGE);

            if (splitOnName.length == 4) {
                attachmentFile.setSubtype(splitOnName[3]);
            } else {
                attachmentFile.setSubtype(StringUtils.EMPTY);
            }
        }

        attachmentFile.setItemId(splitOnName[1]);
        attachmentFile.setItemType(splitOnName[0]);
        attachmentFile.setType(fileType);

        return attachmentFile;
    }

}
