/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.entity.ItemBankUser;
import org.opentestsystem.ap.ims.repository.ItemBankRepository;
import org.opentestsystem.ap.ims.util.ItemMapper;
import org.opentestsystem.ap.ims.util.SecurityUtil;
import org.opentestsystem.ap.ims.util.ValidationException;
import org.opentestsystem.saaif.item.ItemRelease;
import org.opentestsystem.saaif.item.SaaifItemFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemLanguage.LANG_ENU;

/**
 *
 */
@Slf4j
@Component
public class ItemBankService {

    private static final boolean YES_PUSH_CHANGES_TO_REMOTE = true;

    private final ItemBankRepository itemBankRepository;

    private final SaaifItemFactory saaifItemFactory;

    private final SecurityUtil securityUtil;

    private final ItemMapper itemMapper;

    @Autowired
    public ItemBankService(final ItemBankRepository itemBankRepository,
                           final SaaifItemFactory saaifItemFactory,
                           final SecurityUtil securityUtil,
                           final ItemMapper itemMapper) {
        this.itemBankRepository = itemBankRepository;
        this.saaifItemFactory = saaifItemFactory;
        this.securityUtil = securityUtil;
        this.itemMapper = itemMapper;
    }

    public Item checkoutItemForEdit(final String itemId) {
        log.debug("initialize item {} for edit", itemId);
        if (itemId == null) {
            throw new ValidationException("Item ID is required.");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();

        itemBankRepository.initializeItemForEdit(user, itemId);

        final Item item = itemBankRepository.findItem(user, itemId);

        return item;
    }

    /**
     * Create a new item in GitLab.
     *
     * @return The unique item identifier.
     */
    public Item createItem(final Item newItem) {
        log.debug("create new item");
        if (newItem == null || StringUtils.isBlank(newItem.getType())) {
            throw new ValidationException("Type is required when creating an item.");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();

        final String itemId = itemBankRepository.initializeNewItem(user);

        final ItemRelease saaifItem = saaifItemFactory.newAssessmentItem(itemId, newItem.getType(), LANG_ENU);

        itemBankRepository.initializeItemType(user, saaifItem);

        final Item item = itemMapper.mapToEntityItem(saaifItem.getItem());
        item.setBeingCreatedBy(user.getUsername());

        return item;
    }

    public void updateItem(final String itemId, final Item item) {
        log.debug("update item {}", itemId);
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        if (item == null) {
            throw new ValidationException("Item is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemBankRepository.updateItem(user, item, YES_PUSH_CHANGES_TO_REMOTE);
    }

    /**
     * Committing item changes is the process of taking a user's scratch pad
     * branch and merging the changes into the master branch.  Once merged
     * the scratch pad branch is deleted.
     *
     * @param itemId The item to commit changes for.
     */
    public void commitItemChanges(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemBankRepository.commitItemChanges(user, itemId);

    }

    /**
     * Delete's an item from the item bank.
     *
     * @param itemId The item to delete.
     */
    public void deleteItem(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemBankRepository.deleteItem(user, itemId);
    }

    /**
     * Find an item by its unique ID.
     *
     * @param itemId The item's unique ID.
     */
    public Item findItem(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        final Item item = itemBankRepository.findItem(user, itemId);
        return item;
    }
}
