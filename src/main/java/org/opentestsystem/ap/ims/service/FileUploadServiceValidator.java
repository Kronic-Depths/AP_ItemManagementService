/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.service;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.util.ValidationException;
import org.opentestsystem.ap.ims.model.BrailleFile;
import org.opentestsystem.ap.ims.model.UploadedFile;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import static org.apache.commons.lang3.StringUtils.equalsIgnoreCase;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.FILE_NAME_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.FILE_UPLOAD_NO_DATA;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.ITEM_ID_REQUIRED;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.SECTION_REQUIRED;

@Component
public class FileUploadServiceValidator {

    private static final String BRAILLE_NAMING_PATTERN = "^([s]tim|[i]tem|[p]assage)_(\\w+)_(enu)_(" +
        "([ue][xc][ntl])|uncontracted|contracted|nemeth)(_transcript)*\\.(brf|prn)$";

    private static final Pattern PATTERN = Pattern.compile(BRAILLE_NAMING_PATTERN);

    public void validateDetachFile(final String itemId, final String fileName) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(fileName)) {
            throw new ValidationException(FILE_NAME_REQUIRED);
        }
    }

    public void validateAttachFile(final UploadedFile uploadedFile) {
        if (uploadedFile == null) {
            throw new ValidationException(FILE_UPLOAD_NO_DATA);
        }
        if (StringUtils.isBlank(uploadedFile.getSection())) {
            throw new ValidationException(SECTION_REQUIRED);
        }
        if (isBlank(uploadedFile.getItemId())) {
            throw new ValidationException("Item ID cannot be blank in upload request");
        }
        final MultipartFile file = uploadedFile.getFile();
        if (file == null || file.isEmpty()) {
            throw new ValidationException("No file found in upload request");
        }
    }

    /**
     * Compares the request data like the submitted item against the braille file name (i.e. the BrailleFile). The item
     * in the request should match the item identified in the braille file name.
     *
     * @param itemId      The item the request is attempt to attach a braille file to.
     * @param brailleFile The braille file data being uploaded.
     */
    public void validateBrailleFile(final String itemId, final BrailleFile brailleFile) {
        if (!equalsIgnoreCase(itemId, brailleFile.getItemId())) {
            throw new ValidationException("The uploaded file does not have the correct item ID.  Expected " + itemId +
                " but received " + brailleFile.getItemId());
        }
    }

    /**
     * Validate the upload request.  A validation error results in throwing a {@link ValidationException}
     *
     * @param uploadedFile The request data to validate.
     */
    public void validateBrailleFile(UploadedFile uploadedFile) {
        final MultipartFile file = uploadedFile.getFile();
        validateBrailleFileName(file.getOriginalFilename());
    }

    /**
     * Validates the braille filename matches a pre-defined pattern.
     *
     * @param fileName The filename to validate.
     * @return True if the filename is valid, false otherwise.
     */
    public void validateBrailleFileName(String fileName) {
        final Matcher matcher = PATTERN.matcher(fileName);
        if (!matcher.matches()) {
            throw new ValidationException("The file name is not in the correct format");
        }
    }
}
