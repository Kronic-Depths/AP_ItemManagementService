/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.ims.service;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.util.ValidationException;
import org.opentestsystem.ap.ims.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;
import org.springframework.stereotype.Component;

/**
 * Validator for items.
 */
@Component
public class ItemServiceValidator {

    private static String REQUEST_REQUIRED = "Request cannot be empty";

    private static String TYPE_REQUIRED = "Type is required";

    private static String MESSAGE_REQUIRED = "Message is required";

    private static String ITEM_ID_REQUIRED = "Item ID is required";

    private static String TRANSACTION_ID_REQUIRED = "Transaction ID is required";

    private static String ITEM_REQUIRED = "Item is required";

    private static String HISTORY_ID_REQUIRED = "History ID is required";

    private static String WORKFLOW_STATUS_REQUIRED = "Workflow status is required";

    private static String WORKFLOW_STATUS_INVALID = "The workflow status %s is not valid";

    private static String BRAILLE_FILE_NAME_REQUIRED = "The braille file name is required.";

    private final WorkflowStatusRepository workflowStatusRepository;

    public ItemServiceValidator(WorkflowStatusRepository workflowStatusRepository) {
        this.workflowStatusRepository = workflowStatusRepository;
    }

    public void validateFindItem(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
    }

    public void validateFindItemHistory(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
    }

    public void validateFindItemDiff(final String itemId, final String historyId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(historyId)) {
            throw new ValidationException(HISTORY_ID_REQUIRED);
        }
    }

    public void validateBeginCreateTransaction(final String itemType, final String commitMessage) {
        if (StringUtils.isBlank(itemType)) {
            throw new ValidationException(TYPE_REQUIRED);
        }
        if (StringUtils.isBlank(commitMessage)) {
            throw new ValidationException(MESSAGE_REQUIRED);
        }
    }

    public void validateBeginEditTransaction(final String itemId, final String message) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(message)) {
            throw new ValidationException(MESSAGE_REQUIRED);
        }
    }

    public void validateSaveTransaction(final String itemId, final String transactionId,
                                        final ItemChangeRequest request) {
        validateItemChange(itemId, transactionId, request);
    }

    public void validateCommitTransaction(final String itemId, final String transactionId,
                                          final ItemChangeRequest request) {
        validateItemChange(itemId, transactionId, request);
    }

    public void validateRollbackTransaction(final String itemId, final String transactionId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(transactionId)) {
            throw new ValidationException(TRANSACTION_ID_REQUIRED);
        }
    }

    public void validateGetBrailleFilePath(final String itemId, final String fileName) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(fileName)) {
            throw new ValidationException(BRAILLE_FILE_NAME_REQUIRED);
        }
    }

    public void validateDeleteBrailleFile(final String itemId, final String transactionId, final String fileName) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (StringUtils.isBlank(transactionId)) {
            throw new ValidationException(TRANSACTION_ID_REQUIRED);
        }
        if (StringUtils.isBlank(fileName)) {
            throw new ValidationException(BRAILLE_FILE_NAME_REQUIRED);
        }
    }

    // ------------------------------------------------------------------------

    private void validateItemChange(final String itemId, final String transactionId,
                                    final ItemChangeRequest request) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException(ITEM_ID_REQUIRED);
        }
        if (request == null) {
            throw new ValidationException(REQUEST_REQUIRED);
        }
        if (StringUtils.isBlank(transactionId)) {
            throw new ValidationException(TRANSACTION_ID_REQUIRED);
        }
        if (request.getItem() == null) {
            throw new ValidationException(ITEM_REQUIRED);
        }
        if (StringUtils.isBlank(request.getMessage())) {
            throw new ValidationException(MESSAGE_REQUIRED);
        }
        final String workflowStatusCode = request.getItem().getWorkflowStatusCode();
        if (StringUtils.isBlank(workflowStatusCode)) {
            throw new ValidationException(WORKFLOW_STATUS_REQUIRED);
        }
        if (workflowStatusRepository.findFirstByCode(workflowStatusCode) == null) {
            throw new ValidationException(String.format(WORKFLOW_STATUS_INVALID, workflowStatusCode));
        }
    }
}
