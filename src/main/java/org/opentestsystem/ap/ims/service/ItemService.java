/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import java.util.List;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.ItemDiff;
import org.opentestsystem.ap.common.model.ItemHistory;
import org.opentestsystem.ap.common.model.WorkflowStatusEnum;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.entity.WorkflowStatus;
import org.opentestsystem.ap.ims.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.ims.rest.ItemChangeRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * The item management service.
 */
@Slf4j
@Component
public class ItemService {

    private static final boolean KEEP_CHANGES_PRIVATE = false;

    private static final boolean MAKE_CHANGES_PUBLIC = true;

    private final ItemRepository itemRepository;

    private final WorkflowStatusRepository workflowStatusRepository;

    private final ItemServiceValidator validator;

    private final SecurityUtil securityUtil;

    @Autowired
    public ItemService(final ItemRepository itemRepository,
                       final WorkflowStatusRepository workflowStatusRepository,
                       final ItemServiceValidator validator,
                       final SecurityUtil securityUtil) {
        this.itemRepository = itemRepository;
        this.workflowStatusRepository = workflowStatusRepository;
        this.validator = validator;
        this.securityUtil = securityUtil;
    }

    // ------------------------------------------------------------------------

    public List<WorkflowStatus> findAllWorkflowStatus() {
        return workflowStatusRepository.findAllByOrderByWorkflowOrderAsc();
    }

    public WorkflowStatus findWorkflowStatus(final String code) {
        return workflowStatusRepository.findFirstByCode(code);
    }

    // ------------------------------------------------------------------------

    /**
     * Find an item by its unique ID.
     *
     * @param itemId The unique item identifier.
     */
    public Item findItem(final String itemId) {
        log.debug("find item {}", itemId);
        validator.validateFindItem(itemId);
        final ItemBankUser user = securityUtil.getItemBankUser();
        return itemRepository.findItem(user, itemId);
    }

    /**
     * Finds the history of an item.
     *
     * @param itemId The unique item identifier.
     * @return A list of changes associated with the item.
     */
    public List<ItemHistory> findItemHistory(final String itemId) {
        log.debug("find item history for {}", itemId);
        validator.validateFindItemHistory(itemId);
        return itemRepository.findItemHistory(itemId);
    }

    /**
     * Returns a list of difference comparing the history ID with its previous history item.
     *
     * @param itemId    The unique item identifier.
     * @param historyId The history identifier to compare.
     * @return A list of difference from the previous history item to the given history item.
     */
    public List<ItemDiff> findItemDiff(final String itemId, final String historyId) {
        log.debug("find item diff for item {} and history id {}", itemId, historyId);
        validator.validateFindItemDiff(itemId, historyId);
        return itemRepository.findItemDiff(itemId, historyId);
    }

    // ------------------------------------------------------------------------

    /**
     * @param itemType      The type of item to create.
     * @param commitMessage The commit message used when creating the transaction.
     * @return The new item.
     */
    public Item beginCreateTransaction(final String itemType,
                                       final String commitMessage) {
        log.debug("begin create transaction for item type {}", itemType);
        validator.validateBeginCreateTransaction(itemType, commitMessage);
        final ItemBankUser user = securityUtil.getItemBankUser();
        return itemRepository.beginCreateTransaction(user, itemType, commitMessage, WorkflowStatusEnum.Draft.name());
    }

    /**
     * Create a transaction for editing an existing item.
     *
     * @param itemId        The unique item identifier.
     * @param commitMessage The message associated with opening the item for editing.
     * @return The item to be edited.
     */
    public Item beginEditTransaction(final String itemId, final String commitMessage) {
        log.debug("begin edit transaction for item {}", itemId);
        validator.validateBeginEditTransaction(itemId, commitMessage);
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.beginEditTransaction(user, itemId, commitMessage);
        return itemRepository.findItem(user, itemId);
    }

    /**
     * Save changes to the item.  The changes are saved on the creator/editor's scratch pad.
     *
     * @param itemId        The unique item identifier.
     * @param transactionId The transaction to save changes against.
     * @param request       The item data to save.
     */
    public void saveTransaction(final String itemId, final String transactionId, final ItemChangeRequest request) {
        log.debug("save transaction {} on item {}", transactionId, itemId);
        validator.validateSaveTransaction(itemId, transactionId, request);
        request.getItem().setId(itemId);
        itemRepository.saveItem(securityUtil.getItemBankUser(), request.getItem(), transactionId,
            request.getMessage(), KEEP_CHANGES_PRIVATE);
    }

    /**
     * Make public the changes associated the transaction.
     *
     * @param itemId        The unique item identifier.
     * @param transactionId The transaction to commit.
     * @param request       The item data to save and commit.
     */
    public void commitTransaction(final String itemId, final String transactionId, final ItemChangeRequest request) {
        log.debug("commit transaction {} on item {}", transactionId, itemId);
        validator.validateCommitTransaction(itemId, transactionId, request);
        request.getItem().setId(itemId);
        itemRepository.saveItem(securityUtil.getItemBankUser(), request.getItem(), transactionId,
            request.getMessage(), MAKE_CHANGES_PUBLIC);
    }

    /**
     * Rollback the transaction.
     *
     * @param itemId        The unique item identifier.
     * @param transactionId The transaction to rollback.
     */
    public void rollbackTransaction(final String itemId, final String transactionId) {
        log.debug("rollback transaction {} on item {}", transactionId, itemId);
        validator.validateRollbackTransaction(itemId, transactionId);
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.rollbackTransaction(user, itemId, transactionId);
    }

}
