/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import java.util.List;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.ims.model.Item;
import org.opentestsystem.ap.ims.model.ItemBankUser;
import org.opentestsystem.ap.ims.model.ItemDiff;
import org.opentestsystem.ap.ims.model.ItemHistory;
import org.opentestsystem.ap.ims.repository.ItemRepository;
import org.opentestsystem.ap.ims.util.SecurityUtil;
import org.opentestsystem.ap.ims.util.ValidationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * The item management service.
 */
@Slf4j
@Component
public class ItemService {

    private final ItemRepository itemRepository;

    private final SecurityUtil securityUtil;

    @Autowired
    public ItemService(final ItemRepository itemRepository, final SecurityUtil securityUtil) {
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
    }

    // ------------------------------------------------------------------------

    /**
     * Find an item by its unique ID.
     *
     * @param itemId The item's unique ID.
     */
    public Item findItem(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        final Item item = itemRepository.findItem(user, itemId);
        return item;
    }

    /**
     * Save changes to the item.  The changes are saved on the creator/editor's scratch pad.
     *
     * @param itemId The unique item identifier.
     * @param item   The item data to save.
     */
    public void saveItem(final String itemId, final Item item) {
        log.debug("update item {}", itemId);
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        if (item == null) {
            throw new ValidationException("Item is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.saveItem(user, item);
    }

    /**
     * Finds the history of an item.
     *
     * @param itemId The unique item identifier.
     * @return A list of changes associated with the item.
     */
    public List<ItemHistory> findItemHistory(final String itemId) {
        log.debug("find item history for {}", itemId);
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final List<ItemHistory> itemHistory = itemRepository.findItemHistory(itemId);
        return itemHistory;
    }

    public List<ItemDiff> findItemDiff(final String itemId, final String historyId) {
        log.debug("find item diff for item {} and history id {}", itemId, historyId);
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        if (StringUtils.isBlank(historyId)) {
            throw new ValidationException("Item history ID is required");
        }
        final List<ItemDiff> itemDiff = itemRepository.findItemDiff(itemId, historyId);
        return itemDiff;
    }


    // ------------------------------------------------------------------------

    /**
     * Create a new item in the item bank.
     *
     * @return The unique item identifier.
     */
    public Item createNewItem(final String itemType) {
        log.debug("create new item for itemType {}", itemType);
        if (StringUtils.isBlank(itemType)) {
            throw new ValidationException("Type is required when creating an item.");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();

        final String itemId = itemRepository.newItem(user);

        final Item item = itemRepository.beginCreateItem(user, itemId, itemType);
        return item;
    }

    /**
     * Pushes all changes made to the item to the item bank.  Prior to
     * committing there were no changes pushed and the item was essentially
     * empty and non-viewable.  Once committed the item is viewable and
     * editable.
     *
     * @param itemId The item to commit.
     */
    public void commitNewItem(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();

        itemRepository.commitItemChanges(user, itemId, "complete create item");
    }

    /**
     * Delete's an item from the item bank.
     *
     * @param itemId The item to delete.
     */
    public void deleteNewItem(final String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.deleteItem(user, itemId);
    }

    // ------------------------------------------------------------------------

    /**
     * Before an item can be edited someone must be designated the editor.  This
     * method assigns the requesting user as the editor.  There can be only
     * one editor.  If there is an existing editor an exception is thrown.
     *
     * @param itemId The unique item identifier.
     * @return The item to be edited.
     */
    public Item beginEditItem(String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.beginEditItem(user, itemId);
        return itemRepository.findItem(user, itemId);
    }

    /**
     * When the item editor is done making their edits they will commit the item.  Committing the item
     * merges the editor's changes into the item.
     *
     * @param itemId        The unique item identifier.
     * @param commitMessage The editor's commit message.
     */
    public void commitItem(final String itemId, final String commitMessage) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        if (StringUtils.isBlank(commitMessage)) {
            throw new ValidationException("A commit message is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.commitItemChanges(user, itemId, commitMessage);
    }

    /**
     * If an editor wants to discard all their changes since they began editing the item they
     * rollback their changes.  The effect is all their edits are gone and the item is open
     * for anyone to edit it.
     *
     * @param itemId The uniqu item identifier.
     */
    public void rollbackItem(String itemId) {
        if (StringUtils.isBlank(itemId)) {
            throw new ValidationException("Item ID is required");
        }
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.rollbackItemChanges(user, itemId);
    }
}
