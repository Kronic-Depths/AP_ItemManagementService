/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.mapper.ModelMapper;
import org.opentestsystem.ap.common.model.AttachmentRequest;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.ims.model.UploadedFile;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

/**
 * Handles file requests like uploading, downloading, and retrieving item files.
 */
@Slf4j
@Component
public class FileUploadService {

    private final FileUploadServiceValidator validator;

    private final ItemRepository itemRepository;

    private final SecurityUtil securityUtil;

    public FileUploadService(final FileUploadServiceValidator validator, final ItemRepository itemRepository,
                             final SecurityUtil securityUtil) {
        this.validator = validator;
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
    }

    /**
     * Validates and processes the file upload request.
     *
     * @param uploadedFile The upload request holding information like item ID, transaction ID, and the file(s).
     */
    public void attachFile(final UploadedFile uploadedFile) {
        validator.validateUploadedFile(uploadedFile);

        final String itemId = uploadedFile.getItemId();
        final MultipartFile file = uploadedFile.getFile();

        log.debug("Uploading file for item {}", itemId);

        final AttachmentRequest attachmentRequest = ModelMapper.newAttachmentRequest(file.getOriginalFilename(),
            uploadedFile.getSection());

        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.saveAttachment(user, itemId, attachmentRequest, file);
    }

    /**
     * Deletes a file associated with an item.
     *
     * @param itemId   The unique item ID.
     * @param fileName The name of the file to download.
     */
    public void detachFile(final String itemId, final String fileName) {
        validator.validateDetachFile(itemId, fileName);

        log.debug("delete file {} for item {}", fileName, itemId);
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.deleteAttachment(user, itemId, fileName);
    }

}
