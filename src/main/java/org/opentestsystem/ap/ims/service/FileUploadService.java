/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.AttachmentFileType;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.common.util.ValidationException;
import org.opentestsystem.ap.ims.model.AttachmentFile;
import org.opentestsystem.ap.ims.model.UploadedFile;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import static org.opentestsystem.ap.common.model.AttachmentFileType.FILE_TYPE_ASL;
import static org.opentestsystem.ap.common.model.AttachmentFileType.FILE_TYPE_BRAILLE;
import static org.opentestsystem.ap.common.model.AttachmentFileType.FILE_TYPE_CC;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_BRAILLE;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_CC;
import static org.opentestsystem.ap.ims.service.ValidatorMessages.FILE_UPLOAD_NOT_SUPPORTED_FOR_SECTION;

/**
 * Handles file requests like uploading, downloading, and retrieving item files.
 */
@Slf4j
@Component
public class FileUploadService {

    private final FileUploadServiceValidator validator;

    private final FileUploadServiceMapper mapper;

    private final ItemRepository itemRepository;

    private final SecurityUtil securityUtil;

    public FileUploadService(final FileUploadServiceValidator validator, final FileUploadServiceMapper mapper,
                             final ItemRepository itemRepository, final SecurityUtil securityUtil) {
        this.validator = validator;
        this.mapper = mapper;
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
    }

    public void attachFile(final UploadedFile uploadedFile) {
        validator.validateAttachFile(uploadedFile);

        if (SECTION_BRAILLE.equalsIgnoreCase(uploadedFile.getSection())) {
            uploadBrailleFile(uploadedFile);
        } else if(SECTION_ASL.equalsIgnoreCase(uploadedFile.getSection())) {
            uploadAslFile(uploadedFile);
        } else if(SECTION_CC.equalsIgnoreCase(uploadedFile.getSection())) {
            uploadCcFile(uploadedFile);
        } else {
            throw new ValidationException(FILE_UPLOAD_NOT_SUPPORTED_FOR_SECTION);
        }
    }

    /**
     * Deletes a file associated with an item.
     *
     * @param itemId   The unique item ID.
     * @param fileName The name of the file to download.
     */
    public void detachFile(final String itemId, final String fileName) {
        validator.validateDetachFile(itemId, fileName);

        log.debug("delete file {} for item {}", fileName, itemId);
        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.deleteAttachment(user, itemId, fileName);
    }

    public void uploadAslFile(final UploadedFile uploadedFile) {
        validator.validateAslFile(uploadedFile);
        uploadFile(uploadedFile, FILE_TYPE_ASL);
    }

    /**
     * Validates and processes the braille file upload request.
     *
     * @param uploadedFile The upload request holding information like item ID, transaction ID, and the file(s).
     */
    public void uploadBrailleFile(final UploadedFile uploadedFile) {
        validator.validateBrailleFile(uploadedFile);
        uploadFile(uploadedFile, FILE_TYPE_BRAILLE);
    }

    public void uploadCcFile(final UploadedFile uploadedFile) {
        validator.validateCcFile(uploadedFile);
        uploadFile(uploadedFile, FILE_TYPE_CC);
    }

    public void uploadFile(final UploadedFile uploadedFile,
                           final AttachmentFileType attachmentFileType) {
        final String itemId = uploadedFile.getItemId();

        log.debug("Uploading file for item {}", itemId);

        final MultipartFile file = uploadedFile.getFile();

        Attachment attachment;
        final AttachmentFile attachmentFile = mapper.newAttachmentFile(file.getOriginalFilename(), attachmentFileType);
        validator.validateAttachmentFile(itemId, attachmentFile);

        attachment = mapper.newAttachment(attachmentFile);

        final ItemBankUser user = securityUtil.getItemBankUser();
        itemRepository.saveAttachment(user, itemId, attachment, file);
    }
}
