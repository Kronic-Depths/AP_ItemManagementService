/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.repository;

import java.util.List;
import java.util.stream.Collectors;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.gitlab4j.api.models.Commit;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.client.GitClientFactory;
import org.opentestsystem.ap.ims.client.GitlabApi;
import org.opentestsystem.ap.ims.client.GitlabClient;
import org.opentestsystem.ap.ims.model.Item;
import org.opentestsystem.ap.ims.model.ItemBankUser;
import org.opentestsystem.ap.ims.model.ItemDiff;
import org.opentestsystem.ap.ims.model.ItemFactory;
import org.opentestsystem.ap.ims.model.ItemHistory;
import org.opentestsystem.ap.ims.model.ItemMapper;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.ap.ims.util.ResourceNotFoundException;
import org.opentestsystem.ap.ims.util.ValidationException;
import org.opentestsystem.saaif.item.ItemRelease;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import static org.apache.commons.lang3.StringUtils.equalsIgnoreCase;

/**
 * Item bank GitLab repository implementation.
 */
@Slf4j
@Component
public class ItemRepository {

    private final GitClientFactory gitClientFactory;

    private final ItemIdGenerator itemIdGenerator;

    private final GitlabClient gitlabClient;

    private final ItemFactory itemFactory;

    @Autowired
    public ItemRepository(final ItemRepositoryFactory itemRepositoryFactory) {
        this.gitClientFactory = itemRepositoryFactory.getGitClientFactory();
        this.gitlabClient = itemRepositoryFactory.getGitlabClient();
        this.itemIdGenerator = itemRepositoryFactory.getItemIdGenerator();
        this.itemFactory = itemRepositoryFactory.getItemFactory();
    }

    // ------------------------------------------------------------------------


    public List<ItemDiff> findItemDiff(final String itemId, final String historyId) {
        log.debug("find item diff for {} and history id", itemId, historyId);

        final Project project = gitlabClient.lookupProjectByName(itemId);

        final GitlabApi gitlabApi = GitlabApi.connect();

        final List<ItemDiff> itemDiff = gitlabApi.getItemDiff(project
            .getId().toString(), historyId);

        return itemDiff;
    }

    /**
     * Changes associated with an item.
     *
     * @param itemId The unique item identifier.
     * @return A list of changes associated with the item.
     */
    public List<ItemHistory> findItemHistory(final String itemId) {
        log.debug("find item history for {}", itemId);
        final List<Commit> commits = gitlabClient.lookupItemHistory(itemId);
        final List<ItemHistory> itemHistoryList = commits.stream().map(ItemMapper::mapToEntityItemHistory).collect
            (Collectors.toList());
        return itemHistoryList;
    }

    // ------------------------------------------------------------------------

    /**
     * Finds an item by its unique ID.
     *
     * @param user   The user finding the item.
     * @param itemId The unique item identifier.
     * @return The item.
     */
    public Item findItem(final ItemBankUser user, final String itemId) {
        log.debug("find item {}", itemId);

        // throws error if project not found
        gitlabClient.lookupProjectByName(itemId);

        final GitClient cli = gitClientFactory.openRepository(user, itemId);

        final boolean doesItemFileExistOnMaster = gitlabClient.doesItemFileExistOnMaster(itemId);

        final String scratchPadOwner = cli.findScratchPadOwner();

        final boolean isUserScratchPadOwner = equalsIgnoreCase(scratchPadOwner, user.getUsername());

        if (!doesItemFileExistOnMaster && !isUserScratchPadOwner) {
            // item is being created, the user is not the editor
            throw new ResourceNotFoundException("Item " + itemId + " not found");
        } else if (doesItemFileExistOnMaster && !isUserScratchPadOwner) {
            // item is being edited, the user is not the editor
            // show what is on master
            cli.checkoutMasterBranch();
        } else if (isUserScratchPadOwner) {
            // scratch pad owner is the editor
            cli.checkoutScratchPad();
        }
        cli.pullLatest();

        final ItemRelease saaifItem = cli.readItemFile();

        final org.opentestsystem.ap.ims.model.Item item = itemFactory.newItem(saaifItem);

        if (doesItemFileExistOnMaster) {
            item.setBeingEditedBy(scratchPadOwner);
        } else {
            item.setBeingCreatedBy(scratchPadOwner);
        }

        return item;
    }

    /**
     * The item passed in is saved and overwrites the previous item.  A commit is done
     * on the local repository followed by a push to the remote repository.
     *
     * @param user The user making the request.
     * @param item The item data that is updating the existing one.
     */
    public void saveItem(final ItemBankUser user, final Item item) {
        final String itemId = item.getId();
        log.debug("update Item {} by user {}", itemId, user.getUsername());

        final GitClient cli = gitClientFactory.openRepository(user, itemId);

        final String scratchPadOwner = cli.findScratchPadOwner();

        // must own scratch pad to make updates
        if (scratchPadOwner != null && equalsIgnoreCase(scratchPadOwner, user.getUsername())) {
            // prepare scratch pad for update
            cli.checkoutScratchPad();
            cli.pullLatest();

            // get the latest from the repo
            final ItemRelease saaifItem = cli.readItemFile();

            // use the repo instance as a base for the item model to update
            final ItemRelease updatedSaaifItem = item.toSaaif(saaifItem);

            // update item
            cli.writeItemFile(updatedSaaifItem);
            cli.stageItemFile();
            cli.commit("auto save");

            cli.push();
        } else if (scratchPadOwner == null) {
            throw new ValidationException("The item is not in edit mode.");
        } else {
            throw new ValidationException("Item is being edited by user " + scratchPadOwner);
        }
    }

    /**
     * Merge the changes on the scratch pad to the master branch.
     *
     * @param user   The user making the request.
     * @param itemId The item to merge to master.
     */
    public void commitItemChanges(final ItemBankUser user, final String itemId, final String commitMessage) {
        log.debug("merge scratch pad to master for item {}", itemId);

        final GitClient cli = gitClientFactory.openRepository(user, itemId);

        final String scratchPadOwner = cli.findScratchPadOwner();

        final boolean isUserScratchPadOwner = equalsIgnoreCase(scratchPadOwner, user.getUsername());

        if (!isUserScratchPadOwner) {
            throw new ValidationException("The item is being edited by " + scratchPadOwner);
        }

        cli.checkoutScratchPad();
        cli.pullLatest();

        cli.checkoutMasterBranch();
        cli.pullLatest();

        cli.mergeScratchPad();

        // itemRequestWrapper is not required
        if (StringUtils.isNotBlank(commitMessage)) {
            cli.commit(commitMessage);
        } else {
            cli.commit(null);
        }
        cli.push();
        cli.deleteScratchPad();

        gitlabClient.releaseItem(user, itemId);
    }

    // ------------------------------------------------------------------------

    /**
     * Creates a new item in the item bank.  This is the first step in the
     * process of authoring an item.  The repository is created but empty.
     *
     * @return The unique item identifier.
     */
    public String newItem(final ItemBankUser user) {
        log.debug("initialize new item");

        final String itemId = itemIdGenerator.generateItemId();

        gitlabClient.createProject(itemId);

        final GitClient cli = gitClientFactory.cloneRemoteRepository(user, itemId);
        cli.commit("initialize new item");
        cli.push();

        return itemId;
    }

    /**
     * Creates the scratch pad branch, writes the item file for the given type, and pushes the changes to the remote
     * repository.
     *
     * @param user     The user making the request.
     * @param itemId   The unique item identifier
     * @param itemType The type of item to create.
     * @return The item.
     */
    public Item beginCreateItem(final ItemBankUser user, final String itemId, final String itemType) {
        log.debug("begin item create: id {}, type {}", itemId, itemType);

        final Item item = itemFactory.newItem(itemId, itemType);

        final ItemRelease saaifItem = item.toSaaif();

        gitlabClient.claimItem(user, item.getId());

        final GitClient cli = gitClientFactory.openRepository(user, item.getId());
        cli.createScratchPad();
        cli.writeItemFile(saaifItem);
        cli.stageItemFile();
        cli.commit("begin create item");
        cli.push();

        item.setBeingCreatedBy(user.getUsername());

        return item;
    }

    /**
     * Delete's an item from the item bank.
     *
     * @param user   The user making the request.
     * @param itemId The unique item identifier.
     */
    public void deleteItem(final ItemBankUser user, final String itemId) {
        log.debug("delete Item {} by user {}", itemId, user.getUsername());

        final boolean existOnMaster = gitlabClient.doesItemFileExistOnMaster(itemId);

        if (!existOnMaster) {
            final GitClient cli = gitClientFactory.openRepository(user, itemId);

            final String scratchPadOwner = cli.findScratchPadOwner();

            if (scratchPadOwner != null && equalsIgnoreCase(scratchPadOwner, user.getUsername())) {
                gitlabClient.deleteProject(itemId);

            } else {
                throw new ResourceNotFoundException("Item " + itemId + " not found");
            }
        } else {
            throw new ValidationException("The item is not in create mode.");
        }
    }

    // ------------------------------------------------------------------------

    /**
     * Puts the item in edit mode where the given user is the editor.
     *
     * @param user   The user requesting to edit the item.
     * @param itemId The unique item identifier.
     */
    public void beginEditItem(final ItemBankUser user, final String itemId) {
        log.debug("begin edit item for item {}", itemId);

        final boolean isClaimed = gitlabClient.claimItem(user, itemId);

        final GitClient cli = gitClientFactory.openRepository(user, itemId);

        final String scratchPadOwner = cli.findScratchPadOwner();

        final boolean isUserScratchPadOwner = equalsIgnoreCase(scratchPadOwner, user.getUsername());

        final boolean doesItemFileExistOnMaster = gitlabClient.doesItemFileExistOnMaster(itemId);

        if (!doesItemFileExistOnMaster) {
            // item is being created, can't edit it
            throw new ResourceNotFoundException("Item " + itemId + " not found");
        } else if (!isClaimed || (scratchPadOwner != null && !isUserScratchPadOwner)) {
            throw new ValidationException("Item is being edited by " + scratchPadOwner);
        } else if (scratchPadOwner == null) {
            cli.checkoutMasterBranch();
            cli.deleteLocalScratchPad();
            cli.pullLatest();
            cli.createScratchPad();
            cli.stageItemFile();
            cli.commit("open item for edit");
            cli.push();
        }
    }

    /**
     * Deletes the scratchpad branch where not changes from any edits in the scratchpad are merged into
     * master.
     *
     * @param user   The user making the rollback request.
     * @param itemId The unique item identifier.
     */
    public void rollbackItemChanges(ItemBankUser user, String itemId) {
        log.debug("rollback item changes for item {}", itemId);

        final GitClient cli = gitClientFactory.openRepository(user, itemId);

        final String scratchPadOwner = cli.findScratchPadOwner();

        if (scratchPadOwner != null && equalsIgnoreCase(scratchPadOwner, user.getUsername())) {
            cli.checkoutMasterBranch();
            cli.deleteScratchPad();
            gitlabClient.releaseItem(user, itemId);
        } else if (scratchPadOwner == null) {
            throw new ValidationException("The item is not in edit mode.");
        } else {
            throw new ValidationException("Item is being edited by user " + scratchPadOwner);
        }
    }
}
