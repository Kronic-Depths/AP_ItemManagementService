/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.repository;

import com.google.common.annotations.VisibleForTesting;
import lombok.extern.slf4j.Slf4j;
import org.gitlab.api.GitlabAPI;
import org.gitlab.api.models.GitlabGroup;
import org.gitlab.api.models.GitlabProject;
import org.gitlab.api.models.GitlabSession;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.client.GitClientFactory;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.entity.ItemBankUser;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.saaif.item.ItemRelease;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.io.IOException;

/**
 * Item bank GitLab repository implementation.
 */
@Slf4j
@Component
public class ItemBankRepository {

    private final ItemBankProperties itemBankProperties;

    private final GitlabSession gitlabSession;

    private final ItemIdGenerator itemIdGenerator;

    private final GitClientFactory gitClientFactory;

    private GitlabAPI gitlabApi;

    private GitlabGroup group;

    @Autowired
    public ItemBankRepository(ItemBankProperties itemBankProperties,
                              GitlabSession gitlabSession,
                              ItemIdGenerator itemIdGenerator,
                              GitClientFactory gitClientFactory) {
        this.itemBankProperties = itemBankProperties;
        this.gitlabSession = gitlabSession;
        this.itemIdGenerator = itemIdGenerator;
        this.gitClientFactory = gitClientFactory;
    }

    @PostConstruct
    public void initialize() {
        if (gitlabSession != null && gitlabSession.getPrivateToken() != null) {
            gitlabApi = GitlabAPI.connect(itemBankProperties.getHost(), gitlabSession.getPrivateToken());
            group = lookupGroup();
        }
    }

    /**
     * Creates a new item in the item bank.  The repository is created but empty.
     * A local instance of the repository exists on the file system when this
     * method returns.
     *
     * @return The new item's unique identifier.
     */
    public String initializeNewItem(ItemBankUser user) {
        log.debug("initialize new item");

        final String itemId = itemIdGenerator.generateItemId();

        final GitlabGroup group = getGroup();
        createProject(group, itemId);

        final GitClient cli = gitClientFactory.cloneRemoteRepository(user, itemId);
        cli.commit(itemBankProperties.getInitialCommitMessage());
        cli.push();

        return itemId;
    }

    /**
     * It is expected this method is called after a new item is created.
     * The new item is essentially empty.  This method creates the scratch
     * pad branch, writes the item to a file, and pushes the changes to the
     * remote host.
     */
    public void initializeItemType(ItemBankUser user, ItemRelease item) {
        log.debug("initialize item type");
        final String itemId = item.getItem().getId();
        final GitClient cli = gitClientFactory.openRepository(user, itemId);
        cli.createScratchPad();
        cli.writeItemFile(item);
        cli.stageItemFile();
        cli.commit("initialize item type");
        cli.push();
    }

    public ItemRelease findItem(ItemBankUser user, String itemId) {
        final GitClient cli = gitClientFactory.openRepository(user, itemId);
        return cli.readItemFile();
    }

    // ------------------------------------------------------------------------

    /**
     * Creates a new project in Gitlab.
     *
     * @param group    The group to associate the project with.
     * @param itemName The name of the new project.
     * @return The new Gitlab project.
     */
    @VisibleForTesting
    GitlabProject createProject(GitlabGroup group, String itemName) {
        final GitlabProject project;
        try {
            project = gitlabApi.createProject(
                (String) itemName,            // name
                (Integer) group.getId(),    // namespaceId
                (String) null,              // description
                Boolean.TRUE,               // issuesEnabled
                Boolean.FALSE,               // wallEnabled
                Boolean.FALSE,               // mergeRequestsEnabled
                Boolean.FALSE,               // wikiEnabled
                Boolean.FALSE,               // snippetsEnabled
                Boolean.FALSE,              // publik
                0,                          // visibilityLevel
                (String) null               // importUrl
            );
        } catch (IOException e) {
            throw new RuntimeException("Error creating project", e);
        }
        return project;
    }

    /**
     * Looks up the configured Gitlab group.
     *
     * @return The Gitlab group.
     */
    @VisibleForTesting
    GitlabGroup lookupGroup() {
        log.debug("getting group {}", itemBankProperties.getGroup());
        try {
            return gitlabApi.getGroup(itemBankProperties.getGroup());
        } catch (IOException e) {
            throw new RuntimeException("Error looking up Gitlab Group", e);
        }
    }

    /**
     * Looks up the configured Gitlab group.
     *
     * @return The Gitlab group.
     */
    @VisibleForTesting
    GitlabGroup getGroup() {
        return group;
    }

    @VisibleForTesting
    void setGitlabApi(GitlabAPI gitlabApi) {
        this.gitlabApi = gitlabApi;
    }

}
