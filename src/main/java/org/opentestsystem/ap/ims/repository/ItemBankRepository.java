/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.repository;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.client.GitClientFactory;
import org.opentestsystem.ap.ims.client.GitlabClient;
import org.opentestsystem.ap.ims.entity.Item;
import org.opentestsystem.ap.ims.entity.ItemBankUser;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.ap.ims.util.ItemMapper;
import org.opentestsystem.ap.ims.util.ResourceNotFoundException;
import org.opentestsystem.saaif.item.ItemRelease;
import org.opentestsystem.saaif.item.SaaifItemFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import static org.apache.commons.lang3.StringUtils.equalsIgnoreCase;
import static org.opentestsystem.saaif.item.SaaifItemConstants.ItemLanguage.LANG_ENU;

/**
 * Item bank GitLab repository implementation.
 */
@Slf4j
@Component
public class ItemBankRepository {

    private final GitClientFactory gitClientFactory;

    private final ItemIdGenerator itemIdGenerator;

    private final GitlabClient gitlabClient;

    private final ItemMapper itemMapper;

    private final SaaifItemFactory saaifItemFactory;

    @Autowired
    public ItemBankRepository(final GitClientFactory gitClientFactory) {
        this.gitClientFactory = gitClientFactory;
        this.gitlabClient = gitClientFactory.getGitlabClient();
        this.itemIdGenerator = gitClientFactory.getItemIdGenerator();
        this.itemMapper = gitClientFactory.getItemMapper();
        this.saaifItemFactory = gitClientFactory.getSaaifItemFactory();
    }

    /**
     * Creates a new item in the item bank.  The repository is created but empty.
     * A local instance of the repository exists on the file system when this
     * method returns.
     *
     * @return The new item's unique identifier.
     */
    public String initializeNewItem(final ItemBankUser user) {
        log.debug("initialize new item");

        final String itemId = itemIdGenerator.generateItemId();

        gitlabClient.createProject(itemId);

        final GitClient cli = gitClientFactory.cloneRemoteRepository(user, itemId);
        cli.commit("initial commit");
        cli.push();

        return itemId;
    }

    /**
     * It is expected this method is called after a new item is created.
     * The new item is essentially empty.  This method creates the scratch
     * pad branch, writes the item to a file, and pushes the changes to the
     * remote host.
     */
    public Item initializeItemType(final ItemBankUser user, final String itemId, final String itemType) {
        log.debug("initialize item type {} for item {}", itemType, itemId);

        final ItemRelease saaifItem = saaifItemFactory.newAssessmentItem(itemId, itemType, LANG_ENU);

        final GitClient cli = gitClientFactory.openRepository(user, itemId);
        cli.createScratchPad();
        cli.writeItemFile(saaifItem);
        cli.stageItemFile();
        cli.commit("initialize item type");
        cli.push();

        final Item item = itemMapper.mapToEntityItem(saaifItem.getItem());
        item.setBeingCreatedBy(user.getUsername());

        return item;
    }

    /**
     * Puts the item in edit mode where the given user is the editor.
     *
     * @param user   The user requesting to edit the item.
     * @param itemId The unique item ID.
     */
    public void initializeItemForEdit(final ItemBankUser user, final String itemId) {
        log.debug("initialize item {} for editing", itemId);
        final GitClient cli = gitClientFactory.openRepository(user, itemId);
        cli.checkoutMasterBranch();
        cli.pullLatest();
        cli.createScratchPad();
        cli.stageItemFile();
        cli.commit("initialize scratch pad for editing");
        cli.push();
    }

    /**
     * Finds an item by its unique ID.
     *
     * @param user   The user finding the item.
     * @param itemId The unique item ID.
     * @return The item.
     */
    public Item findItem(final ItemBankUser user, final String itemId) {
        log.debug("find item {}", itemId);
        final GitClient cli = gitClientFactory.openRepository(user, itemId);

        final String scratchPadOwner = cli.findScratchPadOwner();

        final boolean doesItemFileExistOnMaster = cli.doesItemFileExistOnMaster();

        final boolean isUserScratchPadOwner = equalsIgnoreCase(scratchPadOwner, user.getUsername());

        if (!doesItemFileExistOnMaster && !isUserScratchPadOwner) {
            // item is being created, the user is not the editor
            throw new ResourceNotFoundException("Item " + itemId + " not found");
        } else if (doesItemFileExistOnMaster && !isUserScratchPadOwner) {
            // item is being edited, the user is not the editor
            // show what is on master
            cli.checkoutMasterBranch();
        } else if (isUserScratchPadOwner) {
            // scratch pad owner is the editor
            cli.checkoutScratchPad();
        }
        cli.pullLatest();

        final ItemRelease saaifItem = cli.readItemFile();
        final Item item = itemMapper.mapToEntityItem(saaifItem.getItem());

        if (doesItemFileExistOnMaster) {
            item.setBeingEditedBy(scratchPadOwner);
        } else {
            item.setBeingCreatedBy(scratchPadOwner);
        }

        return item;
    }

    /**
     * Merge the changes on the scratch pad to the master branch.
     *
     * @param user   The user making the request.
     * @param itemId The item to merge to master.
     */
    public void commitItemChanges(final ItemBankUser user, final String itemId) {
        log.debug("merge scratch pad to master");
        final GitClient cli = gitClientFactory.openRepository(user, itemId);
        cli.checkoutMasterBranch();
        cli.pullLatest();
        cli.mergeScratchPad();
        cli.push();
        cli.deleteScratchPad();
    }

    /**
     * Delete's an item from the item bank.
     *
     * @param user   The user making the request.
     * @param itemId The item to delete.
     */
    public void deleteItem(final ItemBankUser user, final String itemId) {
        log.debug("delete Item {} by user {}", itemId, user.getUsername());
        gitlabClient.deleteProject(itemId);
    }

    /**
     * The item passed in is saved and overwrites the previous item.  A commit is done
     * on the local repository followed by a push to the remote repository.
     *
     * @param user The user making the request.
     * @param item The item data that is updating the existing one.
     */
    public void updateItem(final ItemBankUser user, final Item item) {
        final String itemId = item.getId();
        log.debug("update Item {} by user {}", itemId, user.getUsername());

        final GitClient cli = gitClientFactory.openRepository(user, itemId);

        final String scratchPadOwner = cli.findScratchPadOwner();

        // TODO Does this need to be here or the responsibility of the caller (ItemBankService)
        if (scratchPadOwner == null) {
            // there is no scratch pad, user making update request is now the owner
            initializeItemForEdit(user, itemId);
        }
        // must own scratch pad to make updates
        if (scratchPadOwner == null || equalsIgnoreCase(scratchPadOwner, user.getUsername())) {
            final ItemRelease saaifItem = itemMapper.mapToSaaifAssesmentItem(item);

            // prepare scratch pad for update
            cli.checkoutScratchPad();
            cli.pullLatest();

            // update item
            cli.writeItemFile(saaifItem);
            cli.stageItemFile();
            cli.commit("saving changes to item");

            cli.push();
        }
    }

}
