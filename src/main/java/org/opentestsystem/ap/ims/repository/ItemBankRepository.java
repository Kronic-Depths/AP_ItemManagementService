/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.repository;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.ims.client.GitClient;
import org.opentestsystem.ap.ims.client.GitClientFactory;
import org.opentestsystem.ap.ims.client.GitlabClient;
import org.opentestsystem.ap.ims.config.ItemBankProperties;
import org.opentestsystem.ap.ims.entity.ItemBankUser;
import org.opentestsystem.ap.ims.util.ItemIdGenerator;
import org.opentestsystem.saaif.item.ItemRelease;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * Item bank GitLab repository implementation.
 */
@Slf4j
@Component
public class ItemBankRepository {

    private final ItemBankProperties itemBankProperties;

    private final ItemIdGenerator itemIdGenerator;

    private final GitlabClient gitlabClient;

    private final GitClientFactory gitClientFactory;

    @Autowired
    public ItemBankRepository(final ItemBankProperties itemBankProperties,
                              final GitlabClient gitlabClient,
                              final ItemIdGenerator itemIdGenerator,
                              final GitClientFactory gitClientFactory) {
        this.itemBankProperties = itemBankProperties;
        this.gitlabClient = gitlabClient;
        this.itemIdGenerator = itemIdGenerator;
        this.gitClientFactory = gitClientFactory;
    }

    /**
     * Creates a new item in the item bank.  The repository is created but empty.
     * A local instance of the repository exists on the file system when this
     * method returns.
     *
     * @return The new item's unique identifier.
     */
    public String initializeNewItem(final ItemBankUser user) {
        log.debug("initialize new item");

        final String itemId = itemIdGenerator.generateItemId();

        gitlabClient.createProject(itemId);

        final GitClient cli = gitClientFactory.cloneRemoteRepository(user, itemId);
        cli.commit("initial commit");
        cli.push();

        return itemId;
    }

    /**
     * It is expected this method is called after a new item is created.
     * The new item is essentially empty.  This method creates the scratch
     * pad branch, writes the item to a file, and pushes the changes to the
     * remote host.
     */
    public void initializeItemType(final ItemBankUser user, final ItemRelease item) {
        log.debug("initialize item type");
        final String itemId = item.getItem().getId();
        final GitClient cli = gitClientFactory.openRepository(user, itemId);
        cli.createScratchPad();
        cli.writeItemFile(item);
        cli.stageItemFile();
        cli.commit("initialize item type");
        cli.push();
    }

    public ItemRelease findItem(final ItemBankUser user, final String itemId) {
        final GitClient cli = gitClientFactory.openRepository(user, itemId);
        return cli.readItemFile();
    }

    /**
     * Merge the changes on the scratch pad to the master branch.
     *
     * @param user   The user making the request.
     * @param itemId The item to merge to master.
     */
    public void commitItemChanges(final ItemBankUser user, final String itemId) {
        log.debug("merge scratch pad to master");
        final GitClient cli = gitClientFactory.openRepository(user, itemId);
        cli.checkoutMasterBranch();
        cli.pullLatest();
        cli.mergeScratchPad();
        cli.push();
        cli.deleteScratchPad();
    }

    /**
     * Delete's an item from the item bank.
     *
     * @param user   The user making the request.
     * @param itemId The item to delete.
     */
    public void deleteItem(final ItemBankUser user, final String itemId) {
        gitlabClient.deleteProject(itemId);
    }

    public void updateItem(final ItemBankUser user, final ItemRelease item) {
    }
}
