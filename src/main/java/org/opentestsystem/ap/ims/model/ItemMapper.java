/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ims.model;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import javax.xml.bind.JAXBElement;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.saaif.item.ItemRelease;
import org.opentestsystem.saaif.item.ObjectFactory;
import org.springframework.stereotype.Component;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.apache.commons.lang3.StringUtils.trim;
import static org.opentestsystem.ap.ims.model.ItemConstants.EXEMPLAR_PURPOSE;
import static org.opentestsystem.ap.ims.model.ItemConstants.EXEMPLAR_RESPONSE;
import static org.opentestsystem.ap.ims.model.ItemConstants.EXEMPLAR_SCOREPOINT;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemAnswerKey;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemFormat;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemId;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemPageLayout;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemAttribute.ItemResponseType;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemLanguage.LANG_ENU;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemVersion.ITEM_RELEASE_VERSION;
import static org.opentestsystem.ap.ims.model.ItemConstants.ItemVersion.ITEM_VERSION;

/**
 * Maps IMS entities to/from SAAIF entities.
 */
@Component
public class ItemMapper {

    private static final ObjectFactory OBJECT_FACTORY = new ObjectFactory();

    // ------------------------------------------------------------------------

    /**
     * Creates an item wrapper (i.e. <code>ItemRelease</code>) for the given item.
     *
     * @param item The item encapsulated by the wrapper.
     * @return An {@link org.opentestsystem.saaif.item.ItemRelease} instance.
     */
    public static ItemRelease newSaaifAssessmentItem(ItemRelease.Item item) {
        final ItemRelease itemRelease = OBJECT_FACTORY.createItemrelease();
        itemRelease.setVersion(ITEM_RELEASE_VERSION);
        itemRelease.setItem(item);
        return itemRelease;
    }

    /**
     * Creates a minimal item.  The item does not have attributes set so it is not a valid minimal item.
     *
     * @param itemId     The item ID.
     * @param itemFormat The format of the item being created.
     * @return A {@link org.opentestsystem.saaif.item.ItemRelease.Item} instance.
     */
    public static ItemRelease.Item newSaaifItem(String itemId, String itemFormat) {
        final ItemRelease.Item item = OBJECT_FACTORY.createItemreleaseItem();
        item.setId(itemId);
        item.setFormat(itemFormat);
        item.setVersion(ITEM_VERSION);
        return item;
    }

    /**
     * The minimum valid {@link org.opentestsystem.saaif.item.ItemRelease.Item.Content} instance.
     *
     * @param lang The content language to set.
     * @return A {@link org.opentestsystem.saaif.item.ItemRelease.Item.Content} instance.
     */
    public static ItemRelease.Item.Content newSaaifContent(String lang) {
        final ItemRelease.Item.Content content = OBJECT_FACTORY.createItemreleaseItemContent();
        content.setVersion(ItemConstants.ItemVersion.CONTENT_VERSION);
        content.setLanguage(lang);
        content.setStem(EMPTY);
        return content;
    }

    /**
     * The minimum list of attributes when creating a new item.
     *
     * @param itemId           The unique item ID.
     * @param itemFormat       The Item Format attribute value.
     * @param itemPageLayout   The Page Layout attribute value.
     * @param itemResponseType The Response Type attribute value.
     * @return The minimum list of attributes.
     */
    public static ItemRelease.Item.Attriblist newSaaifItemAttributeList(String itemId,
                                                                        String itemFormat,
                                                                        String itemPageLayout,
                                                                        String itemResponseType) {
        final ItemRelease.Item.Attriblist attriblist = OBJECT_FACTORY.createItemreleaseItemAttriblist();
        attriblist.getAttrib().add(newSaaifAttribute(ItemId, itemId));
        attriblist.getAttrib().add(newSaaifAttribute(ItemFormat, itemFormat.toUpperCase()));
        attriblist.getAttrib().add(newSaaifAttribute(ItemAnswerKey, itemFormat.toUpperCase()));
        attriblist.getAttrib().add(newSaaifAttribute(ItemPageLayout, itemPageLayout));
        attriblist.getAttrib().add(newSaaifAttribute(ItemResponseType, itemResponseType));
        return attriblist;
    }

    /**
     * Creates attribute new {@link ItemRelease.Item.Attriblist.Attrib} instance.
     *
     * @param attribute The attribute enum.
     * @param val       The attribute value.
     * @return An {@link ItemRelease.Item.Attriblist.Attrib} instance.
     */
    public static ItemRelease.Item.Attriblist.Attrib newSaaifAttribute(ItemConstants.ItemAttribute attribute, String
        val) {
        return newSaaifAttribute(attribute.getAttId(), attribute.getName(), val);
    }

    /**
     * Creates a new {@link ItemRelease.Item.Attriblist.Attrib} instance.
     *
     * @param attid The attribute id.
     * @param name  The attribute name.
     * @param val   The attribute value.
     * @return An {@link ItemRelease.Item.Attriblist.Attrib} instance.
     */
    public static ItemRelease.Item.Attriblist.Attrib newSaaifAttribute(String attid, String name, String val) {
        final ItemRelease.Item.Attriblist.Attrib attribute = OBJECT_FACTORY.createItemreleaseItemAttriblistAttrib();
        attribute.setAttid(attid);
        attribute.setName(name);
        attribute.setVal(val);
        attribute.setDesc(EMPTY);
        return attribute;
    }

    // ------------------------------------------------------------------------

    public static ItemRelease.Item.Content findEnglishContent(final ItemRelease.Item saaifItem) {
        ItemRelease.Item.Content content = null;

        final List<ItemRelease.Item.Content> saaifContentList = saaifItem.getContent();

        if (CollectionUtils.isNotEmpty(saaifContentList)) {
            for (ItemRelease.Item.Content temp : saaifContentList) {
                if (LANG_ENU.equalsIgnoreCase(temp.getLanguage())) {
                    content = temp;
                    break;
                }
            }
        }
        return content;
    }

    public static List<String> findExemplarResponses(final ItemRelease.Item.Content saaifContent) {
        List<String> exemplarResponses = Collections.emptyList();
        if (saaifContent != null) {
            final ItemRelease.Item.Content.Rubriclist saaifRubriclist = saaifContent.getRubriclist();
            if (saaifRubriclist != null) {
                exemplarResponses = findExemplarResponses(saaifRubriclist.getContent());
            }
        }
        return exemplarResponses;
    }

    public static List<String> findExemplarResponses(final List<Serializable> saaifRubricListItems) {
        if (isNotEmpty(saaifRubricListItems)) {

            for (Serializable rubricListItem : saaifRubricListItems) {
                JAXBElement element = (JAXBElement) rubricListItem;

                if (ItemRelease.Item.Content.Rubriclist.Samplelist.class.equals(element.getDeclaredType())) {
                    final ItemRelease.Item.Content.Rubriclist.Samplelist saaifSampleList = (ItemRelease.Item.Content
                        .Rubriclist
                        .Samplelist) element.getValue();

                    final List<ItemRelease.Item.Content.Rubriclist.Samplelist.Sample> saaifSamples = saaifSampleList
                        .getSample();
                    if (isNotEmpty(saaifSamples)) {

                        return saaifSamples.stream().filter(sample -> EXEMPLAR_PURPOSE.equalsIgnoreCase
                            (sample.getPurpose())).map(sample -> sample.getSamplecontent()).collect(Collectors.toList
                            ());
                    }
                }
            }
        }
        return Collections.emptyList();
    }


    // ------------------------------------------------------------------------
    // Map IMS to SAAIF
    // ------------------------------------------------------------------------

    public static void mapToSaaifExemplarResponses(final List<String> exemplarResponses,
                                                   final ItemRelease.Item.Content saaifContent) {
        if (exemplarResponses != null) {
            saaifContent.setRubriclist(mapExemplarResponses(exemplarResponses));
        }
    }

    public static ItemRelease.Item.Content.Rubriclist mapExemplarResponses(final List<String> exemplarResponses) {
        final int exemplarIndex = 0;

        final ItemRelease.Item.Content.Rubriclist saaifRubriclist = OBJECT_FACTORY
            .createItemreleaseItemContentRubriclist();

        if (exemplarResponses != null) {

            final ItemRelease.Item.Content.Rubriclist.Rubric saaifRubric = mapToSaaifRubric(exemplarIndex,
                EXEMPLAR_RESPONSE, EMPTY, EXEMPLAR_SCOREPOINT);

            final ItemRelease.Item.Content.Rubriclist.Samplelist saaifSampleList = mapToSaaifSamplelist
                (exemplarIndex, EXEMPLAR_SCOREPOINT);

            for (int index = 0; index < exemplarResponses.size(); ++index) {
                final String exemplarResponse = exemplarResponses.get(index);
                if (StringUtils.isNotBlank(exemplarResponse))
                    saaifSampleList.getSample().add(mapToSaaifSample(EXEMPLAR_PURPOSE + index, EXEMPLAR_PURPOSE,
                       trim(exemplarResponse), EXEMPLAR_SCOREPOINT));
            }

            saaifRubriclist.getContent().add(OBJECT_FACTORY.createItemreleaseItemContentRubriclistRubric
                (saaifRubric));

            saaifRubriclist.getContent().add(OBJECT_FACTORY.createItemreleaseItemContentRubriclistSamplelist
                (saaifSampleList));
        }
        return saaifRubriclist;
    }

    public static ItemRelease.Item.Content.Rubriclist.Rubric mapToSaaifRubric(final int index,
                                                                              final String name,
                                                                              final String val,
                                                                              final String scorepoint) {
        final ItemRelease.Item.Content.Rubriclist.Rubric saaifRubric = OBJECT_FACTORY
            .createItemreleaseItemContentRubriclistRubric();

        saaifRubric.setIndex(index);
        saaifRubric.setName(name);
        saaifRubric.setVal(val);
        saaifRubric.setScorepoint(scorepoint);

        return saaifRubric;
    }

    public static ItemRelease.Item.Content.Rubriclist.Samplelist mapToSaaifSamplelist(final int index,
                                                                                      final String scorepoint) {
        final ItemRelease.Item.Content.Rubriclist.Samplelist saaifSamplelist = OBJECT_FACTORY
            .createItemreleaseItemContentRubriclistSamplelist();

        saaifSamplelist.setIndex(index);
        saaifSamplelist.setMinval(toByte(scorepoint));
        saaifSamplelist.setMaxval(toByte(scorepoint));


        return saaifSamplelist;
    }

    public static ItemRelease.Item.Content.Rubriclist.Samplelist.Sample mapToSaaifSample(final String name,
                                                                                         final String purpose,
                                                                                         final String content,
                                                                                         final String scorepoint) {
        final ItemRelease.Item.Content.Rubriclist.Samplelist.Sample saaifSample = OBJECT_FACTORY
            .createItemreleaseItemContentRubriclistSamplelistSample();

        saaifSample.setName(name);
        saaifSample.setPurpose(purpose);
        saaifSample.setSamplecontent(content);
        saaifSample.setScorepoint(toByte(scorepoint));

        return saaifSample;
    }

    /**
     * Converts a String to a Byte. If null is passed in then null is returned.
     *
     * @param val The String to convert.
     * @return The Byte value of the String.
     */
    private static Byte toByte(final String val) {
        return val != null ? Byte.valueOf(val) : null;
    }
}
